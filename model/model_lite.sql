-- -----------------------------------------------------
-- Table actyunits
-- -----------------------------------------------------
CREATE TABLE actyunits ( UNIT_COD CHAR(3) NOT NULL , UNIT_DES VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LZH VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LSW VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LRU VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LPT VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LNL VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LKO VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LJA VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LIT VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LFR VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LES VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_LDE VARCHAR(60) NULL DEFAULT 'Without description' , UNIT_ABR VARCHAR(20) NULL DEFAULT 'Without description' , PRIMARY KEY (UNIT_COD) ) ; 

-- -----------------------------------------------------
-- Table activity
-- -----------------------------------------------------
CREATE TABLE activity ( ACTY_COD CHAR(3) NOT NULL , UNIT_COD CHAR(3) NULL , ACTY_DES VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LZH VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LSW VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LRU VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LPT VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LNL VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LKO VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LJA VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LIT VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LES VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_LDE VARCHAR(20) NULL DEFAULT 'Without description' , ACTY_TYP CHAR(1) NULL DEFAULT 'C' , ACTY_CTY CHAR(1) NULL DEFAULT 'O' , ACTY_IO CHAR(1) NULL DEFAULT 'I' , PRIMARY KEY (ACTY_COD)  ) ; 

-- -----------------------------------------------------
-- Table actymethods
-- -----------------------------------------------------
CREATE TABLE actymethods ( ACTY_COD CHAR(3) NOT NULL , MET_COD VARCHAR(5) NOT NULL , MET_DES VARCHAR(60) NULL DEFAULT 'Without description' , MET_LZH VARCHAR(60) NULL DEFAULT 'Without description' , MET_LSW VARCHAR(60) NULL DEFAULT 'Without description' , MET_LRU VARCHAR(60) NULL DEFAULT 'Without description' , MET_LPT VARCHAR(60) NULL DEFAULT 'Without description' , MET_LNL VARCHAR(60) NULL DEFAULT 'Without description' , MET_LKO VARCHAR(60) NULL DEFAULT 'Without description' , MET_LJA VARCHAR(60) NULL DEFAULT 'Without description' , MET_LIT VARCHAR(60) NULL DEFAULT 'Without description' , MET_LFR VARCHAR(60) NULL DEFAULT 'Without description' , MET_LES VARCHAR(60) NULL DEFAULT 'Without description' , MET_LDE VARCHAR(60) NULL DEFAULT 'Without description' , PRIMARY KEY (ACTY_COD, MET_COD)  ) ; 

-- -----------------------------------------------------
-- Table country
-- -----------------------------------------------------
CREATE TABLE country ( CNTY_COD CHAR(3) NOT NULL , CNTY_NAM VARCHAR(20) NULL DEFAULT 'Without name' , CURRDES VARCHAR(30) NULL DEFAULT 'Without description' , CURRSYMBOL VARCHAR(8) NULL DEFAULT 'No Sym' , CURRCODE VARCHAR(4) NULL DEFAULT 'NONE' , PRIMARY KEY (CNTY_COD) ) ; 

-- -----------------------------------------------------
-- Table cpprods
-- -----------------------------------------------------
CREATE TABLE cpprods ( PROD_COD CHAR(3) NOT NULL , PROD_DES VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LZH VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LSW VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LRU VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LPT VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LNL VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LKO VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LJA VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LIT VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LFR VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LES VARCHAR(60) NULL DEFAULT 'Without description' , PROD_LDE VARCHAR(60) NULL DEFAULT 'Without description' , PRIMARY KEY (PROD_COD) ) ; 

-- -----------------------------------------------------
-- Table crop
-- -----------------------------------------------------
CREATE TABLE crop ( CROP_COD CHAR(3) NOT NULL , CROP_DES VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LZH VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LSW VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LRU VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LPT VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LNL VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LKO VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LJA VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LIT VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LFR VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LES VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LDE VARCHAR(30) NULL DEFAULT 'Without description' , VEGETABLE CHAR(1) NULL DEFAULT 'N' , SHOWINLIST CHAR(1) NULL DEFAULT 'Y' , PRIMARY KEY (CROP_COD) ) ; 

-- -----------------------------------------------------
-- Table forages
-- -----------------------------------------------------
CREATE TABLE forages ( FORA_COD CHAR(3) NOT NULL , FORA_DES VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LZH VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LSW VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LRU VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LPT VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LNL VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LKO VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LJA VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LIT VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LFR VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LES VARCHAR(60) NULL DEFAULT 'Without description' , FORA_LDE VARCHAR(60) NULL DEFAULT 'Without description' , PRIMARY KEY (FORA_COD) ) ; 

-- -----------------------------------------------------
-- Table cropfora
-- -----------------------------------------------------
CREATE TABLE cropfora ( CROP_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , ENERGY DECIMAL(7,3) NULL DEFAULT 0 , PROTEIN DECIMAL(7,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(7,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(7,3) NULL DEFAULT 0 , NDF DECIMAL(7,3) NULL DEFAULT 0 , DIGESTI DECIMAL(7,3) NULL DEFAULT 0 , ANENERGY DECIMAL(7,3) NULL DEFAULT 0 , USDAR VARCHAR(20) NULL DEFAULT 'Without description' , USDAC VARCHAR(20) NULL DEFAULT 'Without description' , SNITROGEN DECIMAL(7,3) NULL DEFAULT 0 , ASH DECIMAL(7,3) NULL DEFAULT 0 , PRIMARY KEY (CROP_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table cropprods
-- -----------------------------------------------------
CREATE TABLE cropprods ( CROP_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , ENERGY DECIMAL(7,3) NULL DEFAULT 0 , PROTEIN DECIMAL(7,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(7,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(7,3) NULL DEFAULT 0 , NDF DECIMAL(7,3) NULL DEFAULT 0 , DIGESTI DECIMAL(7,3) NULL DEFAULT 0 , ANENERGY DECIMAL(7,4) NULL DEFAULT 0 , USADR VARCHAR(20) NULL DEFAULT 'Without description' , USADC VARCHAR(20) NULL DEFAULT 'Without description' , SNITROGEN DECIMAL(7,3) NULL DEFAULT 0 , ASH DECIMAL(7,3) NULL DEFAULT 0 , PRIMARY KEY (CROP_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table drainage
-- -----------------------------------------------------
CREATE TABLE drainage ( DRAIN_COD VARCHAR(5) NOT NULL , DRAIN_DES VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LZH VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LSW VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LRU VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LPT VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LNL VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LKO VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LJA VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LIT VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LFR VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LES VARCHAR(30) NULL DEFAULT 'Without description' , DRAIN_LDE VARCHAR(30) NULL DEFAULT 'Without description' , PRIMARY KEY (DRAIN_COD) ) ; 

-- -----------------------------------------------------
-- Table ferttype
-- -----------------------------------------------------
CREATE TABLE ferttype ( FERTYP_COD VARCHAR(5) NOT NULL , FERTYP_DES VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LZH VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LSW VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LRU VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LPT VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LNL VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LKO VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LJA VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LIT VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LFR VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LES VARCHAR(30) NULL DEFAULT 'Without description' , FERTYP_LDE VARCHAR(30) NULL DEFAULT 'Without description' , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , MANURE CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (FERTYP_COD) ) ; 

-- -----------------------------------------------------
-- Table hcompprods
-- -----------------------------------------------------
CREATE TABLE hcompprods ( PROD_COD VARCHAR(5) NOT NULL , PROD_TYP VARCHAR(20) NULL , PROD_DES VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LZH VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LSW VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LRU VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LPT VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LNL VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LKO VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LJA VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LIT VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LFR VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LES VARCHAR(85) NULL DEFAULT 'Without description' , PROD_LDE VARCHAR(85) NULL DEFAULT 'Without description' , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , ENERGY DECIMAL(7,3) NULL DEFAULT 0 , PROTEIN DECIMAL(7,3) NULL DEFAULT 0 , PRIMARY KEY (PROD_COD) ) ; 

-- -----------------------------------------------------
-- Table livestoc
-- -----------------------------------------------------
CREATE TABLE livestoc ( LIVE_COD CHAR(3) NOT NULL , LIVE_DES VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LZH VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LSW VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LRU VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LPT VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LNL VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LKO VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LJA VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LIT VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LFR VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LES VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_LDE VARCHAR(30) NULL DEFAULT 'Without description' , LIVE_TPY CHAR(1) NULL DEFAULT 'R' , PRIMARY KEY (LIVE_COD) ) ; 

-- -----------------------------------------------------
-- Table products
-- -----------------------------------------------------
CREATE TABLE products ( PROD_COD CHAR(3) NOT NULL , PROD_DES VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LZH VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LZW VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LRU VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LPT VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LNL VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LKO VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LJA VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LIT VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LFR VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LES VARCHAR(30) NULL DEFAULT 'Without description' , PROD_LDE VARCHAR(30) NULL DEFAULT 'Without description' , INDNANIM CHAR(1) NULL DEFAULT 'N' , INDWEIGHT CHAR(1) NULL DEFAULT 'N' , INDPRICE CHAR(1) NULL DEFAULT 'Y' , INDQTY CHAR(1) NULL DEFAULT 'Y' , HHCONS CHAR(1) NULL DEFAULT 'Y' , BYCATE CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (PROD_COD) ) ; 

-- -----------------------------------------------------
-- Table lvproducts
-- -----------------------------------------------------
CREATE TABLE lvproducts ( LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , ENERGY DECIMAL(7,3) NULL DEFAULT 0 , PROTEIN DECIMAL(7,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(7,3) NULL DEFAULT 0 , USDAR VARCHAR(20) NULL DEFAULT 'Without description' , SALESBY CHAR(1) NULL DEFAULT 'Q' , WEIGHT CHAR(1) NULL DEFAULT 'N' , HHCONS CHAR(1) NULL DEFAULT 'Y' , HERD CHAR(1) NULL DEFAULT 'N' , MANURE CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (LIVE_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table markoutlet
-- -----------------------------------------------------
CREATE TABLE markoutlet ( MARK_COD CHAR(3) NOT NULL , MARK_DES VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LZH VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LSW VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LRU VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LPT VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LNL VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LKO VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LJA VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LIT VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LFR VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LES VARCHAR(30) NULL DEFAULT 'Without description' , MARK_LDE VARCHAR(30) NULL DEFAULT 'Without description' , PRIMARY KEY (MARK_COD) ) ; 

-- -----------------------------------------------------
-- Table pastures
-- -----------------------------------------------------
CREATE TABLE pastures ( CROP_COD CHAR(3) NOT NULL , CROP_DES VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LZH VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LSW VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LRU VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LPT VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LNL VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LKO VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LJA VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LIT VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LFR VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LES VARCHAR(30) NULL DEFAULT 'Without description' , CROP_LDE VARCHAR(30) NULL DEFAULT 'Without description' , DETAIL CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (CROP_COD) ) ; 

-- -----------------------------------------------------
-- Table pastfora
-- -----------------------------------------------------
CREATE TABLE pastfora ( CROP_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , ENERGY DECIMAL(7,3) NULL DEFAULT 0 , PROTEIN DECIMAL(7,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(7,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(7,3) NULL DEFAULT 0 , NDF DECIMAL(7,3) NULL DEFAULT 0 , DIGESTI DECIMAL(7,3) NULL DEFAULT 0 , ANENERGY DECIMAL(7,3) NULL DEFAULT 0 , USDAR VARCHAR(20) NULL DEFAULT 'Without description' , USDAC VARCHAR(20) NULL DEFAULT 'Without description' , SNITROGEN DECIMAL(7,3) NULL DEFAULT 0 , ASH DECIMAL(7,3) NULL DEFAULT 0 , PRIMARY KEY (CROP_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table restypes
-- -----------------------------------------------------
CREATE TABLE restypes ( RES_COD CHAR(3) NOT NULL , RES_CAT VARCHAR(60) NULL DEFAULT 'Without category' , RES_DES VARCHAR(60) NULL DEFAULT 'Without description' , RES_LZH VARCHAR(60) NULL DEFAULT 'Without description' , RES_LSW VARCHAR(60) NULL DEFAULT 'Without description' , RES_LRU VARCHAR(60) NULL DEFAULT 'Without description' , RES_LPT VARCHAR(60) NULL DEFAULT 'Without description' , RES_LNL VARCHAR(60) NULL DEFAULT 'Without description' , RES_LKO VARCHAR(60) NULL DEFAULT 'Without description' , RES_LJA VARCHAR(60) NULL DEFAULT 'Without description' , RES_LIT VARCHAR(60) NULL DEFAULT 'Without description' , RES_LFR VARCHAR(60) NULL DEFAULT 'Without description' , RES_LES VARCHAR(60) NULL DEFAULT 'Without description' , RES_LDE VARCHAR(60) NULL DEFAULT 'Without description' , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(7,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(7,3) NULL DEFAULT 0 , NDF DECIMAL(7,3) NULL DEFAULT 0 , DIGESTI DECIMAL(7,3) NULL DEFAULT 0 , ENERGY DECIMAL(7,3) NULL DEFAULT 0 , PRIMARY KEY (RES_COD) ) ; 

-- -----------------------------------------------------
-- Table soil
-- -----------------------------------------------------
CREATE TABLE soil ( SOIL_COD VARCHAR(5) NOT NULL , LOCA_DES VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LZH VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LSW VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LRU VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LPT VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LNL VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LKO VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LJA VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LIT VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LFR VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LES VARCHAR(30) NULL DEFAULT 'Without description' , LOCA_LDE VARCHAR(30) NULL DEFAULT 'Without description' , USDA_DES VARCHAR(30) NULL DEFAULT 'Without description' , FAO_DES VARCHAR(30) NULL DEFAULT 'Without description' , PRIMARY KEY (SOIL_COD) ) ; 

-- -----------------------------------------------------
-- Table systype
-- -----------------------------------------------------
CREATE TABLE systype ( SYST_COD CHAR(3) NOT NULL , SYST_DES VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LZH VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LSW VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LRU VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LPT VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LNL VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LKO VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LJA VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LIT VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LFR VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LES VARCHAR(30) NULL DEFAULT 'Without description' , SYST_LDE VARCHAR(30) NULL DEFAULT 'Without description' , CROP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PRIMARY KEY (SYST_COD)  ) ; 

-- -----------------------------------------------------
-- Table pastprods
-- -----------------------------------------------------
CREATE TABLE pastprods ( CROP_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NITROGEN DECIMAL(7,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(7,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(7,3) NULL DEFAULT 0 , CARBON DECIMAL(7,3) NULL DEFAULT 0 , ENERGY DECIMAL(7,3) NULL DEFAULT 0 , PROTEIN DECIMAL(7,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(7,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(7,3) NULL DEFAULT 0 , NDF DECIMAL(7,3) NULL DEFAULT 0 , DIGESTI DECIMAL(7,3) NULL DEFAULT 0 , ANENERGY DECIMAL(7,3) NULL DEFAULT 0 , USDAR VARCHAR(20) NULL DEFAULT 'Without description' , USDAC VARCHAR(20) NULL DEFAULT 'Without description' , SNITROGEN DECIMAL(7,3) NULL DEFAULT 0 , ASH DECIMAL(7,3) NULL DEFAULT 0 , PRIMARY KEY (CROP_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table system
-- -----------------------------------------------------
CREATE TABLE system ( SYS_COD VARCHAR(27) NOT NULL , CNTY_COD CHAR(3) NOT NULL , SYST_COD CHAR(3) NOT NULL , STATE VARCHAR(20) NULL DEFAULT 'Set state' , STATEABRE CHAR(3) NULL DEFAULT 'SST' , REG_DESC VARCHAR(60) NULL DEFAULT 'Without description' , LATI_DEG VARCHAR(12) NULL DEFAULT '0' , LAT_CARD CHAR(1) NULL DEFAULT 'N' , LONG_DEG VARCHAR(12) NULL DEFAULT '0' , LON_CARD CHAR(1) NULL DEFAULT 'E' , ELEVAT DECIMAL(7,2) NULL DEFAULT 0 , YEAR VARCHAR(10) NULL DEFAULT '20051224' , GRASSONLY CHAR(1) NULL DEFAULT 'N' , NOTES VARCHAR(254) NULL DEFAULT 'Some notes' , DATAOWNER VARCHAR(30) NULL DEFAULT 'Set data owner' , DTOWNABRE CHAR(3) NULL DEFAULT 'NON' , FARMNAME VARCHAR(60) NULL DEFAULT 'Set farmers name' , NUMSEASONS CHAR(1) NULL DEFAULT '2' , LOCATION VARCHAR(40) NULL DEFAULT 'Set a location' , SUBLOC VARCHAR(40) NULL DEFAULT 'Set sub-location' , TIPCAMBIO DECIMAL(8,4) NULL DEFAULT 0 , LASTUPD VARCHAR(30) NULL , LASTUPDUSR VARCHAR(20) NULL , LANGUAGE VARCHAR(20) NULL DEFAULT 'EN' , PERSINTERVIEW VARCHAR(60) NULL , WHENSTART VARCHAR(60) NULL , SINCELIVING VARCHAR(60) NULL , IMMIGRATED VARCHAR(60) NULL , MAINPROD VARCHAR(60) NULL , MPRODCHANGED VARCHAR(60) NULL , CROPROT VARCHAR(250) NULL , YIELDVARY VARCHAR(250) NULL , YIELDVARYRANGE VARCHAR(60) NULL , YIELDVARYWHY VARCHAR(250) NULL , PRICEVARY VARCHAR(250) NULL , PRICEVARYYEAR VARCHAR(250) NULL , PRICEVARYWHY VARCHAR(250) NULL , LMARKET VARCHAR(60) NULL , DLMARKET DECIMAL(12,3) NULL DEFAULT 0 , UMARKET VARCHAR(60) NULL , DUMARKET DECIMAL(12,3) NULL DEFAULT 0 , FARMDRAW BLOB NULL , FARMDRAWEXT CHAR(4) NULL , PRIMARY KEY (SYS_COD)  ) ; 

-- -----------------------------------------------------
-- Table labforce
-- -----------------------------------------------------
CREATE TABLE labforce ( SYS_COD VARCHAR(27) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , PERS_TYP CHAR(2) NULL DEFAULT 'HH' , PERS_NUM DECIMAL(3,0) NULL DEFAULT 0 , AGE DECIMAL(2,0) NULL DEFAULT 0 , SEX CHAR(1) NULL DEFAULT 'M' , WORK CHAR(1) NULL DEFAULT 'Y' , SHORTDESC VARCHAR(12) NULL DEFAULT 'Without desc' , EAT CHAR(1) NULL DEFAULT 'N' , EDUCATION VARCHAR(60) NULL DEFAULT 'NONE' , OCUPATION VARCHAR(60) NULL DEFAULT 'NONE' , PRIMARY KEY (SYS_COD, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table spadstown
-- -----------------------------------------------------
CREATE TABLE spadstown ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , SOIL_COD VARCHAR(5) NULL , DRAIN_COD VARCHAR(5) NULL , PLOT_ID CHAR(3) NULL , STATUS VARCHAR(8) NULL , AREA DECIMAL(6,2) NULL DEFAULT 0 , DISTHH DECIMAL(6,2) NULL DEFAULT 0 , NUMSEA DECIMAL(2,0) NULL DEFAULT 1 , TYPE VARCHAR(7) NULL DEFAULT 'C' , SLOPE DECIMAL(3,0) NULL DEFAULT 0 , DEPTH DECIMAL(4,0) NULL DEFAULT 0 , LOCALNAME VARCHAR(60) NULL DEFAULT 'Without description' , PERMEA DECIMAL(3,0) NULL DEFAULT 0 , PORCTOT DECIMAL(3,0) NULL DEFAULT 0 , CROPSINCE CHAR(4) NULL , LASTFALLOW CHAR(4) NULL , CROPLAND DECIMAL(6,2) NULL DEFAULT 0 , LANDPOS VARCHAR(60) NULL , SLOPECLASS VARCHAR(60) NULL , PLOTCOLOR VARCHAR(60) NULL , FARMFERTCLASS VARCHAR(60) NULL , EROSION VARCHAR(60) NULL , CSTRUCTURES VARCHAR(60) NULL , PRIMARY KEY (SYS_COD, PLOT_COD)  ) ; 

-- -----------------------------------------------------
-- Table lvstosys
-- -----------------------------------------------------
CREATE TABLE lvstosys ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PURPOSE VARCHAR(40) NULL DEFAULT 'DAIRY' , BREDD VARCHAR(20) NULL DEFAULT 'Set breed' , NANIMAL DECIMAL(7,0) NULL DEFAULT 0 , NANIMALAS DECIMAL(7,0) NULL DEFAULT 0 , BOD_WEIG DECIMAL(7,0) NULL DEFAULT 0 , MILKPROD DECIMAL(12,3) NULL DEFAULT 0 , LACTLENG DECIMAL(3,0) NULL DEFAULT 0 , NLAMB DECIMAL(12,3) NULL DEFAULT 0 , MILKFREQ DECIMAL(3,0) NULL DEFAULT 0 , CALVINTER DECIMAL(3,0) NULL DEFAULT 0 , CALVRATE DECIMAL(3,0) NULL DEFAULT 0 , OFFPRING DECIMAL(5,2) NULL DEFAULT 0 , REPROMALES DECIMAL(7,0) NULL DEFAULT 0 , REPMALESAS DECIMAL(7,0) NULL DEFAULT 0 , REPMALEBW DECIMAL(7,0) NULL DEFAULT 0 , FEMREPLEC DECIMAL(7,0) NULL DEFAULT 0 , WEAAGE DECIMAL(7,0) NULL DEFAULT 0 , WEAWEI DECIMAL(7,0) NULL DEFAULT 0 , WEAAGENREP DECIMAL(7,0) NULL DEFAULT 0 , WEABWNREP DECIMAL(7,0) NULL DEFAULT 0 , FIRSTCLAGE DECIMAL(7,0) NULL DEFAULT 0 , FIRSTCLWEI DECIMAL(7,0) NULL DEFAULT 0 , REPROINTEN DECIMAL(7,0) NULL DEFAULT 0 , LAMBYEAR DECIMAL(7,0) NULL DEFAULT 0 , NMALETOT DECIMAL(7,0) NULL DEFAULT 0 , NFEMTOT DECIMAL(7,0) NULL DEFAULT 0 , BODYCOND VARCHAR(60) NULL , FEEDSYS SMALLINT NULL , CORRSYS SMALLINT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD)  ) ; 

-- -----------------------------------------------------
-- Table wellbeing
-- -----------------------------------------------------
CREATE TABLE wellbeing ( SYS_COD VARCHAR(27) NOT NULL , ITEMID CHAR(3) NOT NULL , ITEMDESC VARCHAR(40) NULL DEFAULT 'NONE' , VERYRICH VARCHAR(60) NULL , RICH VARCHAR(60) NULL , POOR VARCHAR(60) NULL , VERYPOOR VARCHAR(60) NULL , RANK DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, ITEMID)  ) ; 

-- -----------------------------------------------------
-- Table plotseasons
-- -----------------------------------------------------
CREATE TABLE plotseasons ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , PORCTOT DECIMAL(3,0) NULL DEFAULT 0 , INTER CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON)  ) ; 

-- -----------------------------------------------------
-- Table owneduse
-- -----------------------------------------------------
CREATE TABLE owneduse ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEGETABLE CHAR(1) NULL DEFAULT 'N' , INTER CHAR(1) NULL DEFAULT 'N' , LANDCOVER DECIMAL(3,0) NULL DEFAULT 0 , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD)  ) ; 

-- -----------------------------------------------------
-- Table ownusedv
-- -----------------------------------------------------
CREATE TABLE ownusedv ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD)  ) ; 

-- -----------------------------------------------------
-- Table plotgpspos
-- -----------------------------------------------------
CREATE TABLE plotgpspos ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , POINT_COD CHAR(3) NOT NULL , longitude DECIMAL(12,9) NULL , latitude DECIMAL(12,9) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, POINT_COD)  ) ; 

-- -----------------------------------------------------
-- Table plotpaddoks
-- -----------------------------------------------------
CREATE TABLE plotpaddoks ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , PORCTOT DECIMAL(3,0) NULL DEFAULT 0 , LANDCOVER DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD)  ) ; 

-- -----------------------------------------------------
-- Table plotpaddspe
-- -----------------------------------------------------
CREATE TABLE plotpaddspe ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , CUTCARRY CHAR(1) NULL DEFAULT 'N' , NSEA1 DECIMAL(12,3) NULL DEFAULT 0 , NSEA2 DECIMAL(12,3) NULL DEFAULT 0 , NSEA3 DECIMAL(12,3) NULL DEFAULT 0 , NSEA4 DECIMAL(12,3) NULL DEFAULT 0 , PSEA1 DECIMAL(12,3) NULL DEFAULT 0 , PSEA2 DECIMAL(12,3) NULL DEFAULT 0 , PSEA3 DECIMAL(12,3) NULL DEFAULT 0 , PSEA4 DECIMAL(12,3) NULL DEFAULT 0 , KSEA1 DECIMAL(12,3) NULL DEFAULT 0 , KSEA2 DECIMAL(12,3) NULL DEFAULT 0 , KSEA3 DECIMAL(12,3) NULL DEFAULT 0 , KSEA4 DECIMAL(12,3) NULL DEFAULT 0 , CSEA1 DECIMAL(12,3) NULL DEFAULT 0 , CSEA2 DECIMAL(12,3) NULL DEFAULT 0 , CSEA3 DECIMAL(12,3) NULL DEFAULT 0 , CSEA4 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA1 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA2 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA3 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA4 DECIMAL(12,3) NULL DEFAULT 0 , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , landcover DECIMAL(12,3) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD)  ) ; 

-- -----------------------------------------------------
-- Table plotpaddspedt
-- -----------------------------------------------------
CREATE TABLE plotpaddspedt ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , CROPD_COD CHAR(3) NOT NULL , LANDCOVER DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, CROPD_COD)  ) ; 

-- -----------------------------------------------------
-- Table cropman
-- -----------------------------------------------------
CREATE TABLE cropman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD)  ) ; 

-- -----------------------------------------------------
-- Table periods
-- -----------------------------------------------------
CREATE TABLE periods ( period_id CHAR(2) NOT NULL , period_des VARCHAR(60) NULL , period_jan CHAR(1) NULL DEFAULT 'F' , period_feb CHAR(1) NULL DEFAULT 'F' , period_mar CHAR(1) NULL DEFAULT 'F' , period_apr CHAR(1) NULL DEFAULT 'F' , period_may CHAR(1) NULL DEFAULT 'F' , period_jun CHAR(1) NULL DEFAULT 'F' , period_jul CHAR(1) NULL DEFAULT 'F' , period_aug CHAR(1) NULL DEFAULT 'F' , period_sep CHAR(1) NULL DEFAULT 'F' , period_oct CHAR(1) NULL DEFAULT 'F' , period_nov CHAR(1) NULL DEFAULT 'F' , period_dec CHAR(1) NULL DEFAULT 'F' , PRIMARY KEY (period_id) ) ; 
-- -----------------------------------------------------
-- Table cropmantim
-- -----------------------------------------------------
CREATE TABLE cropmantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PLANDENS DECIMAL(12,3) NULL DEFAULT 0 , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table croplabour
-- -----------------------------------------------------
CREATE TABLE croplabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table cropmanfert
-- -----------------------------------------------------
CREATE TABLE cropmanfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, NMONTH, FERTYP_COD)  ) ; 

-- -----------------------------------------------------
-- Table cropmanprchfert
-- -----------------------------------------------------
CREATE TABLE cropmanprchfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FERTYP_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheap
-- -----------------------------------------------------
CREATE TABLE mnrheap ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , HEAP_TYP CHAR(3) NULL , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , QTYASS DECIMAL(12,3) NULL , PERCLOSS DECIMAL(12,3) NULL DEFAULT 0 , YIELD DECIMAL(12,3) NULL DEFAULT 0 , FS CHAR(1) NULL DEFAULT 'F' , AP CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , GP CHAR(1) NULL DEFAULT 'F' , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORAP DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORGP DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD)  ) ; 

-- -----------------------------------------------------
-- Table cropmanheap
-- -----------------------------------------------------
CREATE TABLE cropmanheap ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , HEAP_COD CHAR(3) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , QTYAPP DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, NMONTH, HEAP_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpprodman
-- -----------------------------------------------------
CREATE TABLE crpprodman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NDF DECIMAL(12,3) NULL DEFAULT 0 , DIGESTI DECIMAL(12,3) NULL DEFAULT 0 , ANENERGY DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpprodmantim
-- -----------------------------------------------------
CREATE TABLE crpprodmantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , YIELD DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , ST CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , PORST DECIMAL(12,3) NULL DEFAULT 0 , POROT DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table crpprodlabour
-- -----------------------------------------------------
CREATE TABLE crpprodlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpprodmansold
-- -----------------------------------------------------
CREATE TABLE crpprodmansold ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpforaman
-- -----------------------------------------------------
CREATE TABLE crpforaman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NDF DECIMAL(12,3) NULL DEFAULT 0 , DIGESTI DECIMAL(12,3) NULL DEFAULT 0 , ANENERGY DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpforamansold
-- -----------------------------------------------------
CREATE TABLE crpforamansold ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpforamantim
-- -----------------------------------------------------
CREATE TABLE crpforamantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , YIELD DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , ST CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , PORST DECIMAL(12,3) NULL DEFAULT 0 , POROT DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table crpforalabour
-- -----------------------------------------------------
CREATE TABLE crpforalabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegman
-- -----------------------------------------------------
CREATE TABLE vegman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegmantim
-- -----------------------------------------------------
CREATE TABLE vegmantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PLANDENS DECIMAL(12,3) NULL DEFAULT 0 , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table veglabour
-- -----------------------------------------------------
CREATE TABLE veglabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegmanfert
-- -----------------------------------------------------
CREATE TABLE vegmanfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, NMONTH, FERTYP_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegmanprchfert
-- -----------------------------------------------------
CREATE TABLE vegmanprchfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FERTYP_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegmanheap
-- -----------------------------------------------------
CREATE TABLE vegmanheap ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , HEAP_COD CHAR(3) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , QTYAPP DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, NMONTH, HEAP_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegprodman
-- -----------------------------------------------------
CREATE TABLE vegprodman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NDF DECIMAL(12,3) NULL DEFAULT 0 , DIGESTI DECIMAL(12,3) NULL DEFAULT 0 , ANENERGY DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegprodmantim
-- -----------------------------------------------------
CREATE TABLE vegprodmantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , YIELD DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , ST CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , PORST DECIMAL(12,3) NULL DEFAULT 0 , POROT DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table vegprodlabour
-- -----------------------------------------------------
CREATE TABLE vegprodlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegprodmansold
-- -----------------------------------------------------
CREATE TABLE vegprodmansold ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegforaman
-- -----------------------------------------------------
CREATE TABLE vegforaman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NDF DECIMAL(12,3) NULL DEFAULT 0 , DIGESTI DECIMAL(12,3) NULL DEFAULT 0 , ANENERGY DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegforamantim
-- -----------------------------------------------------
CREATE TABLE vegforamantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , YIELD DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , ST CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , PORST DECIMAL(12,3) NULL DEFAULT 0 , POROT DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table vegforalabour
-- -----------------------------------------------------
CREATE TABLE vegforalabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegforamansold
-- -----------------------------------------------------
CREATE TABLE vegforamansold ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassman
-- -----------------------------------------------------
CREATE TABLE grassman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassmantim
-- -----------------------------------------------------
CREATE TABLE grassmantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PLANDENS DECIMAL(12,3) NULL DEFAULT 0 , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table grasslabour
-- -----------------------------------------------------
CREATE TABLE grasslabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassmanfert
-- -----------------------------------------------------
CREATE TABLE grassmanfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, NMONTH, FERTYP_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassmanprchfert
-- -----------------------------------------------------
CREATE TABLE grassmanprchfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FERTYP_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassmanheap
-- -----------------------------------------------------
CREATE TABLE grassmanheap ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , HEAP_COD CHAR(3) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , QTYAPP DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, NMONTH, HEAP_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassprodman
-- -----------------------------------------------------
CREATE TABLE grassprodman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NSEA1 DECIMAL(12,3) NULL DEFAULT 0 , NSEA2 DECIMAL(12,3) NULL DEFAULT 0 , NSEA3 DECIMAL(12,3) NULL DEFAULT 0 , NSEA4 DECIMAL(12,3) NULL DEFAULT 0 , PSEA1 DECIMAL(12,3) NULL DEFAULT 0 , PSEA2 DECIMAL(12,3) NULL DEFAULT 0 , PSEA3 DECIMAL(12,3) NULL DEFAULT 0 , PSEA4 DECIMAL(12,3) NULL DEFAULT 0 , KSEA1 DECIMAL(12,3) NULL DEFAULT 0 , KSEA2 DECIMAL(12,3) NULL DEFAULT 0 , KSEA3 DECIMAL(12,3) NULL DEFAULT 0 , KSEA4 DECIMAL(12,3) NULL DEFAULT 0 , CSEA1 DECIMAL(12,3) NULL DEFAULT 0 , CSEA2 DECIMAL(12,3) NULL DEFAULT 0 , CSEA3 DECIMAL(12,3) NULL DEFAULT 0 , CSEA4 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA1 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA2 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA3 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA4 DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NDF DECIMAL(12,3) NULL DEFAULT 0 , DIGESTI DECIMAL(12,3) NULL DEFAULT 0 , ANENERGY DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassprodmantim
-- -----------------------------------------------------
CREATE TABLE grassprodmantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , YIELD DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , ST CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , POROT DECIMAL(12,3) NULL DEFAULT 0 , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , PORST DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table grassprodlabour
-- -----------------------------------------------------
CREATE TABLE grassprodlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassprodmansold
-- -----------------------------------------------------
CREATE TABLE grassprodmansold ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassforaman
-- -----------------------------------------------------
CREATE TABLE grassforaman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , ENERGY DECIMAL(12,3) NULL , PROTEIN DECIMAL(12,3) NULL , NSEA1 DECIMAL(12,3) NULL , NSEA2 DECIMAL(12,3) NULL , NSEA3 DECIMAL(12,3) NULL , NSEA4 DECIMAL(12,3) NULL , PSEA1 DECIMAL(12,3) NULL , PSEA2 DECIMAL(12,3) NULL , PSEA3 DECIMAL(12,3) NULL , PSEA4 DECIMAL(12,3) NULL , KSEA1 DECIMAL(12,3) NULL , KSEA2 DECIMAL(12,3) NULL , KSEA3 DECIMAL(12,3) NULL , KSEA4 DECIMAL(12,3) NULL , CSEA1 DECIMAL(12,3) NULL , CSEA2 DECIMAL(12,3) NULL , CSEA3 DECIMAL(12,3) NULL , CSEA4 DECIMAL(12,3) NULL , DMSEA1 DECIMAL(12,3) NULL , DMSEA2 DECIMAL(12,3) NULL , DMSEA3 DECIMAL(12,3) NULL , DMSEA4 DECIMAL(12,3) NULL , DRYMATTER DECIMAL(12,3) NULL , CPROTEIN DECIMAL(12,3) NULL , NDF DECIMAL(12,3) NULL , DIGESTI DECIMAL(12,3) NULL , ANENERGY DECIMAL(12,3) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassforamantim
-- -----------------------------------------------------
CREATE TABLE grassforamantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , YIELD DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , ST CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , PORST DECIMAL(12,3) NULL DEFAULT 0 , POROT DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table grassforalabour
-- -----------------------------------------------------
CREATE TABLE grassforalabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassforamansold
-- -----------------------------------------------------
CREATE TABLE grassforamansold ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table feedgroups
-- -----------------------------------------------------
CREATE TABLE feedgroups ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , GROUP_DES VARCHAR(30) NULL DEFAULT 'Without description' , GROUP_TYP CHAR(3) NULL DEFAULT 'ONE' , GROUP_CRIE CHAR(3) NULL DEFAULT 'NON' , NUMANIM DECIMAL(7,0) NULL DEFAULT 0 , INIWEIGHT DECIMAL(7,0) NULL DEFAULT 0 , FINWEIGHT DECIMAL(7,0) NULL DEFAULT 0 , FROMDAYS DECIMAL(7,0) NULL DEFAULT 0 , TODAYS DECIMAL(7,0) NULL DEFAULT 0 , FROMPARTOS DECIMAL(7,0) NULL DEFAULT 0 , TOPARTOS DECIMAL(7,0) NULL DEFAULT 0 , FROMMONTHS DECIMAL(7,0) NULL DEFAULT 0 , TOMONTHS DECIMAL(7,0) NULL DEFAULT 0 , FROMKILOS DECIMAL(7,0) NULL DEFAULT 0 , TOKILOS DECIMAL(7,0) NULL DEFAULT 0 , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table livegroups
-- -----------------------------------------------------
CREATE TABLE livegroups ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , HERD_COD CHAR(2) NOT NULL , NUMANIM DECIMAL(7,0) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, HERD_COD)  ) ; 

-- -----------------------------------------------------
-- Table liveavailres
-- -----------------------------------------------------
CREATE TABLE liveavailres ( SYS_COD VARCHAR(27) NOT NULL , FEED_COD CHAR(3) NOT NULL , COLLECTED CHAR(1) NULL DEFAULT 'N' , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , CPROTEIN DECIMAL(12,3) NULL DEFAULT 0 , DETERFIBRE DECIMAL(12,3) NULL DEFAULT 0 , DIGESTI DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, FEED_COD)  ) ; 

-- -----------------------------------------------------
-- Table stallfeeprch
-- -----------------------------------------------------
CREATE TABLE stallfeeprch ( SYS_COD VARCHAR(27) NOT NULL , FEED_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, FEED_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table grazingman
-- -----------------------------------------------------
CREATE TABLE grazingman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , MLIVE_COD CHAR(3) NULL , MPROD_COD CHAR(3) NULL , NSEA1 DECIMAL(12,3) NULL DEFAULT 0 , NSEA2 DECIMAL(12,3) NULL DEFAULT 0 , NSEA3 DECIMAL(12,3) NULL DEFAULT 0 , NSEA4 DECIMAL(12,3) NULL DEFAULT 0 , PSEA1 DECIMAL(12,3) NULL DEFAULT 0 , PSEA2 DECIMAL(12,3) NULL DEFAULT 0 , PSEA3 DECIMAL(12,3) NULL DEFAULT 0 , PSEA4 DECIMAL(12,3) NULL DEFAULT 0 , KSEA1 DECIMAL(12,3) NULL DEFAULT 0 , KSEA2 DECIMAL(12,3) NULL DEFAULT 0 , KSEA3 DECIMAL(12,3) NULL DEFAULT 0 , KSEA4 DECIMAL(12,3) NULL DEFAULT 0 , CSEA1 DECIMAL(12,3) NULL DEFAULT 0 , CSEA2 DECIMAL(12,3) NULL DEFAULT 0 , CSEA3 DECIMAL(12,3) NULL DEFAULT 0 , CSEA4 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA1 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA2 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA3 DECIMAL(12,3) NULL DEFAULT 0 , DMSEA4 DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpprodmanfeed
-- -----------------------------------------------------
CREATE TABLE crpprodmanfeed ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table crpforamanfeed
-- -----------------------------------------------------
CREATE TABLE crpforamanfeed ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegprodmanfeed
-- -----------------------------------------------------
CREATE TABLE vegprodmanfeed ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table vegforamanfeed
-- -----------------------------------------------------
CREATE TABLE vegforamanfeed ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassprodmanfeed
-- -----------------------------------------------------
CREATE TABLE grassprodmanfeed ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table grassforamanfeed
-- -----------------------------------------------------
CREATE TABLE grassforamanfeed ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table liveman
-- -----------------------------------------------------
CREATE TABLE liveman ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, ACTY_COD)  ) ; 

-- -----------------------------------------------------
-- Table livemantim
-- -----------------------------------------------------
CREATE TABLE livemantim ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, ACTY_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table livelabour
-- -----------------------------------------------------
CREATE TABLE livelabour ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, ACTY_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table otherprod
-- -----------------------------------------------------
CREATE TABLE otherprod ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , PROD_DESC VARCHAR(30) NULL DEFAULT 'Without description' , PRIMARY KEY (SYS_COD, LIVE_ICOD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table livemangrp
-- -----------------------------------------------------
CREATE TABLE livemangrp ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, ACTY_COD)  ) ; 

-- -----------------------------------------------------
-- Table livemangrptim
-- -----------------------------------------------------
CREATE TABLE livemangrptim ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, ACTY_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table livemangrplabour
-- -----------------------------------------------------
CREATE TABLE livemangrplabour ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL , HOURSDAY DECIMAL(12,3) NULL , PPERHOUR DECIMAL(6,2) NULL , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, ACTY_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table farmassets
-- -----------------------------------------------------
CREATE TABLE farmassets ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , PROD_DES VARCHAR(30) NULL DEFAULT 'Without description' , TOTVALUE DECIMAL(11,3) NULL DEFAULT 0 , ANUALDEP DECIMAL(11,3) NULL DEFAULT 0 , PRCHYEAR DECIMAL(11,3) NULL DEFAULT 0 , DISPVALUE DECIMAL(11,3) NULL DEFAULT 0 , ANUMANT DECIMAL(11,3) NULL DEFAULT 0 , NUMOWNED DECIMAL(11,3) NULL DEFAULT 0 , NOWNMALE DECIMAL(11,3) NULL DEFAULT 0 , NOWNFEMALE DECIMAL(11,3) NULL DEFAULT 0 , NOWNBOTH DECIMAL(11,3) NULL DEFAULT 0 , NOWNOTHERS DECIMAL(11,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table otherhhcp
-- -----------------------------------------------------
CREATE TABLE otherhhcp ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , PROD_DESC VARCHAR(30) NULL DEFAULT 'Without description' , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table otherhhexp
-- -----------------------------------------------------
CREATE TABLE otherhhexp ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , PROD_DESC VARCHAR(30) NULL DEFAULT 'Without description' , PRIMARY KEY (SYS_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table otherincome
-- -----------------------------------------------------
CREATE TABLE otherincome ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , PROD_DES VARCHAR(60) NULL DEFAULT 'Without description' , PRIMARY KEY (SYS_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table otherman
-- -----------------------------------------------------
CREATE TABLE otherman ( SYS_COD VARCHAR(27) NOT NULL , ACTY_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, ACTY_COD)  ) ; 

-- -----------------------------------------------------
-- Table othermantim
-- -----------------------------------------------------
CREATE TABLE othermantim ( SYS_COD VARCHAR(27) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, ACTY_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table otherlabour
-- -----------------------------------------------------
CREATE TABLE otherlabour ( SYS_COD VARCHAR(27) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, ACTY_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table livehvst
-- -----------------------------------------------------
CREATE TABLE livehvst ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table livehvsttim
-- -----------------------------------------------------
CREATE TABLE livehvsttim ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , YIELD DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , POROT DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table livehvstlabour
-- -----------------------------------------------------
CREATE TABLE livehvstlabour ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, NMONTH, PERS_COD)  ) ; 

-- -----------------------------------------------------
-- Table livehvstsold
-- -----------------------------------------------------
CREATE TABLE livehvstsold ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table livehvstcat
-- -----------------------------------------------------
CREATE TABLE livehvstcat ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , HERD_COD CHAR(2) NOT NULL , ENERGY DECIMAL(12,3) NULL DEFAULT 0 , PROTEIN DECIMAL(12,3) NULL DEFAULT 0 , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, HERD_COD) ) ; 
-- -----------------------------------------------------
-- Table livehvsttimcat
-- -----------------------------------------------------
CREATE TABLE livehvsttimcat ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , HERD_COD CHAR(2) NOT NULL , NMONTH CHAR(2) NOT NULL , YIELD DECIMAL(12,3) NULL DEFAULT 0 , HC CHAR(1) NULL DEFAULT 'F' , FS CHAR(1) NULL DEFAULT 'F' , MM CHAR(1) NULL DEFAULT 'F' , LF CHAR(1) NULL DEFAULT 'F' , LE CHAR(1) NULL DEFAULT 'F' , OT CHAR(1) NULL DEFAULT 'F' , RP CHAR(1) NULL DEFAULT 'F' , DP CHAR(1) NULL DEFAULT 'F' , PORHC DECIMAL(12,3) NULL DEFAULT 0 , PORFS DECIMAL(12,3) NULL DEFAULT 0 , PORMM DECIMAL(12,3) NULL DEFAULT 0 , PORLF DECIMAL(12,3) NULL DEFAULT 0 , PORLE DECIMAL(12,3) NULL DEFAULT 0 , POROT DECIMAL(12,3) NULL DEFAULT 0 , PORRP DECIMAL(12,3) NULL DEFAULT 0 , PORDP DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, HERD_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table livehvstsoldcat
-- -----------------------------------------------------
CREATE TABLE livehvstsoldcat ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , HERD_COD CHAR(2) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, HERD_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table livehvstfeed
-- -----------------------------------------------------
CREATE TABLE livehvstfeed ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , FLIVE_ICOD CHAR(3) NOT NULL , FGROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, FLIVE_ICOD, FGROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheaplvprod
-- -----------------------------------------------------
CREATE TABLE mnrheaplvprod ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapprods
-- -----------------------------------------------------
CREATE TABLE mnrheapprods ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , PROD_DES VARCHAR(60) NULL DEFAULT 'Without description' , COLLECTED CHAR(1) NULL DEFAULT 'N' , NITROGEN DECIMAL(12,3) NULL DEFAULT 0 , PHOSPHORUS DECIMAL(12,3) NULL DEFAULT 0 , POTASSIUM DECIMAL(12,3) NULL DEFAULT 0 , CARBON DECIMAL(12,3) NULL DEFAULT 0 , DRYMATTER DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapaddprods
-- -----------------------------------------------------
CREATE TABLE mnrheapaddprods ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapsold
-- -----------------------------------------------------
CREATE TABLE mnrheapsold ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , DESRELAT VARCHAR(20) NULL DEFAULT 'Without description' , INDRELAT CHAR(1) NULL DEFAULT 'F' , QTYRELAT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, MARK_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapfeed
-- -----------------------------------------------------
CREATE TABLE mnrheapfeed ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, HEAP_COD, LIVE_ICOD, GROUP_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapcrpprod
-- -----------------------------------------------------
CREATE TABLE mnrheapcrpprod ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapcrpfora
-- -----------------------------------------------------
CREATE TABLE mnrheapcrpfora ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapgrassprod
-- -----------------------------------------------------
CREATE TABLE mnrheapgrassprod ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapgrassfora
-- -----------------------------------------------------
CREATE TABLE mnrheapgrassfora ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapvegprod
-- -----------------------------------------------------
CREATE TABLE mnrheapvegprod ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD)  ) ; 

-- -----------------------------------------------------
-- Table mnrheapvegfora
-- -----------------------------------------------------
CREATE TABLE mnrheapvegfora ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , QTYASS DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD)  ) ; 

-- -----------------------------------------------------
-- Table nfoutcrops
-- -----------------------------------------------------
CREATE TABLE nfoutcrops ( sys_cod VARCHAR(27) NULL , plot_cod CHAR(3) NULL , crop_cod CHAR(3) NULL , iscrop CHAR(1) NULL DEFAULT 'Y' , outtype CHAR(2) NULL DEFAULT 'UN' , nitrogen DECIMAL(12,3) NULL DEFAULT 0 , phosphorus DECIMAL(12,3) NULL DEFAULT 0 , potassium DECIMAL(12,3) NULL DEFAULT 0 , carbon DECIMAL(12,3) NULL DEFAULT 0 ) ; 

-- -----------------------------------------------------
-- Table nfoutlives
-- -----------------------------------------------------
CREATE TABLE nfoutlives ( sys_cod VARCHAR(27) NULL , live_icod CHAR(3) NULL , live_cod CHAR(3) NULL , prod_cod CHAR(3) NULL , outtype CHAR(2) NULL DEFAULT 'UN' , anweight DECIMAL(12,3) NULL DEFAULT 0 , nitrogen DECIMAL(12,3) NULL DEFAULT 0 , phosphorus DECIMAL(12,3) NULL DEFAULT 0 , potassium DECIMAL(12,3) NULL DEFAULT 0 , carbon DECIMAL(12,3) NULL DEFAULT 0 ) ; 

-- -----------------------------------------------------
-- Table nfinscrops
-- -----------------------------------------------------
CREATE TABLE nfinscrops ( sys_cod VARCHAR(27) NULL , plot_cod CHAR(3) NULL , crop_cod CHAR(3) NULL , iscrop CHAR(1) NULL DEFAULT 'Y' , inputsrc CHAR(2) NULL DEFAULT 'UN' , inputtyp CHAR(1) NULL DEFAULT 'U' , nitrogen DECIMAL(12,3) NULL DEFAULT 0 , phosphorus DECIMAL(12,3) NULL DEFAULT 0 , potassium DECIMAL(12,3) NULL DEFAULT 0 , carbon DECIMAL(12,3) NULL DEFAULT 0 ) ; 

-- -----------------------------------------------------
-- Table nfinslives
-- -----------------------------------------------------
CREATE TABLE nfinslives ( sys_cod VARCHAR(27) NULL , live_icod CHAR(3) NULL , live_cod CHAR(3) NULL , inputsrc CHAR(2) NULL DEFAULT 'UN' , inputtyp CHAR(1) NULL DEFAULT 'U' , anweight DECIMAL(12,3) NULL DEFAULT 0 , nitrogen DECIMAL(12,3) NULL DEFAULT 0 , phosphorus DECIMAL(12,3) NULL DEFAULT 0 , potassium DECIMAL(12,3) NULL DEFAULT 0 , carbon DECIMAL(12,3) NULL DEFAULT 0 ) ; 

-- -----------------------------------------------------
-- Table nfgrazinggrps
-- -----------------------------------------------------
CREATE TABLE nfgrazinggrps ( plot_cod CHAR(3) NOT NULL , numpadd CHAR(2) NOT NULL , crop_cod CHAR(3) NOT NULL , live_icod CHAR(3) NOT NULL , group_cod CHAR(3) NOT NULL , nmonth SMALLINT NULL DEFAULT 0 , intake DECIMAL(12,3) NULL DEFAULT 0 ) ; 

-- -----------------------------------------------------
-- Table nfinsheaps
-- -----------------------------------------------------
CREATE TABLE nfinsheaps ( sys_cod VARCHAR(27) NULL , heap_cod CHAR(3) NULL , inputsrc CHAR(2) NULL DEFAULT 'UN' , inputtyp CHAR(1) NULL DEFAULT 'U' , nitrogen DECIMAL(12,3) NULL DEFAULT 0 , phosphorus DECIMAL(12,3) NULL DEFAULT 0 , potassium DECIMAL(12,3) NULL DEFAULT 0 , carbon DECIMAL(12,3) NULL DEFAULT 0 ) ; 

-- -----------------------------------------------------
-- Table nfoutheaps
-- -----------------------------------------------------
CREATE TABLE nfoutheaps ( sys_cod VARCHAR(27) NULL , heap_cod CHAR(3) NULL , outtype CHAR(2) NULL DEFAULT 'UN' , nitrogen DECIMAL(12,3) NULL DEFAULT 0 , phosphorus DECIMAL(12,3) NULL DEFAULT 0 , potassium DECIMAL(12,3) NULL DEFAULT 0 , carbon DECIMAL(12,3) NULL DEFAULT 0 ) ; 

-- -----------------------------------------------------
-- Table project
-- -----------------------------------------------------
-- WARNING! Autoincrement was removed from the following CREATE TABLE statement. You may need to add it manually
CREATE TABLE project ( project_id INT NOT NULL  , project_des VARCHAR(120) NULL , project_sdate DATE NULL , project_edate DATE NULL , project_mdata BLOB NULL , project_language CHAR(4) NULL , project_nperiods INT NULL , project_perioddesc VARCHAR(120) NULL , PRIMARY KEY (project_id) ) ; 
-- -----------------------------------------------------
-- Table systemperiods
-- -----------------------------------------------------
CREATE TABLE systemperiods ( SYS_COD VARCHAR(27) NOT NULL , period_id CHAR(2) NOT NULL , rain DECIMAL(7,3) NULL DEFAULT 0 , avetemp DECIMAL(7,3) NULL DEFAULT 0 , maxtemp DECIMAL(7,3) NULL DEFAULT 0 , mintemp DECIMAL(7,3) NULL DEFAULT 0 , season CHAR(2) NULL DEFAULT 'DR' , rday DECIMAL(6,2) NULL DEFAULT 0 , sun CHAR(1) NULL DEFAULT '1' , PRIMARY KEY (SYS_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table labforceperiods
-- -----------------------------------------------------
CREATE TABLE labforceperiods ( SYS_COD VARCHAR(27) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , period_id CHAR(2) NOT NULL , wrk CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (SYS_COD, PERS_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table lvstosysperiods
-- -----------------------------------------------------
CREATE TABLE lvstosysperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , part12 DECIMAL(7,0) NULL DEFAULT 0 , part23 DECIMAL(7,0) NULL DEFAULT 0 , parto3 DECIMAL(7,0) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table plotseasonsperiods
-- -----------------------------------------------------
CREATE TABLE plotseasonsperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , period_id CHAR(2) NOT NULL , grw CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, period_id)  ) ; 
-- -----------------------------------------------------
-- Table owneduseperiods
-- -----------------------------------------------------
CREATE TABLE owneduseperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , crp CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table ownusedvperiods
-- -----------------------------------------------------
CREATE TABLE ownusedvperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , harv CHAR(1) NULL DEFAULT 'N' , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table cropmanperiods
-- -----------------------------------------------------
CREATE TABLE cropmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table cropmanprchfertperiods
-- -----------------------------------------------------
CREATE TABLE cropmanprchfertperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FERTYP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table crpprodmansoldperiods
-- -----------------------------------------------------
CREATE TABLE crpprodmansoldperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table crpprodmanperiods
-- -----------------------------------------------------
CREATE TABLE crpprodmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table crpforamanperiods
-- -----------------------------------------------------
CREATE TABLE crpforamanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table crpforamansoldperiods
-- -----------------------------------------------------
CREATE TABLE crpforamansoldperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegmanperiods
-- -----------------------------------------------------
CREATE TABLE vegmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegmanprchfertperiods
-- -----------------------------------------------------
CREATE TABLE vegmanprchfertperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FERTYP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegprodmanperiods
-- -----------------------------------------------------
CREATE TABLE vegprodmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegprodmansoldperiods
-- -----------------------------------------------------
CREATE TABLE vegprodmansoldperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegforamanperiods
-- -----------------------------------------------------
CREATE TABLE vegforamanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegforamansoldperiods
-- -----------------------------------------------------
CREATE TABLE vegforamansoldperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassmanperiods
-- -----------------------------------------------------
CREATE TABLE grassmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassmanprchfertperiods
-- -----------------------------------------------------
CREATE TABLE grassmanprchfertperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FERTYP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassprodmanperiods
-- -----------------------------------------------------
CREATE TABLE grassprodmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassprodmansoldperiods
-- -----------------------------------------------------
CREATE TABLE grassprodmansoldperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassforamanperiods
-- -----------------------------------------------------
CREATE TABLE grassforamanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassforamansoldperiods
-- -----------------------------------------------------
CREATE TABLE grassforamansoldperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table liveavailresperiods
-- -----------------------------------------------------
CREATE TABLE liveavailresperiods ( SYS_COD VARCHAR(27) NOT NULL , FEED_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , ava CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, FEED_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table stallfeeprchperiods
-- -----------------------------------------------------
CREATE TABLE stallfeeprchperiods ( SYS_COD VARCHAR(27) NOT NULL , FEED_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, FEED_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table livegroupsperiods
-- -----------------------------------------------------
CREATE TABLE livegroupsperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , HERD_COD CHAR(2) NOT NULL , period_id CHAR(2) NOT NULL , na DECIMAL(7,0) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, HERD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grazingmanperiods
-- -----------------------------------------------------
CREATE TABLE grazingmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , rot DECIMAL(12,3) NULL DEFAULT 0 , ncd DECIMAL(12,3) NULL DEFAULT 0 , pia DECIMAL(12,3) NULL DEFAULT 0 , mnr DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table crpprodmanfeedperiods
-- -----------------------------------------------------
CREATE TABLE crpprodmanfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PROD_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table crpforamanfeedperiods
-- -----------------------------------------------------
CREATE TABLE crpforamanfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, FORA_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegprodmanfeedperiods
-- -----------------------------------------------------
CREATE TABLE vegprodmanfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PROD_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table vegforamanfeedperiods
-- -----------------------------------------------------
CREATE TABLE vegforamanfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, FORA_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassprodmanfeedperiods
-- -----------------------------------------------------
CREATE TABLE grassprodmanfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PROD_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grassforamanfeedperiods
-- -----------------------------------------------------
CREATE TABLE grassforamanfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, FORA_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table otherprodperiods
-- -----------------------------------------------------
CREATE TABLE otherprodperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tmp CHAR(1) NULL DEFAULT 'N' , qtp DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table otherhhcpperiods
-- -----------------------------------------------------
CREATE TABLE otherhhcpperiods ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tmp CHAR(1) NULL DEFAULT 'N' , qtp DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table otherhhexpperiods
-- -----------------------------------------------------
CREATE TABLE otherhhexpperiods ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tmp CHAR(1) NULL DEFAULT 'N' , qtp DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(13,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table otherincomeperiods
-- -----------------------------------------------------
CREATE TABLE otherincomeperiods ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tmp CHAR(1) NULL DEFAULT 'N' , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table livehvstperiods
-- -----------------------------------------------------
CREATE TABLE livehvstperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , wei DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table livehvstfeedperiods
-- -----------------------------------------------------
CREATE TABLE livehvstfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , FLIVE_ICOD CHAR(3) NOT NULL , FGROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, FLIVE_ICOD, FGROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table livehvstsoldperiods
-- -----------------------------------------------------
CREATE TABLE livehvstsoldperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , wei DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table livehvstsoldcatperiods
-- -----------------------------------------------------
CREATE TABLE livehvstsoldcatperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , HERD_COD CHAR(2) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , wei DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, HERD_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table mnrheapfeedperiods
-- -----------------------------------------------------
CREATE TABLE mnrheapfeedperiods ( SYS_COD VARCHAR(27) NOT NULL , HEAP_COD CHAR(3) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'F' , qty DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, HEAP_COD, LIVE_ICOD, GROUP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table mnrheapprodsperiods
-- -----------------------------------------------------
CREATE TABLE mnrheapprodsperiods ( SYS_COD VARCHAR(27) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , ava CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table mnrheapsoldperiods
-- -----------------------------------------------------
CREATE TABLE mnrheapsoldperiods ( mnrheapsold_SYS_COD VARCHAR(27) NOT NULL , mnrheapsold_HEAP_COD CHAR(3) NOT NULL , mnrheapsold_MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (mnrheapsold_SYS_COD, mnrheapsold_HEAP_COD, mnrheapsold_MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table owneduselabour
-- -----------------------------------------------------
CREATE TABLE owneduselabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table plotpaddspelabour
-- -----------------------------------------------------
CREATE TABLE plotpaddspelabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table ownusedvlabour
-- -----------------------------------------------------
CREATE TABLE ownusedvlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table cropmanlabour
-- -----------------------------------------------------
CREATE TABLE cropmanlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, ACTY_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table vegmanlabour
-- -----------------------------------------------------
CREATE TABLE vegmanlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMSEASON CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , VEG_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMSEASON, CROP_COD, VEG_COD, ACTY_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table grassmanlabour
-- -----------------------------------------------------
CREATE TABLE grassmanlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , NUMPADD CHAR(2) NOT NULL , CROP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, NUMPADD, CROP_COD, ACTY_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table lvstosyslabour
-- -----------------------------------------------------
CREATE TABLE lvstosyslabour ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table feedgroupslabour
-- -----------------------------------------------------
CREATE TABLE feedgroupslabour ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table lvstosysherdstr
-- -----------------------------------------------------
CREATE TABLE lvstosysherdstr ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , herd_cod CHAR(2) NOT NULL , NANIMAL DECIMAL(7,0) NULL DEFAULT 0 , NANIMALAS DECIMAL(7,0) NULL DEFAULT 0 , bw DECIMAL(7,3) NULL DEFAULT 0 , perfertile DECIMAL(7,3) NULL DEFAULT 0 , permilked DECIMAL(7,3) NULL DEFAULT 0 , cvalue DECIMAL(12,3) NULL DEFAULT 0 , mortality DECIMAL(7,3) NULL DEFAULT 0 , numfertile DECIMAL(7,0) NULL DEFAULT 0 , numferliteas DECIMAL(7,0) NULL DEFAULT 0 , nummilked DECIMAL(7,0) NULL DEFAULT 0 , nummilkedas DECIMAL(7,0) NULL DEFAULT 0 , numdry DECIMAL(7,0) NULL DEFAULT 0 , numdryas DECIMAL(7,0) NULL DEFAULT 0 , numlactating DECIMAL(7,0) NULL DEFAULT 0 , numlactatingas DECIMAL(7,0) NULL DEFAULT 0 , TOTPART DECIMAL(7,0) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, herd_cod) ) ; 
-- -----------------------------------------------------
-- Table livemanlabour
-- -----------------------------------------------------
CREATE TABLE livemanlabour ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, ACTY_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table livemangrplabourB
-- -----------------------------------------------------
CREATE TABLE livemangrplabourB ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, ACTY_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table othermanlabour
-- -----------------------------------------------------
CREATE TABLE othermanlabour ( SYS_COD VARCHAR(27) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, ACTY_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table moduletree
-- -----------------------------------------------------
CREATE TABLE moduletree ( module_id CHAR(3) NOT NULL , module_library VARCHAR(254) NULL , module_plugin VARCHAR(120) NULL , module_pluginDesc VARCHAR(254) NULL , module_order INT(11) NULL , parent_module CHAR(3) NULL DEFAULT NULL , PRIMARY KEY (module_id)  ) ; 
-- -----------------------------------------------------
-- Table sysmodulenotes
-- -----------------------------------------------------
CREATE TABLE sysmodulenotes ( SYS_COD VARCHAR(27) NOT NULL , library VARCHAR(45) NOT NULL , plugin VARCHAR(45) NOT NULL , notes BLOB NULL , PRIMARY KEY (SYS_COD, library, plugin) ) ; 
-- -----------------------------------------------------
-- Table livehvstcatperiods
-- -----------------------------------------------------
CREATE TABLE livehvstcatperiods ( SYS_COD VARCHAR(27) NOT NULL , LIVE_ICOD CHAR(3) NOT NULL , GROUP_COD CHAR(3) NOT NULL , LIVE_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , HERD_COD CHAR(2) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , wei DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, LIVE_ICOD, GROUP_COD, LIVE_COD, PROD_COD, HERD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table plotman
-- -----------------------------------------------------
CREATE TABLE plotman ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , mandays DECIMAL(12,3) NULL , pricemanday DECIMAL(12,3) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD)  ) ; 
-- -----------------------------------------------------
-- Table plotmanperiods
-- -----------------------------------------------------
CREATE TABLE plotmanperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , TIM CHAR(1) NULL DEFAULT 'N' , QTY DECIMAL(12,3) NULL DEFAULT 0 , PRI DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table plotmantim
-- -----------------------------------------------------
CREATE TABLE plotmantim ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PLANDENS DECIMAL(12,3) NULL DEFAULT 0 , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , CHECKED CHAR(1) NULL DEFAULT 'N' , mandays DECIMAL(12,3) NULL DEFAULT 0 , pricemanday DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, NMONTH)  ) ; 

-- -----------------------------------------------------
-- Table plotlabour
-- -----------------------------------------------------
CREATE TABLE plotlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,2) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, NMONTH, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table plotmanfert
-- -----------------------------------------------------
CREATE TABLE plotmanfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , PRCH CHAR(1) NULL DEFAULT 'F' , FARM CHAR(1) NULL DEFAULT 'F' , EXCH CHAR(1) NULL DEFAULT 'F' , QTYPRCH DECIMAL(12,3) NULL DEFAULT 0 , QTYFARM DECIMAL(12,3) NULL DEFAULT 0 , QTYEXCH DECIMAL(12,3) NULL DEFAULT 0 , MACHINE CHAR(1) NULL DEFAULT 'F' , FREQMACH DECIMAL(12,3) NULL DEFAULT 0 , PRICE DECIMAL(12,3) NULL DEFAULT 0 , MACHDESC VARCHAR(120) NULL , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, NMONTH, FERTYP_COD)  ) ; 

-- -----------------------------------------------------
-- Table plotmanprchfert
-- -----------------------------------------------------
CREATE TABLE plotmanprchfert ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, FERTYP_COD)  ) ; 
-- -----------------------------------------------------
-- Table plotmanprchfertperiods
-- -----------------------------------------------------
CREATE TABLE plotmanprchfertperiods ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , FERTYP_COD VARCHAR(5) NOT NULL , period_id CHAR(2) NOT NULL , tim CHAR(1) NULL DEFAULT 'N' , QTY DECIMAL(12,3) NULL DEFAULT 0 , PRI DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, FERTYP_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table plotmanlabour
-- -----------------------------------------------------
CREATE TABLE plotmanlabour ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , PERS_COD VARCHAR(5) NOT NULL , FREQUENCY DECIMAL(12,3) NULL DEFAULT 0 , HOURSDAY DECIMAL(12,3) NULL DEFAULT 0 , PPERHOUR DECIMAL(6,2) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, PERS_COD)  ) ; 
-- -----------------------------------------------------
-- Table plotmanheap
-- -----------------------------------------------------
CREATE TABLE plotmanheap ( SYS_COD VARCHAR(27) NOT NULL , PLOT_COD CHAR(3) NOT NULL , ACTY_COD CHAR(3) NOT NULL , NMONTH CHAR(2) NOT NULL , HEAP_COD CHAR(3) NOT NULL , ACTYM_COD CHAR(3) NULL , MET_COD VARCHAR(5) NULL , QTYAPP DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, PLOT_COD, ACTY_COD, NMONTH, HEAP_COD)  ) ; 

-- -----------------------------------------------------
-- Table indigenousunits
-- -----------------------------------------------------
CREATE TABLE indigenousunits ( unit_cod CHAR(3) NOT NULL , unit_des VARCHAR(60) NULL , kgs DECIMAL(12,3) NULL , lts DECIMAL(12,3) NULL , PRIMARY KEY (unit_cod) ) ; 
-- -----------------------------------------------------
-- Table grpcrpprodsprod
-- -----------------------------------------------------
CREATE TABLE grpcrpprodsprod ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , FS DECIMAL(12,3) NULL DEFAULT 0 , LF DECIMAL(12,3) NULL DEFAULT 0 , HC DECIMAL(12,3) NULL DEFAULT 0 , LE DECIMAL(12,3) NULL DEFAULT 0 , OT DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, CROP_COD, PROD_COD)  ) ; 
-- -----------------------------------------------------
-- Table grpcrpforaprod
-- -----------------------------------------------------
CREATE TABLE grpcrpforaprod ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , FS DECIMAL(12,3) NULL , LF DECIMAL(12,3) NULL , HC DECIMAL(12,3) NULL , LE DECIMAL(12,3) NULL , OT DECIMAL(12,3) NULL , PRIMARY KEY (SYS_COD, CROP_COD, FORA_COD)  ) ; 
-- -----------------------------------------------------
-- Table grpcrpprodssold
-- -----------------------------------------------------
CREATE TABLE grpcrpprodssold ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, CROP_COD, PROD_COD, MARK_COD)  ) ; 
-- -----------------------------------------------------
-- Table grpcrpprodssoldperiods
-- -----------------------------------------------------
CREATE TABLE grpcrpprodssoldperiods ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , qty DECIMAL(12,3) NULL , pri DECIMAL(12,3) NULL , PRIMARY KEY (SYS_COD, CROP_COD, PROD_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grpcrpforasold
-- -----------------------------------------------------
CREATE TABLE grpcrpforasold ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , PRIMARY KEY (SYS_COD, CROP_COD, FORA_COD, MARK_COD)  ) ; 
-- -----------------------------------------------------
-- Table grpcrpforasoldperiods
-- -----------------------------------------------------
CREATE TABLE grpcrpforasoldperiods ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , MARK_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , qty DECIMAL(12,3) NULL , pri DECIMAL(12,3) NULL , PRIMARY KEY (SYS_COD, CROP_COD, FORA_COD, MARK_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grpcrpprodscons
-- -----------------------------------------------------
CREATE TABLE grpcrpprodscons ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , PROD_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , qty DECIMAL(12,3) NULL , pri DECIMAL(12,3) NULL , PRIMARY KEY (SYS_COD, CROP_COD, PROD_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table grpcrpforacons
-- -----------------------------------------------------
CREATE TABLE grpcrpforacons ( SYS_COD VARCHAR(27) NOT NULL , CROP_COD CHAR(3) NOT NULL , FORA_COD CHAR(3) NOT NULL , period_id CHAR(2) NOT NULL , qty DECIMAL(12,3) NULL DEFAULT 0 , pri DECIMAL(12,3) NULL DEFAULT 0 , PRIMARY KEY (SYS_COD, CROP_COD, FORA_COD, period_id)  ) ; 
-- -----------------------------------------------------
-- Table agegrps
-- -----------------------------------------------------
CREATE TABLE agegrps ( vecpos INT NOT NULL , grptyp INT NULL , typcod VARCHAR(45) NULL , vfrom DECIMAL(7,3) NULL , vto DECIMAL(7,3) NULL , energy DECIMAL(7,3) NULL , protein DECIMAL(7,3) NULL , PRIMARY KEY (vecpos) ) ; 
-- Indexes to be created by the convertion
CREATE INDEX activity_MNTIDX001 ON activity (UNIT_COD ASC);
CREATE INDEX actymethods_MNTIDX002 ON actymethods (ACTY_COD ASC);
CREATE INDEX cropfora_MNTIDX013 ON cropfora (CROP_COD ASC);
CREATE INDEX cropfora_MNTIDX014 ON cropfora (FORA_COD ASC);
CREATE INDEX cropprods_MNTIDX011 ON cropprods (CROP_COD ASC);
CREATE INDEX cropprods_MNTIDX012 ON cropprods (PROD_COD ASC);
CREATE INDEX lvproducts_MNTIDX003 ON lvproducts (LIVE_COD ASC);
CREATE INDEX lvproducts_MNTIDX004 ON lvproducts (PROD_COD ASC);
CREATE INDEX pastfora_MNTIDX009 ON pastfora (CROP_COD ASC);
CREATE INDEX pastfora_MNTIDX010 ON pastfora (FORA_COD ASC);
CREATE INDEX systype_MNTIDX005 ON systype (CROP_COD ASC);
CREATE INDEX systype_MNTIDX006 ON systype (LIVE_COD ASC);
CREATE INDEX pastprods_MNTIDX007 ON pastprods (CROP_COD ASC);
CREATE INDEX pastprods_MNTIDX008 ON pastprods (PROD_COD ASC);
CREATE INDEX system_SYSIDX005 ON system (CNTY_COD ASC);
CREATE INDEX system_SYSIDX006 ON system (SYST_COD ASC);
CREATE INDEX labforce_SYSIDX001 ON labforce (SYS_COD ASC);
CREATE INDEX spadstown_SYSIDX002 ON spadstown (SYS_COD ASC);
CREATE INDEX spadstown_SYSIDX003 ON spadstown (SOIL_COD ASC);
CREATE INDEX spadstown_SYSIDX004 ON spadstown (DRAIN_COD ASC);
CREATE INDEX lvstosys_SYSIDX007 ON lvstosys (SYS_COD ASC);
CREATE INDEX lvstosys_SYSIDX008 ON lvstosys (LIVE_COD ASC);
CREATE INDEX wellbeing_SYSIDX182 ON wellbeing (SYS_COD ASC);
CREATE INDEX plotseasons_SYSIDX010 ON plotseasons (SYS_COD ASC, PLOT_COD ASC);
CREATE INDEX owneduse_SYSIDX012 ON owneduse (CROP_COD ASC);
CREATE INDEX owneduse_SYSIDX011 ON owneduse (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC);
CREATE INDEX ownusedv_SYSIDX014 ON ownusedv (VEG_COD ASC);
CREATE INDEX ownusedv_SYSIDX013 ON ownusedv (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC);
CREATE INDEX plotgpspos_SYSIDX009 ON plotgpspos (SYS_COD ASC, PLOT_COD ASC);
CREATE INDEX plotpaddoks_SYSIDX015 ON plotpaddoks (SYS_COD ASC, PLOT_COD ASC);
CREATE INDEX plotpaddspe_SYSIDX017 ON plotpaddspe (CROP_COD ASC);
CREATE INDEX plotpaddspe_SYSIDX016 ON plotpaddspe (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC);
CREATE INDEX plotpaddspedt_SYSIDX019 ON plotpaddspedt (CROPD_COD ASC);
CREATE INDEX plotpaddspedt_SYSIDX018 ON plotpaddspedt (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC);
CREATE INDEX cropman_SYSIDX020 ON cropman (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC);
CREATE INDEX cropman_SYSIDX021 ON cropman (ACTY_COD ASC);
CREATE INDEX cropmantim_SYSIDX022 ON cropmantim (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX cropmantim_SYSIDX023 ON cropmantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX cropmantim_SYSIDX191 ON cropmantim (NMONTH ASC);
CREATE INDEX croplabour_SYSIDX027 ON croplabour (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX croplabour_SYSIDX028 ON croplabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX cropmanfert_SYSIDX024 ON cropmanfert (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX cropmanfert_SYSIDX025 ON cropmanfert (FERTYP_COD ASC);
CREATE INDEX cropmanfert_SYSIDX026 ON cropmanfert (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX cropmanprchfert_SYSIDX029 ON cropmanprchfert (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX cropmanprchfert_SYSIDX030 ON cropmanprchfert (FERTYP_COD ASC);
CREATE INDEX mnrheap_SYSIDX149 ON mnrheap (SYS_COD ASC);
CREATE INDEX cropmanheap_SYSIDX157 ON cropmanheap (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX cropmanheap_SYSIDX158 ON cropmanheap (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX cropmanheap_SYSIDX159 ON cropmanheap (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX crpprodman_SYSIDX031 ON crpprodman (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX crpprodman_SYSIDX032 ON crpprodman (CROP_COD ASC, PROD_COD ASC);
CREATE INDEX crpprodmantim_SYSIDX033 ON crpprodmantim (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX crpprodmantim_SYSIDX034 ON crpprodmantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX crpprodmantim_SYSIDX192 ON crpprodmantim (NMONTH ASC);
CREATE INDEX crpprodlabour_SYSIDX035 ON crpprodlabour (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC, NMONTH ASC);
CREATE INDEX crpprodlabour_SYSIDX036 ON crpprodlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX crpprodmansold_SYSIDX033 ON crpprodmansold (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX crpprodmansold_SYSIDX034 ON crpprodmansold (MARK_COD ASC);
CREATE INDEX crpforaman_SYSIDX037 ON crpforaman (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX crpforaman_SYSIDX038 ON crpforaman (CROP_COD ASC, FORA_COD ASC);
CREATE INDEX crpforamansold_SYSIDX039 ON crpforamansold (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX crpforamansold_SYSIDX040 ON crpforamansold (MARK_COD ASC);
CREATE INDEX crpforamantim_SYSIDX041 ON crpforamantim (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX crpforamantim_SYSIDX042 ON crpforamantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX crpforamantim_SYSIDX195 ON crpforamantim (NMONTH ASC);
CREATE INDEX crpforalabour_SYSIDX043 ON crpforalabour (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC, NMONTH ASC);
CREATE INDEX crpforalabour_SYSIDX044 ON crpforalabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX vegman_SYSIDX045 ON vegman (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC);
CREATE INDEX vegman_SYSIDX046 ON vegman (ACTY_COD ASC);
CREATE INDEX vegmantim_SYSIDX046 ON vegmantim (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC);
CREATE INDEX vegmantim_SYSIDX047 ON vegmantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX vegmantim_SYSIDX199 ON vegmantim (NMONTH ASC);
CREATE INDEX veglabour_SYSIDX051 ON veglabour (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX veglabour_SYSIDX052 ON veglabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX vegmanfert_SYSIDX048 ON vegmanfert (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX vegmanfert_SYSIDX049 ON vegmanfert (FERTYP_COD ASC);
CREATE INDEX vegmanfert_SYSIDX050 ON vegmanfert (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX vegmanprchfert_SYSIDX053 ON vegmanprchfert (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC);
CREATE INDEX vegmanprchfert_SYSIDX054 ON vegmanprchfert (FERTYP_COD ASC);
CREATE INDEX vegmanheap_SYSIDX160 ON vegmanheap (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX vegmanheap_SYSIDX161 ON vegmanheap (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX vegmanheap_SYSIDX162 ON vegmanheap (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX vegprodman_SYSIDX055 ON vegprodman (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC);
CREATE INDEX vegprodman_SYSIDX056 ON vegprodman (VEG_COD ASC, PROD_COD ASC);
CREATE INDEX vegprodmantim_SYSIDX059 ON vegprodmantim (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX vegprodmantim_SYSIDX060 ON vegprodmantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX vegprodmantim_SYSIDX201 ON vegprodmantim (NMONTH ASC);
CREATE INDEX vegprodlabour_SYSIDX061 ON vegprodlabour (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, PROD_COD ASC, NMONTH ASC);
CREATE INDEX vegprodlabour_SYSIDX062 ON vegprodlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX vegprodmansold_SYSIDX057 ON vegprodmansold (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX vegprodmansold_SYSIDX058 ON vegprodmansold (MARK_COD ASC);
CREATE INDEX vegforaman_SYSIDX063 ON vegforaman (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC);
CREATE INDEX vegforaman_SYSIDX064 ON vegforaman (VEG_COD ASC, FORA_COD ASC);
CREATE INDEX vegforamantim_SYSIDX067 ON vegforamantim (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX vegforamantim_SYSIDX068 ON vegforamantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX vegforamantim_SYSIDX204 ON vegforamantim (NMONTH ASC);
CREATE INDEX vegforalabour_SYSIDX069 ON vegforalabour (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, FORA_COD ASC, NMONTH ASC);
CREATE INDEX vegforalabour_SYSIDX070 ON vegforalabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX vegforamansold_SYSIDX065 ON vegforamansold (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX vegforamansold_SYSIDX066 ON vegforamansold (MARK_COD ASC);
CREATE INDEX grassman_SYSIDX071 ON grassman (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC);
CREATE INDEX grassman_SYSIDX072 ON grassman (ACTY_COD ASC);
CREATE INDEX grassmantim_SYSIDX073 ON grassmantim (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX grassmantim_SYSIDX074 ON grassmantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX grassmantim_SYSIDX207 ON grassmantim (NMONTH ASC);
CREATE INDEX grasslabour_SYSIDX080 ON grasslabour (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX grasslabour_SYSIDX081 ON grasslabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX grassmanfert_SYSIDX075 ON grassmanfert (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX grassmanfert_SYSIDX076 ON grassmanfert (FERTYP_COD ASC);
CREATE INDEX grassmanfert_SYSIDX077 ON grassmanfert (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX grassmanprchfert_SYSIDX078 ON grassmanprchfert (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX grassmanprchfert_SYSIDX079 ON grassmanprchfert (FERTYP_COD ASC);
CREATE INDEX grassmanheap_SYSIDX163 ON grassmanheap (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX grassmanheap_SYSIDX164 ON grassmanheap (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX grassmanheap_SYSIDX165 ON grassmanheap (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX grassprodman_SYSIDX082 ON grassprodman (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX grassprodman_SYSIDX083 ON grassprodman (CROP_COD ASC, PROD_COD ASC);
CREATE INDEX grassprodmantim_SYSIDX086 ON grassprodmantim (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX grassprodmantim_SYSIDX087 ON grassprodmantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX grassprodmantim_SYSIDX210 ON grassprodmantim (NMONTH ASC);
CREATE INDEX grassprodlabour_SYSIDX088 ON grassprodlabour (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC, NMONTH ASC);
CREATE INDEX grassprodlabour_SYSIDX089 ON grassprodlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX grassprodmansold_SYSIDX084 ON grassprodmansold (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX grassprodmansold_SYSIDX085 ON grassprodmansold (MARK_COD ASC);
CREATE INDEX grassforaman_SYSIDX090 ON grassforaman (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC);
CREATE INDEX grassforaman_SYSIDX091 ON grassforaman (CROP_COD ASC, FORA_COD ASC);
CREATE INDEX grassforamantim_SYSIDX094 ON grassforamantim (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX grassforamantim_SYSIDX095 ON grassforamantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX grassforamantim_SYSIDX213 ON grassforamantim (NMONTH ASC);
CREATE INDEX grassforalabour_SYSIDX096 ON grassforalabour (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC, NMONTH ASC);
CREATE INDEX grassforalabour_SYSIDX098 ON grassforalabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX grassforamansold_SYSIDX092 ON grassforamansold (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX grassforamansold_SYSIDX093 ON grassforamansold (MARK_COD ASC);
CREATE INDEX feedgroups_SYSIDX101 ON feedgroups (SYS_COD ASC, LIVE_ICOD ASC);
CREATE INDEX livegroups_SYSIDX104 ON livegroups (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX liveavailres_SYSIDX099 ON liveavailres (SYS_COD ASC);
CREATE INDEX liveavailres_SYSIDX100 ON liveavailres (FEED_COD ASC);
CREATE INDEX stallfeeprch_SYSIDX102 ON stallfeeprch (SYS_COD ASC, FEED_COD ASC);
CREATE INDEX stallfeeprch_SYSIDX103 ON stallfeeprch (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX grazingman_SYSIDX105 ON grazingman (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC);
CREATE INDEX grazingman_SYSIDX106 ON grazingman (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX grazingman_SYSIDX170 ON grazingman (MLIVE_COD ASC, MPROD_COD ASC);
CREATE INDEX crpprodmanfeed_SYSIDX107 ON crpprodmanfeed (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX crpprodmanfeed_SYSIDX108 ON crpprodmanfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX crpforamanfeed_SYSIDX109 ON crpforamanfeed (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX crpforamanfeed_SYSIDX110 ON crpforamanfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX vegprodmanfeed_SYSIDX111 ON vegprodmanfeed (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX vegprodmanfeed_SYSIDX112 ON vegprodmanfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX vegforamanfeed_SYSIDX113 ON vegforamanfeed (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX vegforamanfeed_SYSIDX114 ON vegforamanfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX grassprodmanfeed_SYSIDX115 ON grassprodmanfeed (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX grassprodmanfeed_SYSIDX116 ON grassprodmanfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX grassforamanfeed_SYSIDX117 ON grassforamanfeed (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX grassforamanfeed_SYSIDX118 ON grassforamanfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX liveman_SYSIDX119 ON liveman (SYS_COD ASC, LIVE_ICOD ASC);
CREATE INDEX liveman_SYSIDX120 ON liveman (ACTY_COD ASC);
CREATE INDEX livemantim_SYSIDX121 ON livemantim (SYS_COD ASC, LIVE_ICOD ASC, ACTY_COD ASC);
CREATE INDEX livemantim_SYSIDX227 ON livemantim (NMONTH ASC);
CREATE INDEX livelabour_SYSIDX122 ON livelabour (SYS_COD ASC, LIVE_ICOD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX livelabour_SYSIDX123 ON livelabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX otherprod_SYSIDX124 ON otherprod (SYS_COD ASC, LIVE_ICOD ASC);
CREATE INDEX livemangrp_SYSIDX125 ON livemangrp (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX livemangrp_SYSIDX126 ON livemangrp (ACTY_COD ASC);
CREATE INDEX livemangrptim_SYSIDX127 ON livemangrptim (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, ACTY_COD ASC);
CREATE INDEX livemangrptim_SYSIDX228 ON livemangrptim (NMONTH ASC);
CREATE INDEX livemangrplabour_SYSIDX128 ON livemangrplabour (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX livemangrplabour_SYSIDX129 ON livemangrplabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX farmassets_SYSIDX140 ON farmassets (SYS_COD ASC);
CREATE INDEX otherhhcp_SYSIDX141 ON otherhhcp (SYS_COD ASC);
CREATE INDEX otherhhexp_SYSIDX142 ON otherhhexp (SYS_COD ASC);
CREATE INDEX otherincome_SYSIDX143 ON otherincome (SYS_COD ASC);
CREATE INDEX otherman_SYSIDX135 ON otherman (SYS_COD ASC);
CREATE INDEX otherman_SYSIDX136 ON otherman (ACTY_COD ASC);
CREATE INDEX othermantim_SYSIDX137 ON othermantim (SYS_COD ASC, ACTY_COD ASC);
CREATE INDEX othermantim_SYSIDX229 ON othermantim (NMONTH ASC);
CREATE INDEX otherlabour_SYSIDX138 ON otherlabour (SYS_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX otherlabour_SYSIDX139 ON otherlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX livehvst_SYSIDX130 ON livehvst (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX livehvst_SYSIDX131 ON livehvst (LIVE_COD ASC, PROD_COD ASC);
CREATE INDEX livehvsttim_SYSIDX132 ON livehvsttim (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, LIVE_COD ASC, PROD_COD ASC);
CREATE INDEX livehvsttim_SYSIDX233 ON livehvsttim (NMONTH ASC);
CREATE INDEX livehvstlabour_SYSIDX133 ON livehvstlabour (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, LIVE_COD ASC, PROD_COD ASC, NMONTH ASC);
CREATE INDEX livehvstlabour_SYSIDX134 ON livehvstlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX livehvstsold_SYSIDX144 ON livehvstsold (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, LIVE_COD ASC, PROD_COD ASC);
CREATE INDEX livehvstsold_SYSIDX145 ON livehvstsold (MARK_COD ASC);
CREATE INDEX livehvsttimcat_SYSIDX146 ON livehvsttimcat (NMONTH ASC);
CREATE INDEX livehvstsoldcat_SYSIDX147 ON livehvstsoldcat (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, LIVE_COD ASC, PROD_COD ASC, HERD_COD ASC);
CREATE INDEX livehvstsoldcat_SYSIDX148 ON livehvstsoldcat (MARK_COD ASC);
CREATE INDEX livehvstfeed_SYSIDX166 ON livehvstfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, LIVE_COD ASC, PROD_COD ASC);
CREATE INDEX livehvstfeed_SYSIDX167 ON livehvstfeed (SYS_COD ASC, FLIVE_ICOD ASC, FGROUP_COD ASC);
CREATE INDEX mnrheaplvprod_SYSIDX150 ON mnrheaplvprod (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheaplvprod_SYSIDX151 ON mnrheaplvprod (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC, LIVE_COD ASC, PROD_COD ASC);
CREATE INDEX mnrheapprods_SYSIDX152 ON mnrheapprods (SYS_COD ASC);
CREATE INDEX mnrheapaddprods_SYSIDX153 ON mnrheapaddprods (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapaddprods_SYSIDX154 ON mnrheapaddprods (SYS_COD ASC, PROD_COD ASC);
CREATE INDEX mnrheapsold_SYSIDX155 ON mnrheapsold (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapsold_SYSIDX156 ON mnrheapsold (MARK_COD ASC);
CREATE INDEX mnrheapfeed_SYSIDX168 ON mnrheapfeed (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapfeed_SYSIDX169 ON mnrheapfeed (SYS_COD ASC, LIVE_ICOD ASC, GROUP_COD ASC);
CREATE INDEX mnrheapcrpprod_SYSIDX170 ON mnrheapcrpprod (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapcrpprod_SYSIDX171 ON mnrheapcrpprod (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX mnrheapcrpfora_SYSIDX172 ON mnrheapcrpfora (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapcrpfora_SYSIDX173 ON mnrheapcrpfora (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX mnrheapgrassprod_SYSIDX174 ON mnrheapgrassprod (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapgrassprod_SYSIDX175 ON mnrheapgrassprod (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX mnrheapgrassfora_SYSIDX176 ON mnrheapgrassfora (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapgrassfora_SYSIDX177 ON mnrheapgrassfora (SYS_COD ASC, PLOT_COD ASC, NUMPADD ASC, CROP_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX mnrheapvegprod_SYSIDX178 ON mnrheapvegprod (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapvegprod_SYSIDX179 ON mnrheapvegprod (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, PROD_COD ASC);
CREATE INDEX mnrheapvegfora_SYSIDX180 ON mnrheapvegfora (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX mnrheapvegfora_SYSIDX181 ON mnrheapvegfora (SYS_COD ASC, PLOT_COD ASC, NUMSEASON ASC, CROP_COD ASC, VEG_COD ASC, ACTY_COD ASC, FORA_COD ASC);
CREATE INDEX systemperiods_SYSIDX183 ON systemperiods (period_id ASC);
CREATE INDEX labforceperiods_SYSIDX184 ON labforceperiods (period_id ASC);
CREATE INDEX lvstosysperiods_SYSIDX185 ON lvstosysperiods (period_id ASC);
CREATE INDEX plotseasonsperiods_SYSIDX186 ON plotseasonsperiods (period_id ASC);
CREATE INDEX owneduseperiods_SYSIDX187 ON owneduseperiods (period_id ASC);
CREATE INDEX ownusedvperiods_SYSIDX188 ON ownusedvperiods (period_id ASC);
CREATE INDEX cropmanperiods_SYSIDX189 ON cropmanperiods (period_id ASC);
CREATE INDEX cropmanprchfertperiods_SYSIDX190 ON cropmanprchfertperiods (period_id ASC);
CREATE INDEX crpprodmansoldperiods_SYSIDX193 ON crpprodmansoldperiods (period_id ASC);
CREATE INDEX crpprodmanperiods_SYSIDX194 ON crpprodmanperiods (period_id ASC);
CREATE INDEX crpforamanperiods_SYSIDX196 ON crpforamanperiods (period_id ASC);
CREATE INDEX crpforamansoldperiods_SYSIDX197 ON crpforamansoldperiods (period_id ASC);
CREATE INDEX vegmanperiods_SYSIDX198 ON vegmanperiods (period_id ASC);
CREATE INDEX vegmanprchfertperiods_SYSIDX200 ON vegmanprchfertperiods (period_id ASC);
CREATE INDEX vegprodmanperiods_SYSIDX202 ON vegprodmanperiods (period_id ASC);
CREATE INDEX vegprodmansoldperiods_SYSIDX203 ON vegprodmansoldperiods (period_id ASC);
CREATE INDEX vegforamanperiods_SYSIDX205 ON vegforamanperiods (period_id ASC);
CREATE INDEX vegforamansoldperiods_SYSIDX206 ON vegforamansoldperiods (period_id ASC);
CREATE INDEX grassmanperiods_SYSIDX208 ON grassmanperiods (period_id ASC);
CREATE INDEX grassmanprchfertperiods_SYSIDX209 ON grassmanprchfertperiods (period_id ASC);
CREATE INDEX grassprodmanperiods_SYSIDX211 ON grassprodmanperiods (period_id ASC);
CREATE INDEX grassprodmansoldperiods_SYSIDX212 ON grassprodmansoldperiods (period_id ASC);
CREATE INDEX grassforamanperiods_SYSIDX214 ON grassforamanperiods (period_id ASC);
CREATE INDEX grassforamansoldperiods_SYSIDX215 ON grassforamansoldperiods (period_id ASC);
CREATE INDEX liveavailresperiods_SYSIDX216 ON liveavailresperiods (period_id ASC);
CREATE INDEX stallfeeprchperiods_SYSIDX217 ON stallfeeprchperiods (period_id ASC);
CREATE INDEX livegroupsperiods_SYSIDX218 ON livegroupsperiods (period_id ASC);
CREATE INDEX grazingmanperiods_SYSIDX219 ON grazingmanperiods (period_id ASC);
CREATE INDEX crpprodmanfeedperiods_SYSIDX220 ON crpprodmanfeedperiods (period_id ASC);
CREATE INDEX crpforamanfeedperiods_SYSIDX221 ON crpforamanfeedperiods (period_id ASC);
CREATE INDEX vegprodmanfeedperiods_SYSIDX222 ON vegprodmanfeedperiods (period_id ASC);
CREATE INDEX vegforamanfeedperiods_SYSIDX223 ON vegforamanfeedperiods (period_id ASC);
CREATE INDEX grassprodmanfeedperiods_SYSIDX224 ON grassprodmanfeedperiods (period_id ASC);
CREATE INDEX grassforamanfeedperiods_SYSIDX225 ON grassforamanfeedperiods (period_id ASC);
CREATE INDEX otherprodperiods_SYSIDX226 ON otherprodperiods (period_id ASC);
CREATE INDEX otherhhcpperiods_SYSIDX230 ON otherhhcpperiods (period_id ASC);
CREATE INDEX otherhhexpperiods_SYSIDX231 ON otherhhexpperiods (period_id ASC);
CREATE INDEX otherincomeperiods_SYSIDX232 ON otherincomeperiods (period_id ASC);
CREATE INDEX livehvstperiods_SYSIDX234 ON livehvstperiods (period_id ASC);
CREATE INDEX livehvstfeedperiods_SYSIDX235 ON livehvstfeedperiods (period_id ASC);
CREATE INDEX livehvstsoldperiods_SYSIDX236 ON livehvstsoldperiods (period_id ASC);
CREATE INDEX livehvstsoldcatperiods_SYSIDX237 ON livehvstsoldcatperiods (period_id ASC);
CREATE INDEX mnrheapfeedperiods_SYSIDX238 ON mnrheapfeedperiods (period_id ASC);
CREATE INDEX mnrheapprodsperiods_SYSIDX239 ON mnrheapprodsperiods (period_id ASC);
CREATE INDEX mnrheapsoldperiods_SYSIDX240 ON mnrheapsoldperiods (period_id ASC);
CREATE INDEX owneduselabour_SYSIDX141 ON owneduselabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX plotpaddspelabour_SYSIDX242 ON plotpaddspelabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX ownusedvlabour_SYSIDX243 ON ownusedvlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX cropmanlabour_SYSIDX244 ON cropmanlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX vegmanlabour_SYSIDX245 ON vegmanlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX grassmanlabour_SYSIDX246 ON grassmanlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX lvstosyslabour_SYSIDX247 ON lvstosyslabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX feedgroupslabour_SYSIDX248 ON feedgroupslabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX livemanlabour_SYSIDX249 ON livemanlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX livemangrplabourB_SYSIDX250 ON livemangrplabourB (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX othermanlabour_SYSIDX250 ON othermanlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX moduletree_MNTIDXMODULES ON moduletree (parent_module ASC);
CREATE INDEX livehvstcatperiods_SYSIDX251 ON livehvstcatperiods (period_id ASC);
CREATE INDEX plotman_SYSIDX252 ON plotman (ACTY_COD ASC);
CREATE INDEX plotmanperiods_SYSIDX253 ON plotmanperiods (period_id ASC);
CREATE INDEX plotmantim_SYSIDX023 ON plotmantim (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX plotmantim_SYSIDX191 ON plotmantim (NMONTH ASC);
CREATE INDEX plotmantim_SYSIDX254 ON plotmantim (SYS_COD ASC, PLOT_COD ASC, ACTY_COD ASC);
CREATE INDEX plotlabour_SYSIDX255 ON plotlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX plotmanfert_SYSIDX025 ON plotmanfert (FERTYP_COD ASC);
CREATE INDEX plotmanfert_SYSIDX026 ON plotmanfert (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX plotmanfert_SYSIDX257 ON plotmanfert (SYS_COD ASC, PLOT_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX plotmanprchfert_SYSIDX256 ON plotmanprchfert (FERTYP_COD ASC);
CREATE INDEX plotmanprchfertperiods_SYSIDX258 ON plotmanprchfertperiods (period_id ASC);
CREATE INDEX plotmanlabour_SYSIDX259 ON plotmanlabour (SYS_COD ASC, PERS_COD ASC);
CREATE INDEX plotmanheap_SYSIDX160 ON plotmanheap (SYS_COD ASC, PLOT_COD ASC, ACTY_COD ASC, NMONTH ASC);
CREATE INDEX plotmanheap_SYSIDX161 ON plotmanheap (SYS_COD ASC, HEAP_COD ASC);
CREATE INDEX plotmanheap_SYSIDX162 ON plotmanheap (ACTYM_COD ASC, MET_COD ASC);
CREATE INDEX grpcrpprodsprod_fk_grpcrpprodsprod_cropprods1 ON grpcrpprodsprod (CROP_COD ASC, PROD_COD ASC);
CREATE INDEX grpcrpforaprod_fk_grpcrpforaprod_cropfora1 ON grpcrpforaprod (CROP_COD ASC, FORA_COD ASC);
CREATE INDEX grpcrpprodssold_fk_grpcrpprodssold_markoutlet1 ON grpcrpprodssold (MARK_COD ASC);
CREATE INDEX grpcrpprodssoldperiods_fk_grpcrpprodssoldperiods_periods1 ON grpcrpprodssoldperiods (period_id ASC);
CREATE INDEX grpcrpforasold_fk_grpcrpforasold_markoutlet1 ON grpcrpforasold (MARK_COD ASC);
CREATE INDEX grpcrpforasoldperiods_fk_grpcrpforasoldperiods_periods1 ON grpcrpforasoldperiods (period_id ASC);
CREATE INDEX grpcrpprodscons_fk_grpcrpprodscons_periods1 ON grpcrpprodscons (period_id ASC);
CREATE INDEX grpcrpforacons_fk_grpcrpforacons_periods1 ON grpcrpforacons (period_id ASC);
-- Triggers to be created by the convertion
-- INSERT triggers
CREATE TRIGGER INS_fk_e688edd2_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.UNIT_COD IS NOT NULL) AND ((SELECT (UNIT_COD) as value FROM actyunits WHERE UNIT_COD = NEW.UNIT_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "activity" violates foreign key constraint "fk_e688edd2_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e67e4fee_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "actymethods" violates foreign key constraint "fk_e67e4fee_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e680c62a_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropfora" violates foreign key constraint "fk_e680c62a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e6818d8a_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD) as value FROM forages WHERE FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropfora" violates foreign key constraint "fk_e6818d8a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e67f0178_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropprods" violates foreign key constraint "fk_e67f0178_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e67fbf1e_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM cpprods WHERE PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropprods" violates foreign key constraint "fk_e67fbf1e_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e6857184_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON lvproducts FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM livestoc WHERE LIVE_COD = NEW.LIVE_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvproducts" violates foreign key constraint "fk_e6857184_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e68642f8_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON lvproducts FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM products WHERE PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvproducts" violates foreign key constraint "fk_e68642f8_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e683dda6_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON pastfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastfora" violates foreign key constraint "fk_e683dda6_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e684a4ca_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON pastfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD) as value FROM forages WHERE FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastfora" violates foreign key constraint "fk_e684a4ca_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e6871a7a_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON systype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM livestoc WHERE LIVE_COD = NEW.LIVE_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "systype" violates foreign key constraint "fk_e6871a7a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e687f8dc_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON systype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "systype" violates foreign key constraint "fk_e687f8dc_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e6825a62_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON pastprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastprods" violates foreign key constraint "fk_e6825a62_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e6831844_bce0_11e0_a5d9_58946b4c242c BEFORE INSERT ON pastprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM cpprods WHERE PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastprods" violates foreign key constraint "fk_e6831844_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04d77330_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON system FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYST_COD) as value FROM systype WHERE SYST_COD = NEW.SYST_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "system" violates foreign key constraint "fk_04d77330_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04d7e1e4_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON system FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CNTY_COD) as value FROM country WHERE CNTY_COD = NEW.CNTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "system" violates foreign key constraint "fk_04d7e1e4_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04d85584_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON labforce FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "labforce" violates foreign key constraint "fk_04d85584_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04d8cf32_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON spadstown FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "spadstown" violates foreign key constraint "fk_04d8cf32_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04d94dfe_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON spadstown FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.DRAIN_COD IS NOT NULL) AND ((SELECT (DRAIN_COD) as value FROM drainage WHERE DRAIN_COD = NEW.DRAIN_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "spadstown" violates foreign key constraint "fk_04d94dfe_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04d9d1f2_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON spadstown FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.SOIL_COD IS NOT NULL) AND ((SELECT (SOIL_COD) as value FROM soil WHERE SOIL_COD = NEW.SOIL_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "spadstown" violates foreign key constraint "fk_04d9d1f2_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04da5a28_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON lvstosys FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosys" violates foreign key constraint "fk_04da5a28_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04dae7f4_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON lvstosys FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM livestoc WHERE LIVE_COD = NEW.LIVE_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosys" violates foreign key constraint "fk_04dae7f4_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_04db798a_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON wellbeing FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "wellbeing" violates foreign key constraint "fk_04db798a_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e67546_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON plotseasons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotseasons" violates foreign key constraint "fk_91e67546_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e6ee40_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON owneduse FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduse" violates foreign key constraint "fk_91e6ee40_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e99cf8_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON owneduse FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON) as value FROM plotseasons WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduse" violates foreign key constraint "fk_91e99cf8_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e76a8c_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON ownusedv FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedv" violates foreign key constraint "fk_91e76a8c_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91ea399c_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON ownusedv FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedv" violates foreign key constraint "fk_91ea399c_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e602aa_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON plotgpspos FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotgpspos" violates foreign key constraint "fk_91e602aa_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e7eec6_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON plotpaddoks FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddoks" violates foreign key constraint "fk_91e7eec6_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e87a4e_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON plotpaddspe FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspe" violates foreign key constraint "fk_91e87a4e_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91eadcd0_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON plotpaddspe FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD) as value FROM plotpaddoks WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspe" violates foreign key constraint "fk_91eadcd0_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91e908ba_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON plotpaddspedt FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROPD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspedt" violates foreign key constraint "fk_91e908ba_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_91eb88ce_bce1_11e0_a5d9_58946b4c242c BEFORE INSERT ON plotpaddspedt FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspedt" violates foreign key constraint "fk_91eb88ce_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3df4cb58_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropman" violates foreign key constraint "fk_3df4cb58_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3df553c0_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropman" violates foreign key constraint "fk_3df553c0_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3df5da52_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmantim" violates foreign key constraint "fk_3df5da52_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3df7044a_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "cropmantim" violates foreign key constraint "fk_3df7044a_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_cropmantim_periods1 BEFORE INSERT ON cropmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmantim" violates foreign key constraint "fk_cropmantim_periods1"') END; END;
CREATE TRIGGER INS_fk_3df79fae_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON croplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || NMONTH) as value FROM cropmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "croplabour" violates foreign key constraint "fk_3df79fae_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3df84800_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON croplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "croplabour" violates foreign key constraint "fk_3df84800_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3df8edbe_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || NMONTH) as value FROM cropmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanfert" violates foreign key constraint "fk_3df8edbe_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanfert" violates foreign key constraint "fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "cropmanfert" violates foreign key constraint "fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3dfaff5a_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfert" violates foreign key constraint "fk_3dfaff5a_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3dfbbdd2_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfert" violates foreign key constraint "fk_3dfbbdd2_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_42404990_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheap" violates foreign key constraint "fk_42404990_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || NMONTH) as value FROM cropmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanheap" violates foreign key constraint "fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanheap" violates foreign key constraint "fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c BEFORE INSERT ON cropmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "cropmanheap" violates foreign key constraint "fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44bdd730_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodman" violates foreign key constraint "fk_44bdd730_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44be5f16_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD || CROP_COD) as value FROM cropprods WHERE PROD_COD = NEW.PROD_COD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodman" violates foreign key constraint "fk_44be5f16_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44bf621c_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "crpprodmantim" violates foreign key constraint "fk_44bf621c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44c1c25a_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmantim" violates foreign key constraint "fk_44c1c25a_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_crpprodmantim_periods BEFORE INSERT ON crpprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmantim" violates foreign key constraint "fk_crpprodmantim_periods"') END; END;
CREATE TRIGGER INS_fk_44bff0a6_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodlabour" violates foreign key constraint "fk_44bff0a6_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44c274f2_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD || NMONTH) as value FROM crpprodmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodlabour" violates foreign key constraint "fk_44c274f2_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44c0841c_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansold" violates foreign key constraint "fk_44c0841c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44c1269c_bce3_11e0_a317_58946b4c242c BEFORE INSERT ON crpprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansold" violates foreign key constraint "fk_44c1269c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_322bba82_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforaman" violates foreign key constraint "fk_322bba82_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_322c6d1a_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD || CROP_COD) as value FROM cropfora WHERE FORA_COD = NEW.FORA_COD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforaman" violates foreign key constraint "fk_322c6d1a_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_322d0f86_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansold" violates foreign key constraint "fk_322d0f86_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_322da694_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansold" violates foreign key constraint "fk_322da694_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_322e3410_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamantim" violates foreign key constraint "fk_322e3410_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_322ed352_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "crpforamantim" violates foreign key constraint "fk_322ed352_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_crpforamantim_periods BEFORE INSERT ON crpforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamantim" violates foreign key constraint "fk_crpforamantim_periods"') END; END;
CREATE TRIGGER INS_fk_322f701e_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD || NMONTH) as value FROM crpforamantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforalabour" violates foreign key constraint "fk_322f701e_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_32302482_bce4_11e0_a317_58946b4c242c BEFORE INSERT ON crpforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforalabour" violates foreign key constraint "fk_32302482_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_52042e10_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD) as value FROM ownusedv WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegman" violates foreign key constraint "fk_52042e10_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_5204c096_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegman" violates foreign key constraint "fk_5204c096_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_5205513c_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmantim" violates foreign key constraint "fk_5205513c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_5205f4de_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegmantim" violates foreign key constraint "fk_5205f4de_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_vegmantim_periods BEFORE INSERT ON vegmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmantim" violates foreign key constraint "fk_vegmantim_periods"') END; END;
CREATE TRIGGER INS_fk_520691fa_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON veglabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || NMONTH) as value FROM vegmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "veglabour" violates foreign key constraint "fk_520691fa_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_52073ee8_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON veglabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "veglabour" violates foreign key constraint "fk_52073ee8_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_5207e4e2_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || NMONTH) as value FROM vegmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanfert" violates foreign key constraint "fk_5207e4e2_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_52089d4c_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanfert" violates foreign key constraint "fk_52089d4c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_52094b84_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegmanfert" violates foreign key constraint "fk_52094b84_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_520a0204_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfert" violates foreign key constraint "fk_520a0204_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_520ac89c_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfert" violates foreign key constraint "fk_520ac89c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_520b8c82_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || NMONTH) as value FROM vegmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanheap" violates foreign key constraint "fk_520b8c82_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_520c5e14_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanheap" violates foreign key constraint "fk_520c5e14_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_520d2dbc_bce5_11e0_a317_58946b4c242c BEFORE INSERT ON vegmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegmanheap" violates foreign key constraint "fk_520d2dbc_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_cce75930_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodman" violates foreign key constraint "fk_cce75930_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_cce7e5bc_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || PROD_COD) as value FROM cropprods WHERE CROP_COD = NEW.VEG_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodman" violates foreign key constraint "fk_cce7e5bc_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_cce86a32_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmantim" violates foreign key constraint "fk_cce86a32_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_cce900be_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegprodmantim" violates foreign key constraint "fk_cce900be_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_vegprodmantim_periods BEFORE INSERT ON vegprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmantim" violates foreign key constraint "fk_vegprodmantim_periods"') END; END;
CREATE TRIGGER INS_fk_cce990ec_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD || NMONTH) as value FROM vegprodmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodlabour" violates foreign key constraint "fk_cce990ec_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ccea3402_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodlabour" violates foreign key constraint "fk_ccea3402_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_cceacfc0_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansold" violates foreign key constraint "fk_cceacfc0_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_cceb82b2_bce6_11e0_a317_58946b4c242c BEFORE INSERT ON vegprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansold" violates foreign key constraint "fk_cceb82b2_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_9ad2a85e_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforaman" violates foreign key constraint "fk_9ad2a85e_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_9ad2dbee_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM cropfora WHERE CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforaman" violates foreign key constraint "fk_9ad2dbee_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_9ad3628a_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamantim" violates foreign key constraint "fk_9ad3628a_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_9ad39b42_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegforamantim" violates foreign key constraint "fk_9ad39b42_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_vegforamantim_periods BEFORE INSERT ON vegforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamantim" violates foreign key constraint "fk_vegforamantim_periods"') END; END;
CREATE TRIGGER INS_fk_9ad3c702_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD || NMONTH) as value FROM vegforamantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforalabour" violates foreign key constraint "fk_9ad3c702_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_9ad4005a_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforalabour" violates foreign key constraint "fk_9ad4005a_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_9ad30588_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansold" violates foreign key constraint "fk_9ad30588_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_9ad33a1c_bce7_11e0_a317_58946b4c242c BEFORE INSERT ON vegforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansold" violates foreign key constraint "fk_9ad33a1c_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334977de_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassman" violates foreign key constraint "fk_334977de_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334a053c_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassman" violates foreign key constraint "fk_334a053c_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334a93d0_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmantim" violates foreign key constraint "fk_334a93d0_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334f51d6_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassmantim" violates foreign key constraint "fk_334f51d6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_grassmantim_periods BEFORE INSERT ON grassmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmantim" violates foreign key constraint "fk_grassmantim_periods"') END; END;
CREATE TRIGGER INS_fk_334b315a_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grasslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || NMONTH) as value FROM grassmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grasslabour" violates foreign key constraint "fk_334b315a_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334bd74a_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grasslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grasslabour" violates foreign key constraint "fk_334bd74a_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334c80b4_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || NMONTH) as value FROM grassmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanfert" violates foreign key constraint "fk_334c80b4_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334d32b6_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanfert" violates foreign key constraint "fk_334d32b6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_33500fc2_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassmanfert" violates foreign key constraint "fk_33500fc2_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334ddf2c_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfert" violates foreign key constraint "fk_334ddf2c_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_334e9ba6_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfert" violates foreign key constraint "fk_334e9ba6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3350d272_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || NMONTH) as value FROM grassmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanheap" violates foreign key constraint "fk_3350d272_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3351a292_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanheap" violates foreign key constraint "fk_3351a292_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_33527082_bce8_11e0_a317_58946b4c242c BEFORE INSERT ON grassmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassmanheap" violates foreign key constraint "fk_33527082_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e2e10f26_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodman" violates foreign key constraint "fk_e2e10f26_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e2e1bb1a_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || PROD_COD) as value FROM pastprods WHERE CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodman" violates foreign key constraint "fk_e2e1bb1a_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e2e27c58_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmantim" violates foreign key constraint "fk_e2e27c58_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e2e34ffc_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassprodmantim" violates foreign key constraint "fk_e2e34ffc_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_grassprodmantim_periods BEFORE INSERT ON grassprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmantim" violates foreign key constraint "fk_grassprodmantim_periods"') END; END;
CREATE TRIGGER INS_fk_e2e41e3c_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD || NMONTH) as value FROM grassprodmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodlabour" violates foreign key constraint "fk_e2e41e3c_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e2e50928_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodlabour" violates foreign key constraint "fk_e2e50928_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e2e5e942_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansold" violates foreign key constraint "fk_e2e5e942_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_e2e6d992_bce9_11e0_a317_58946b4c242c BEFORE INSERT ON grassprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansold" violates foreign key constraint "fk_e2e6d992_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_6ecf545c_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforaman" violates foreign key constraint "fk_6ecf545c_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_6ecf860c_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM pastfora WHERE CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforaman" violates foreign key constraint "fk_6ecf860c_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_6ed016c6_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamantim" violates foreign key constraint "fk_6ed016c6_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_6ed04f42_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassforamantim" violates foreign key constraint "fk_6ed04f42_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_grassforamantim_periods BEFORE INSERT ON grassforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamantim" violates foreign key constraint "fk_grassforamantim_periods"') END; END;
CREATE TRIGGER INS_fk_6ed07f1c_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD || NMONTH) as value FROM grassforamantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforalabour" violates foreign key constraint "fk_6ed07f1c_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_6ed0bd38_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforalabour" violates foreign key constraint "fk_6ed0bd38_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_6ecfb2c6_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansold" violates foreign key constraint "fk_6ecfb2c6_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_6ecfeb7e_bcea_11e0_a317_58946b4c242c BEFORE INSERT ON grassforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansold" violates foreign key constraint "fk_6ecfeb7e_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3994c7c6_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON feedgroups FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "feedgroups" violates foreign key constraint "fk_3994c7c6_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_399baa0a_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON livegroups FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livegroups" violates foreign key constraint "fk_399baa0a_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3995a826_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON liveavailres FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailres" violates foreign key constraint "fk_3995a826_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_3996875a_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON liveavailres FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (RES_COD) as value FROM restypes WHERE RES_COD = NEW.FEED_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailres" violates foreign key constraint "fk_3996875a_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_39977278_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON stallfeeprch FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || FEED_COD) as value FROM liveavailres WHERE SYS_COD = NEW.SYS_COD AND FEED_COD = NEW.FEED_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprch" violates foreign key constraint "fk_39977278_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_39987088_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON stallfeeprch FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprch" violates foreign key constraint "fk_39987088_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_39997924_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON grazingman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingman" violates foreign key constraint "fk_39997924_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_399a8ba2_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON grazingman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingman" violates foreign key constraint "fk_399a8ba2_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_399ccfe8_bceb_11e0_9e78_58946b4c242c BEFORE INSERT ON grazingman FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.MLIVE_COD IS NOT NULL AND NEW.MPROD_COD IS NOT NULL) AND ((SELECT (LIVE_COD || PROD_COD) as value FROM lvproducts WHERE LIVE_COD = NEW.MLIVE_COD AND PROD_COD = NEW.MPROD_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grazingman" violates foreign key constraint "fk_399ccfe8_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_11fb077e_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON crpprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeed" violates foreign key constraint "fk_11fb077e_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_11fbb070_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON crpprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeed" violates foreign key constraint "fk_11fbb070_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_11fc8fea_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON crpforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeed" violates foreign key constraint "fk_11fc8fea_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_11fd60d2_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON crpforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeed" violates foreign key constraint "fk_11fd60d2_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_11fe14d2_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON vegprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeed" violates foreign key constraint "fk_11fe14d2_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_11fedb2e_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON vegprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeed" violates foreign key constraint "fk_11fedb2e_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_11ff9578_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON vegforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeed" violates foreign key constraint "fk_11ff9578_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_12006d90_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON vegforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeed" violates foreign key constraint "fk_12006d90_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_120155fc_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON grassprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeed" violates foreign key constraint "fk_120155fc_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_12022c20_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON grassprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeed" violates foreign key constraint "fk_12022c20_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_12030438_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON grassforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeed" violates foreign key constraint "fk_12030438_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_1203ea6a_bcec_11e0_9e78_58946b4c242c BEFORE INSERT ON grassforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeed" violates foreign key constraint "fk_1203ea6a_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29cb5696_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON liveman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveman" violates foreign key constraint "fk_29cb5696_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29cbf222_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON liveman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveman" violates foreign key constraint "fk_29cbf222_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29ce0558_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livemantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || ACTY_COD) as value FROM liveman WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemantim" violates foreign key constraint "fk_29ce0558_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_livemantim_periods BEFORE INSERT ON livemantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livemantim" violates foreign key constraint "fk_livemantim_periods"') END; END;
CREATE TRIGGER INS_fk_29cc7a26_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livelabour" violates foreign key constraint "fk_29cc7a26_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29ceeee6_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || ACTY_COD || NMONTH) as value FROM livemantim WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livelabour" violates foreign key constraint "fk_29ceeee6_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29cd31a0_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON otherprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherprod" violates foreign key constraint "fk_29cd31a0_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29d0895e_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livemangrp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrp" violates foreign key constraint "fk_29d0895e_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29d1445c_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livemangrp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrp" violates foreign key constraint "fk_29d1445c_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29d207b6_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livemangrptim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || ACTY_COD) as value FROM livemangrp WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrptim" violates foreign key constraint "fk_29d207b6_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_livemangrptim_periods BEFORE INSERT ON livemangrptim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrptim" violates foreign key constraint "fk_livemangrptim_periods"') END; END;
CREATE TRIGGER INS_fk_29d2d448_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livemangrplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || ACTY_COD || NMONTH) as value FROM livemangrptim WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabour" violates foreign key constraint "fk_29d2d448_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_29d3b700_bced_11e0_9e78_58946b4c242c BEFORE INSERT ON livemangrplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabour" violates foreign key constraint "fk_29d3b700_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_4436dbf6_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON farmassets FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "farmassets" violates foreign key constraint "fk_4436dbf6_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_4437140e_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON otherhhcp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhcp" violates foreign key constraint "fk_4437140e_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44374c1c_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON otherhhexp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhexp" violates foreign key constraint "fk_44374c1c_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44378808_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON otherincome FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherincome" violates foreign key constraint "fk_44378808_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44360668_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON otherman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherman" violates foreign key constraint "fk_44360668_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44363a70_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON otherman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherman" violates foreign key constraint "fk_44363a70_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_44366db0_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON othermantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || ACTY_COD) as value FROM otherman WHERE SYS_COD = NEW.SYS_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "othermantim" violates foreign key constraint "fk_44366db0_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_othermantim_periods BEFORE INSERT ON othermantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "othermantim" violates foreign key constraint "fk_othermantim_periods"') END; END;
CREATE TRIGGER INS_fk_4436a456_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON otherlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherlabour" violates foreign key constraint "fk_4436a456_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_4437c516_bcf5_11e0_9e78_58946b4c242c BEFORE INSERT ON otherlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || ACTY_COD || NMONTH) as value FROM othermantim WHERE SYS_COD = NEW.SYS_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "otherlabour" violates foreign key constraint "fk_4437c516_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee3ece80_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvst FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvst" violates foreign key constraint "fk_ee3ece80_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee3f5dd2_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvst FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD || PROD_COD) as value FROM lvproducts WHERE LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvst" violates foreign key constraint "fk_ee3f5dd2_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee3fe626_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvsttim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttim" violates foreign key constraint "fk_ee3fe626_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_livehvsttim_periods BEFORE INSERT ON livehvsttim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttim" violates foreign key constraint "fk_livehvsttim_periods"') END; END;
CREATE TRIGGER INS_fk_ee4080b8_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || NMONTH) as value FROM livehvsttim WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstlabour" violates foreign key constraint "fk_ee4080b8_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee4120e0_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstlabour" violates foreign key constraint "fk_ee4120e0_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee41c09a_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsold" violates foreign key constraint "fk_ee41c09a_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee426bb2_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsold" violates foreign key constraint "fk_ee426bb2_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_livehvstcat_livehvst1 BEFORE INSERT ON livehvstcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstcat" violates foreign key constraint "fk_livehvstcat_livehvst1"') END; END;
CREATE TRIGGER INS_fk_livehvsttimcat_livehvstcat1 BEFORE INSERT ON livehvsttimcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD) as value FROM livehvstcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttimcat" violates foreign key constraint "fk_livehvsttimcat_livehvstcat1"') END; END;
CREATE TRIGGER INS_fk_livehvsttimcat_periods1 BEFORE INSERT ON livehvsttimcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttimcat" violates foreign key constraint "fk_livehvsttimcat_periods1"') END; END;
CREATE TRIGGER INS_fk_ee43d100_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstsoldcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD) as value FROM livehvstcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcat" violates foreign key constraint "fk_ee43d100_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee4490b8_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstsoldcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcat" violates foreign key constraint "fk_ee4490b8_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee454b02_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeed" violates foreign key constraint "fk_ee454b02_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_ee4617da_bcf8_11e0_948f_58946b4c242c BEFORE INSERT ON livehvstfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.FLIVE_ICOD AND GROUP_COD = NEW.FGROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeed" violates foreign key constraint "fk_ee4617da_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_4240db80_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheaplvprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheaplvprod" violates foreign key constraint "fk_4240db80_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_42417cf2_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheaplvprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheaplvprod" violates foreign key constraint "fk_42417cf2_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_42422850_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapprods" violates foreign key constraint "fk_42422850_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_4242d584_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapaddprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapaddprods" violates foreign key constraint "fk_4242d584_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_42438ace_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapaddprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM mnrheapprods WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapaddprods" violates foreign key constraint "fk_42438ace_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_42444a54_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsold" violates foreign key constraint "fk_42444a54_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_42450cc8_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsold" violates foreign key constraint "fk_42450cc8_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_4245d9a0_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeed" violates foreign key constraint "fk_4245d9a0_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_4246acfe_bcfa_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeed" violates foreign key constraint "fk_4246acfe_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81de4dee_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapcrpprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpprod" violates foreign key constraint "fk_81de4dee_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81df0784_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapcrpprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpprod" violates foreign key constraint "fk_81df0784_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81dfd6dc_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapcrpfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpfora" violates foreign key constraint "fk_81dfd6dc_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e0a60c_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapcrpfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpfora" violates foreign key constraint "fk_81e0a60c_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e18ba8_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapgrassprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassprod" violates foreign key constraint "fk_81e18ba8_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e26a96_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapgrassprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassprod" violates foreign key constraint "fk_81e26a96_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e35b04_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapgrassfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassfora" violates foreign key constraint "fk_81e35b04_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e44a64_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapgrassfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassfora" violates foreign key constraint "fk_81e44a64_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e549e6_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapvegprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegprod" violates foreign key constraint "fk_81e549e6_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e64d8c_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapvegprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegprod" violates foreign key constraint "fk_81e64d8c_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e7808a_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapvegfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegfora" violates foreign key constraint "fk_81e7808a_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_81e8dec6_bcfb_11e0_b883_58946b4c242c BEFORE INSERT ON mnrheapvegfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegfora" violates foreign key constraint "fk_81e8dec6_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER INS_fk_systemperiod_system1 BEFORE INSERT ON systemperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "systemperiods" violates foreign key constraint "fk_systemperiod_system1"') END; END;
CREATE TRIGGER INS_fk_systemperiod_periods1 BEFORE INSERT ON systemperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "systemperiods" violates foreign key constraint "fk_systemperiod_periods1"') END; END;
CREATE TRIGGER INS_fk_table1_labforce1 BEFORE INSERT ON labforceperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "labforceperiods" violates foreign key constraint "fk_table1_labforce1"') END; END;
CREATE TRIGGER INS_fk_table1_periods1 BEFORE INSERT ON labforceperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "labforceperiods" violates foreign key constraint "fk_table1_periods1"') END; END;
CREATE TRIGGER INS_fk_lvstosysperiods_lvstosys1 BEFORE INSERT ON lvstosysperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosysperiods" violates foreign key constraint "fk_lvstosysperiods_lvstosys1"') END; END;
CREATE TRIGGER INS_fk_lvstosysperiods_periods1 BEFORE INSERT ON lvstosysperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosysperiods" violates foreign key constraint "fk_lvstosysperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_plotseasonsperiods_plotseasons1 BEFORE INSERT ON plotseasonsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON) as value FROM plotseasons WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON) IS NULL) THEN RAISE(ABORT, 'insert on table "plotseasonsperiods" violates foreign key constraint "fk_plotseasonsperiods_plotseasons1"') END; END;
CREATE TRIGGER INS_fk_plotseasonsperiods_periods1 BEFORE INSERT ON plotseasonsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "plotseasonsperiods" violates foreign key constraint "fk_plotseasonsperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_owneduseperiods_owneduse1 BEFORE INSERT ON owneduseperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduseperiods" violates foreign key constraint "fk_owneduseperiods_owneduse1"') END; END;
CREATE TRIGGER INS_fk_owneduseperiods_periods1 BEFORE INSERT ON owneduseperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduseperiods" violates foreign key constraint "fk_owneduseperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_ownusedvperiods_ownusedv1 BEFORE INSERT ON ownusedvperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD) as value FROM ownusedv WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvperiods" violates foreign key constraint "fk_ownusedvperiods_ownusedv1"') END; END;
CREATE TRIGGER INS_fk_ownusedvperiods_periods1 BEFORE INSERT ON ownusedvperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvperiods" violates foreign key constraint "fk_ownusedvperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_cropmanperiods_cropman1 BEFORE INSERT ON cropmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanperiods" violates foreign key constraint "fk_cropmanperiods_cropman1"') END; END;
CREATE TRIGGER INS_fk_cropmanperiods_periods1 BEFORE INSERT ON cropmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanperiods" violates foreign key constraint "fk_cropmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_cropmanprchfertperiods_cropmanprchfert1 BEFORE INSERT ON cropmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FERTYP_COD) as value FROM cropmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfertperiods" violates foreign key constraint "fk_cropmanprchfertperiods_cropmanprchfert1"') END; END;
CREATE TRIGGER INS_fk_cropmanprchfertperiods_periods1 BEFORE INSERT ON cropmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfertperiods" violates foreign key constraint "fk_cropmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_crpprodmansoldperiods_crpprodmansold1 BEFORE INSERT ON crpprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD || MARK_COD) as value FROM crpprodmansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansoldperiods" violates foreign key constraint "fk_crpprodmansoldperiods_crpprodmansold1"') END; END;
CREATE TRIGGER INS_fk_crpprodmansoldperiods_periods1 BEFORE INSERT ON crpprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansoldperiods" violates foreign key constraint "fk_crpprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_crpprodmanperiods_crpprodman1 BEFORE INSERT ON crpprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanperiods" violates foreign key constraint "fk_crpprodmanperiods_crpprodman1"') END; END;
CREATE TRIGGER INS_fk_crpprodmanperiods_periods1 BEFORE INSERT ON crpprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanperiods" violates foreign key constraint "fk_crpprodmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_crpforamanperiods_crpforaman1 BEFORE INSERT ON crpforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanperiods" violates foreign key constraint "fk_crpforamanperiods_crpforaman1"') END; END;
CREATE TRIGGER INS_fk_crpforamanperiods_periods1 BEFORE INSERT ON crpforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanperiods" violates foreign key constraint "fk_crpforamanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_crpforamansoldperiods_crpforamansold1 BEFORE INSERT ON crpforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD || MARK_COD) as value FROM crpforamansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansoldperiods" violates foreign key constraint "fk_crpforamansoldperiods_crpforamansold1"') END; END;
CREATE TRIGGER INS_fk_crpforamansoldperiods_periods1 BEFORE INSERT ON crpforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansoldperiods" violates foreign key constraint "fk_crpforamansoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegmanperiods_vegman1 BEFORE INSERT ON vegmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanperiods" violates foreign key constraint "fk_vegmanperiods_vegman1"') END; END;
CREATE TRIGGER INS_fk_vegmanperiods_periods1 BEFORE INSERT ON vegmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanperiods" violates foreign key constraint "fk_vegmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegmanprchfertperiods_vegmanprchfert1 BEFORE INSERT ON vegmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FERTYP_COD) as value FROM vegmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfertperiods" violates foreign key constraint "fk_vegmanprchfertperiods_vegmanprchfert1"') END; END;
CREATE TRIGGER INS_fk_vegmanprchfertperiods_periods1 BEFORE INSERT ON vegmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfertperiods" violates foreign key constraint "fk_vegmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegprodmanperiods_vegprodman1 BEFORE INSERT ON vegprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanperiods" violates foreign key constraint "fk_vegprodmanperiods_vegprodman1"') END; END;
CREATE TRIGGER INS_fk_vegprodmanperiods_periods1 BEFORE INSERT ON vegprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanperiods" violates foreign key constraint "fk_vegprodmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegprodmansoldperiods_vegprodmansold1 BEFORE INSERT ON vegprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD || MARK_COD) as value FROM vegprodmansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansoldperiods" violates foreign key constraint "fk_vegprodmansoldperiods_vegprodmansold1"') END; END;
CREATE TRIGGER INS_fk_vegprodmansoldperiods_periods1 BEFORE INSERT ON vegprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansoldperiods" violates foreign key constraint "fk_vegprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegforamanperiods_vegforaman1 BEFORE INSERT ON vegforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanperiods" violates foreign key constraint "fk_vegforamanperiods_vegforaman1"') END; END;
CREATE TRIGGER INS_fk_vegforamanperiods_periods1 BEFORE INSERT ON vegforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanperiods" violates foreign key constraint "fk_vegforamanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegforamansoldperiods_vegforamansold1 BEFORE INSERT ON vegforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD || MARK_COD) as value FROM vegforamansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansoldperiods" violates foreign key constraint "fk_vegforamansoldperiods_vegforamansold1"') END; END;
CREATE TRIGGER INS_fk_vegforamansoldperiods_periods1 BEFORE INSERT ON vegforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansoldperiods" violates foreign key constraint "fk_vegforamansoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassmanperiods_grassman1 BEFORE INSERT ON grassmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanperiods" violates foreign key constraint "fk_grassmanperiods_grassman1"') END; END;
CREATE TRIGGER INS_fk_grassmanperiods_periods1 BEFORE INSERT ON grassmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanperiods" violates foreign key constraint "fk_grassmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassmanprchfertperiods_grassmanprchfert1 BEFORE INSERT ON grassmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FERTYP_COD) as value FROM grassmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfertperiods" violates foreign key constraint "fk_grassmanprchfertperiods_grassmanprchfert1"') END; END;
CREATE TRIGGER INS_fk_grassmanprchfertperiods_periods1 BEFORE INSERT ON grassmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfertperiods" violates foreign key constraint "fk_grassmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassprodmanperiods_grassprodman1 BEFORE INSERT ON grassprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanperiods" violates foreign key constraint "fk_grassprodmanperiods_grassprodman1"') END; END;
CREATE TRIGGER INS_fk_grassprodmanperiods_periods1 BEFORE INSERT ON grassprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanperiods" violates foreign key constraint "fk_grassprodmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassprodmansoldperiods_grassprodmansold1 BEFORE INSERT ON grassprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD || MARK_COD) as value FROM grassprodmansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansoldperiods" violates foreign key constraint "fk_grassprodmansoldperiods_grassprodmansold1"') END; END;
CREATE TRIGGER INS_fk_grassprodmansoldperiods_periods1 BEFORE INSERT ON grassprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansoldperiods" violates foreign key constraint "fk_grassprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassforamanperiods_grassforaman1 BEFORE INSERT ON grassforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanperiods" violates foreign key constraint "fk_grassforamanperiods_grassforaman1"') END; END;
CREATE TRIGGER INS_fk_grassforamanperiods_periods1 BEFORE INSERT ON grassforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanperiods" violates foreign key constraint "fk_grassforamanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassforamansoldperiods_grassforamansold1 BEFORE INSERT ON grassforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD || MARK_COD) as value FROM grassforamansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansoldperiods" violates foreign key constraint "fk_grassforamansoldperiods_grassforamansold1"') END; END;
CREATE TRIGGER INS_fk_grassforamansoldperiods_periods1 BEFORE INSERT ON grassforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansoldperiods" violates foreign key constraint "fk_grassforamansoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_liveavailresperiods_liveavailres1 BEFORE INSERT ON liveavailresperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || FEED_COD) as value FROM liveavailres WHERE SYS_COD = NEW.SYS_COD AND FEED_COD = NEW.FEED_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailresperiods" violates foreign key constraint "fk_liveavailresperiods_liveavailres1"') END; END;
CREATE TRIGGER INS_fk_liveavailresperiods_periods1 BEFORE INSERT ON liveavailresperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailresperiods" violates foreign key constraint "fk_liveavailresperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_stallfeeprchperiods_stallfeeprch1 BEFORE INSERT ON stallfeeprchperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || FEED_COD || LIVE_ICOD || GROUP_COD) as value FROM stallfeeprch WHERE SYS_COD = NEW.SYS_COD AND FEED_COD = NEW.FEED_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprchperiods" violates foreign key constraint "fk_stallfeeprchperiods_stallfeeprch1"') END; END;
CREATE TRIGGER INS_fk_stallfeeprchperiods_periods1 BEFORE INSERT ON stallfeeprchperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprchperiods" violates foreign key constraint "fk_stallfeeprchperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_livegroupsperiods_livegroups1 BEFORE INSERT ON livegroupsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || HERD_COD) as value FROM livegroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livegroupsperiods" violates foreign key constraint "fk_livegroupsperiods_livegroups1"') END; END;
CREATE TRIGGER INS_fk_livegroupsperiods_periods1 BEFORE INSERT ON livegroupsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livegroupsperiods" violates foreign key constraint "fk_livegroupsperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grazingmanperiods_grazingman1 BEFORE INSERT ON grazingmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || LIVE_ICOD || GROUP_COD) as value FROM grazingman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingmanperiods" violates foreign key constraint "fk_grazingmanperiods_grazingman1"') END; END;
CREATE TRIGGER INS_fk_grazingmanperiods_periods1 BEFORE INSERT ON grazingmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingmanperiods" violates foreign key constraint "fk_grazingmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_crpprodmanfeedperiods_crpprodmanfeed1 BEFORE INSERT ON crpprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD || LIVE_ICOD || GROUP_COD) as value FROM crpprodmanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeedperiods" violates foreign key constraint "fk_crpprodmanfeedperiods_crpprodmanfeed1"') END; END;
CREATE TRIGGER INS_fk_crpprodmanfeedperiods_periods1 BEFORE INSERT ON crpprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeedperiods" violates foreign key constraint "fk_crpprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_crpforamanfeedperiods_crpforamanfeed1 BEFORE INSERT ON crpforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD || LIVE_ICOD || GROUP_COD) as value FROM crpforamanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeedperiods" violates foreign key constraint "fk_crpforamanfeedperiods_crpforamanfeed1"') END; END;
CREATE TRIGGER INS_fk_crpforamanfeedperiods_periods1 BEFORE INSERT ON crpforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeedperiods" violates foreign key constraint "fk_crpforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegprodmanfeedperiods_vegprodmanfeed1 BEFORE INSERT ON vegprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD || LIVE_ICOD || GROUP_COD) as value FROM vegprodmanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeedperiods" violates foreign key constraint "fk_vegprodmanfeedperiods_vegprodmanfeed1"') END; END;
CREATE TRIGGER INS_fk_vegprodmanfeedperiods_periods1 BEFORE INSERT ON vegprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeedperiods" violates foreign key constraint "fk_vegprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_vegforamanfeedperiods_vegforamanfeed1 BEFORE INSERT ON vegforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD || LIVE_ICOD || GROUP_COD) as value FROM vegforamanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeedperiods" violates foreign key constraint "fk_vegforamanfeedperiods_vegforamanfeed1"') END; END;
CREATE TRIGGER INS_fk_vegforamanfeedperiods_periods1 BEFORE INSERT ON vegforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeedperiods" violates foreign key constraint "fk_vegforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassprodmanfeedperiods_grassprodmanfeed1 BEFORE INSERT ON grassprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD || LIVE_ICOD || GROUP_COD) as value FROM grassprodmanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeedperiods" violates foreign key constraint "fk_grassprodmanfeedperiods_grassprodmanfeed1"') END; END;
CREATE TRIGGER INS_fk_grassprodmanfeedperiods_periods1 BEFORE INSERT ON grassprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeedperiods" violates foreign key constraint "fk_grassprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grassforamanfeedperiods_grassforamanfeed1 BEFORE INSERT ON grassforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD || LIVE_ICOD || GROUP_COD) as value FROM grassforamanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeedperiods" violates foreign key constraint "fk_grassforamanfeedperiods_grassforamanfeed1"') END; END;
CREATE TRIGGER INS_fk_grassforamanfeedperiods_periods1 BEFORE INSERT ON grassforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeedperiods" violates foreign key constraint "fk_grassforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_otherprodperiods_otherprod1 BEFORE INSERT ON otherprodperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || PROD_COD) as value FROM otherprod WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherprodperiods" violates foreign key constraint "fk_otherprodperiods_otherprod1"') END; END;
CREATE TRIGGER INS_fk_otherprodperiods_periods1 BEFORE INSERT ON otherprodperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherprodperiods" violates foreign key constraint "fk_otherprodperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_otherhhcpperiods_otherhhcp1 BEFORE INSERT ON otherhhcpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM otherhhcp WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhcpperiods" violates foreign key constraint "fk_otherhhcpperiods_otherhhcp1"') END; END;
CREATE TRIGGER INS_fk_otherhhcpperiods_periods1 BEFORE INSERT ON otherhhcpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhcpperiods" violates foreign key constraint "fk_otherhhcpperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_otherhhexpperiods_otherhhexp1 BEFORE INSERT ON otherhhexpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM otherhhexp WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhexpperiods" violates foreign key constraint "fk_otherhhexpperiods_otherhhexp1"') END; END;
CREATE TRIGGER INS_fk_otherhhexpperiods_periods1 BEFORE INSERT ON otherhhexpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhexpperiods" violates foreign key constraint "fk_otherhhexpperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_otherincomeperiods_otherincome1 BEFORE INSERT ON otherincomeperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM otherincome WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherincomeperiods" violates foreign key constraint "fk_otherincomeperiods_otherincome1"') END; END;
CREATE TRIGGER INS_fk_otherincomeperiods_periods1 BEFORE INSERT ON otherincomeperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherincomeperiods" violates foreign key constraint "fk_otherincomeperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_livehvstperiods_livehvst1 BEFORE INSERT ON livehvstperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstperiods" violates foreign key constraint "fk_livehvstperiods_livehvst1"') END; END;
CREATE TRIGGER INS_fk_livehvstperiods_periods1 BEFORE INSERT ON livehvstperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstperiods" violates foreign key constraint "fk_livehvstperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_livehvstfeedperiods_livehvstfeed1 BEFORE INSERT ON livehvstfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || FLIVE_ICOD || FGROUP_COD) as value FROM livehvstfeed WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND FLIVE_ICOD = NEW.FLIVE_ICOD AND FGROUP_COD = NEW.FGROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeedperiods" violates foreign key constraint "fk_livehvstfeedperiods_livehvstfeed1"') END; END;
CREATE TRIGGER INS_fk_livehvstfeedperiods_periods1 BEFORE INSERT ON livehvstfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeedperiods" violates foreign key constraint "fk_livehvstfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_livehvstsoldperiods_livehvstsold1 BEFORE INSERT ON livehvstsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || MARK_COD) as value FROM livehvstsold WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldperiods" violates foreign key constraint "fk_livehvstsoldperiods_livehvstsold1"') END; END;
CREATE TRIGGER INS_fk_livehvstsoldperiods_periods1 BEFORE INSERT ON livehvstsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldperiods" violates foreign key constraint "fk_livehvstsoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_livehvstsoldcatperiods_livehvstsoldcat1 BEFORE INSERT ON livehvstsoldcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD || MARK_COD) as value FROM livehvstsoldcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcatperiods" violates foreign key constraint "fk_livehvstsoldcatperiods_livehvstsoldcat1"') END; END;
CREATE TRIGGER INS_fk_livehvstsoldcatperiods_periods1 BEFORE INSERT ON livehvstsoldcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcatperiods" violates foreign key constraint "fk_livehvstsoldcatperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_mnrheapfeedperiods_mnrheapfeed1 BEFORE INSERT ON mnrheapfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD || LIVE_ICOD || GROUP_COD) as value FROM mnrheapfeed WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeedperiods" violates foreign key constraint "fk_mnrheapfeedperiods_mnrheapfeed1"') END; END;
CREATE TRIGGER INS_fk_mnrheapfeedperiods_periods1 BEFORE INSERT ON mnrheapfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeedperiods" violates foreign key constraint "fk_mnrheapfeedperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_mnrheapprodsperiods_mnrheapprods1 BEFORE INSERT ON mnrheapprodsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM mnrheapprods WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapprodsperiods" violates foreign key constraint "fk_mnrheapprodsperiods_mnrheapprods1"') END; END;
CREATE TRIGGER INS_fk_mnrheapprodsperiods_periods1 BEFORE INSERT ON mnrheapprodsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapprodsperiods" violates foreign key constraint "fk_mnrheapprodsperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_mnrheapsoldperiods_mnrheapsold1 BEFORE INSERT ON mnrheapsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD || MARK_COD) as value FROM mnrheapsold WHERE SYS_COD = NEW.mnrheapsold_SYS_COD AND HEAP_COD = NEW.mnrheapsold_HEAP_COD AND MARK_COD = NEW.mnrheapsold_MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsoldperiods" violates foreign key constraint "fk_mnrheapsoldperiods_mnrheapsold1"') END; END;
CREATE TRIGGER INS_fk_mnrheapsoldperiods_periods1 BEFORE INSERT ON mnrheapsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsoldperiods" violates foreign key constraint "fk_mnrheapsoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_owneduselabour_owneduse1 BEFORE INSERT ON owneduselabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduselabour" violates foreign key constraint "fk_owneduselabour_owneduse1"') END; END;
CREATE TRIGGER INS_fk_owneduselabour_labforce1 BEFORE INSERT ON owneduselabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduselabour" violates foreign key constraint "fk_owneduselabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_plotpaddspelabour_plotpaddspe1 BEFORE INSERT ON plotpaddspelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspelabour" violates foreign key constraint "fk_plotpaddspelabour_plotpaddspe1"') END; END;
CREATE TRIGGER INS_fk_plotpaddspelabour_labforce1 BEFORE INSERT ON plotpaddspelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspelabour" violates foreign key constraint "fk_plotpaddspelabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_ownusedvlabour_ownusedv1 BEFORE INSERT ON ownusedvlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD) as value FROM ownusedv WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvlabour" violates foreign key constraint "fk_ownusedvlabour_ownusedv1"') END; END;
CREATE TRIGGER INS_fk_ownusedvlabour_labforce1 BEFORE INSERT ON ownusedvlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvlabour" violates foreign key constraint "fk_ownusedvlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_cropmanlabour_cropman1 BEFORE INSERT ON cropmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanlabour" violates foreign key constraint "fk_cropmanlabour_cropman1"') END; END;
CREATE TRIGGER INS_fk_cropmanlabour_labforce1 BEFORE INSERT ON cropmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanlabour" violates foreign key constraint "fk_cropmanlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_vegmanlabour_vegman1 BEFORE INSERT ON vegmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanlabour" violates foreign key constraint "fk_vegmanlabour_vegman1"') END; END;
CREATE TRIGGER INS_fk_vegmanlabour_labforce1 BEFORE INSERT ON vegmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanlabour" violates foreign key constraint "fk_vegmanlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_grassmanlabour_grassman1 BEFORE INSERT ON grassmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanlabour" violates foreign key constraint "fk_grassmanlabour_grassman1"') END; END;
CREATE TRIGGER INS_fk_grassmanlabour_labforce1 BEFORE INSERT ON grassmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanlabour" violates foreign key constraint "fk_grassmanlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_lvstosyslabour_lvstosys1 BEFORE INSERT ON lvstosyslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosyslabour" violates foreign key constraint "fk_lvstosyslabour_lvstosys1"') END; END;
CREATE TRIGGER INS_fk_lvstosyslabour_labforce1 BEFORE INSERT ON lvstosyslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosyslabour" violates foreign key constraint "fk_lvstosyslabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_feedgroupslabour_feedgroups1 BEFORE INSERT ON feedgroupslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "feedgroupslabour" violates foreign key constraint "fk_feedgroupslabour_feedgroups1"') END; END;
CREATE TRIGGER INS_fk_feedgroupslabour_labforce1 BEFORE INSERT ON feedgroupslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "feedgroupslabour" violates foreign key constraint "fk_feedgroupslabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_lvstosysherdstr_lvstosys1 BEFORE INSERT ON lvstosysherdstr FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosysherdstr" violates foreign key constraint "fk_lvstosysherdstr_lvstosys1"') END; END;
CREATE TRIGGER INS_fk_livemanlabour_liveman1 BEFORE INSERT ON livemanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || ACTY_COD) as value FROM liveman WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemanlabour" violates foreign key constraint "fk_livemanlabour_liveman1"') END; END;
CREATE TRIGGER INS_fk_livemanlabour_labforce1 BEFORE INSERT ON livemanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemanlabour" violates foreign key constraint "fk_livemanlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_table1_livemangrp1 BEFORE INSERT ON livemangrplabourB FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || ACTY_COD) as value FROM livemangrp WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabourB" violates foreign key constraint "fk_table1_livemangrp1"') END; END;
CREATE TRIGGER INS_fk_livemangrplabourB_labforce1 BEFORE INSERT ON livemangrplabourB FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabourB" violates foreign key constraint "fk_livemangrplabourB_labforce1"') END; END;
CREATE TRIGGER INS_fk_othermanlabour_otherman1 BEFORE INSERT ON othermanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || ACTY_COD) as value FROM otherman WHERE SYS_COD = NEW.SYS_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "othermanlabour" violates foreign key constraint "fk_othermanlabour_otherman1"') END; END;
CREATE TRIGGER INS_fk_othermanlabour_labforce1 BEFORE INSERT ON othermanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "othermanlabour" violates foreign key constraint "fk_othermanlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_moduletree_moduletree1 BEFORE INSERT ON moduletree FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.parent_module IS NOT NULL) AND ((SELECT (module_id) as value FROM moduletree WHERE module_id = NEW.parent_module) IS NULL)) THEN RAISE(ABORT, 'insert on table "moduletree" violates foreign key constraint "fk_moduletree_moduletree1"') END; END;
CREATE TRIGGER INS_fk_sysmodulenotes_system1 BEFORE INSERT ON sysmodulenotes FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "sysmodulenotes" violates foreign key constraint "fk_sysmodulenotes_system1"') END; END;
CREATE TRIGGER INS_fk_livehvstcatperiods_livehvstcat1 BEFORE INSERT ON livehvstcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD) as value FROM livehvstcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstcatperiods" violates foreign key constraint "fk_livehvstcatperiods_livehvstcat1"') END; END;
CREATE TRIGGER INS_fk_livehvstcatperiods_periods1 BEFORE INSERT ON livehvstcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstcatperiods" violates foreign key constraint "fk_livehvstcatperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_plotman_spadstown1 BEFORE INSERT ON plotman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotman" violates foreign key constraint "fk_plotman_spadstown1"') END; END;
CREATE TRIGGER INS_fk_plotman_activity1 BEFORE INSERT ON plotman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotman" violates foreign key constraint "fk_plotman_activity1"') END; END;
CREATE TRIGGER INS_fk_plotmanperiods_plotman1 BEFORE INSERT ON plotmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanperiods" violates foreign key constraint "fk_plotmanperiods_plotman1"') END; END;
CREATE TRIGGER INS_fk_plotmanperiods_periods1 BEFORE INSERT ON plotmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanperiods" violates foreign key constraint "fk_plotmanperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_3df7044a_bce2_11e0_a5d9_58946b4c242c0 BEFORE INSERT ON plotmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "plotmantim" violates foreign key constraint "fk_3df7044a_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER INS_fk_plotmantim_periods10 BEFORE INSERT ON plotmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmantim" violates foreign key constraint "fk_plotmantim_periods10"') END; END;
CREATE TRIGGER INS_fk_plotman_plotmantim BEFORE INSERT ON plotmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmantim" violates foreign key constraint "fk_plotman_plotmantim"') END; END;
CREATE TRIGGER INS_fk_plotlabour_plotmantim1 BEFORE INSERT ON plotlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || NMONTH) as value FROM plotmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotlabour" violates foreign key constraint "fk_plotlabour_plotmantim1"') END; END;
CREATE TRIGGER INS_fk_plotlabour_labforce1 BEFORE INSERT ON plotlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotlabour" violates foreign key constraint "fk_plotlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c0 BEFORE INSERT ON plotmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanfert" violates foreign key constraint "fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER INS_fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c0 BEFORE INSERT ON plotmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "plotmanfert" violates foreign key constraint "fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER INS_fk_plotmanfert_plotmantim1 BEFORE INSERT ON plotmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || NMONTH) as value FROM plotmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanfert" violates foreign key constraint "fk_plotmanfert_plotmantim1"') END; END;
CREATE TRIGGER INS_fk_plotmanprchfert_plotman1 BEFORE INSERT ON plotmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfert" violates foreign key constraint "fk_plotmanprchfert_plotman1"') END; END;
CREATE TRIGGER INS_fk_plotmanprchfert_ferttype1 BEFORE INSERT ON plotmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfert" violates foreign key constraint "fk_plotmanprchfert_ferttype1"') END; END;
CREATE TRIGGER INS_fk_plotmanprchfertperiods_plotmanprchfert1 BEFORE INSERT ON plotmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || FERTYP_COD) as value FROM plotmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfertperiods" violates foreign key constraint "fk_plotmanprchfertperiods_plotmanprchfert1"') END; END;
CREATE TRIGGER INS_fk_plotmanprchfertperiods_periods1 BEFORE INSERT ON plotmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfertperiods" violates foreign key constraint "fk_plotmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_plotmanlabour_plotman1 BEFORE INSERT ON plotmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanlabour" violates foreign key constraint "fk_plotmanlabour_plotman1"') END; END;
CREATE TRIGGER INS_fk_plotmanlabour_labforce1 BEFORE INSERT ON plotmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanlabour" violates foreign key constraint "fk_plotmanlabour_labforce1"') END; END;
CREATE TRIGGER INS_fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c0 BEFORE INSERT ON plotmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || NMONTH) as value FROM plotmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanheap" violates foreign key constraint "fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER INS_fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c0 BEFORE INSERT ON plotmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanheap" violates foreign key constraint "fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER INS_fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c0 BEFORE INSERT ON plotmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "plotmanheap" violates foreign key constraint "fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodsprod_system1 BEFORE INSERT ON grpcrpprodsprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodsprod" violates foreign key constraint "fk_grpcrpprodsprod_system1"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodsprod_cropprods1 BEFORE INSERT ON grpcrpprodsprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || PROD_COD) as value FROM cropprods WHERE CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodsprod" violates foreign key constraint "fk_grpcrpprodsprod_cropprods1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforaprod_system1 BEFORE INSERT ON grpcrpforaprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforaprod" violates foreign key constraint "fk_grpcrpforaprod_system1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforaprod_cropfora1 BEFORE INSERT ON grpcrpforaprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM cropfora WHERE CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforaprod" violates foreign key constraint "fk_grpcrpforaprod_cropfora1"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodssold_grpcrpprodsprod1 BEFORE INSERT ON grpcrpprodssold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || PROD_COD) as value FROM grpcrpprodsprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssold" violates foreign key constraint "fk_grpcrpprodssold_grpcrpprodsprod1"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodssold_markoutlet1 BEFORE INSERT ON grpcrpprodssold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssold" violates foreign key constraint "fk_grpcrpprodssold_markoutlet1"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodssoldperiods_grpcrpprodssold1 BEFORE INSERT ON grpcrpprodssoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || PROD_COD || MARK_COD) as value FROM grpcrpprodssold WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssoldperiods" violates foreign key constraint "fk_grpcrpprodssoldperiods_grpcrpprodssold1"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodssoldperiods_periods1 BEFORE INSERT ON grpcrpprodssoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssoldperiods" violates foreign key constraint "fk_grpcrpprodssoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforasold_grpcrpforaprod1 BEFORE INSERT ON grpcrpforasold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || FORA_COD) as value FROM grpcrpforaprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasold" violates foreign key constraint "fk_grpcrpforasold_grpcrpforaprod1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforasold_markoutlet1 BEFORE INSERT ON grpcrpforasold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasold" violates foreign key constraint "fk_grpcrpforasold_markoutlet1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforasoldperiods_grpcrpforasold1 BEFORE INSERT ON grpcrpforasoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || FORA_COD || MARK_COD) as value FROM grpcrpforasold WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasoldperiods" violates foreign key constraint "fk_grpcrpforasoldperiods_grpcrpforasold1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforasoldperiods_periods1 BEFORE INSERT ON grpcrpforasoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasoldperiods" violates foreign key constraint "fk_grpcrpforasoldperiods_periods1"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodscons_grpcrpprodsprod1 BEFORE INSERT ON grpcrpprodscons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || PROD_COD) as value FROM grpcrpprodsprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodscons" violates foreign key constraint "fk_grpcrpprodscons_grpcrpprodsprod1"') END; END;
CREATE TRIGGER INS_fk_grpcrpprodscons_periods1 BEFORE INSERT ON grpcrpprodscons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodscons" violates foreign key constraint "fk_grpcrpprodscons_periods1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforacons_grpcrpforaprod1 BEFORE INSERT ON grpcrpforacons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || FORA_COD) as value FROM grpcrpforaprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforacons" violates foreign key constraint "fk_grpcrpforacons_grpcrpforaprod1"') END; END;
CREATE TRIGGER INS_fk_grpcrpforacons_periods1 BEFORE INSERT ON grpcrpforacons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforacons" violates foreign key constraint "fk_grpcrpforacons_periods1"') END; END;
-- UPDATE triggers
CREATE TRIGGER UPD_fk_e688edd2_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.UNIT_COD IS NOT NULL) AND ((SELECT (UNIT_COD) as value FROM actyunits WHERE UNIT_COD = NEW.UNIT_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "activity" violates foreign key constraint "fk_e688edd2_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e67e4fee_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "actymethods" violates foreign key constraint "fk_e67e4fee_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e680c62a_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropfora" violates foreign key constraint "fk_e680c62a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e6818d8a_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD) as value FROM forages WHERE FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropfora" violates foreign key constraint "fk_e6818d8a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e67f0178_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropprods" violates foreign key constraint "fk_e67f0178_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e67fbf1e_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM cpprods WHERE PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropprods" violates foreign key constraint "fk_e67fbf1e_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e6857184_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON lvproducts FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM livestoc WHERE LIVE_COD = NEW.LIVE_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvproducts" violates foreign key constraint "fk_e6857184_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e68642f8_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON lvproducts FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM products WHERE PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvproducts" violates foreign key constraint "fk_e68642f8_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e683dda6_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON pastfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastfora" violates foreign key constraint "fk_e683dda6_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e684a4ca_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON pastfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD) as value FROM forages WHERE FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastfora" violates foreign key constraint "fk_e684a4ca_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e6871a7a_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON systype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM livestoc WHERE LIVE_COD = NEW.LIVE_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "systype" violates foreign key constraint "fk_e6871a7a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e687f8dc_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON systype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "systype" violates foreign key constraint "fk_e687f8dc_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e6825a62_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON pastprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastprods" violates foreign key constraint "fk_e6825a62_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e6831844_bce0_11e0_a5d9_58946b4c242c BEFORE UPDATE ON pastprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM cpprods WHERE PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "pastprods" violates foreign key constraint "fk_e6831844_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04d77330_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON system FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYST_COD) as value FROM systype WHERE SYST_COD = NEW.SYST_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "system" violates foreign key constraint "fk_04d77330_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04d7e1e4_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON system FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CNTY_COD) as value FROM country WHERE CNTY_COD = NEW.CNTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "system" violates foreign key constraint "fk_04d7e1e4_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04d85584_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON labforce FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "labforce" violates foreign key constraint "fk_04d85584_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04d8cf32_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON spadstown FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "spadstown" violates foreign key constraint "fk_04d8cf32_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04d94dfe_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON spadstown FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.DRAIN_COD IS NOT NULL) AND ((SELECT (DRAIN_COD) as value FROM drainage WHERE DRAIN_COD = NEW.DRAIN_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "spadstown" violates foreign key constraint "fk_04d94dfe_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04d9d1f2_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON spadstown FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.SOIL_COD IS NOT NULL) AND ((SELECT (SOIL_COD) as value FROM soil WHERE SOIL_COD = NEW.SOIL_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "spadstown" violates foreign key constraint "fk_04d9d1f2_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04da5a28_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON lvstosys FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosys" violates foreign key constraint "fk_04da5a28_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04dae7f4_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON lvstosys FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM livestoc WHERE LIVE_COD = NEW.LIVE_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosys" violates foreign key constraint "fk_04dae7f4_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_04db798a_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON wellbeing FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "wellbeing" violates foreign key constraint "fk_04db798a_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e67546_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON plotseasons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotseasons" violates foreign key constraint "fk_91e67546_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e6ee40_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON owneduse FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduse" violates foreign key constraint "fk_91e6ee40_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e99cf8_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON owneduse FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON) as value FROM plotseasons WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduse" violates foreign key constraint "fk_91e99cf8_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e76a8c_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON ownusedv FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM crop WHERE CROP_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedv" violates foreign key constraint "fk_91e76a8c_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91ea399c_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON ownusedv FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedv" violates foreign key constraint "fk_91ea399c_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e602aa_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON plotgpspos FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotgpspos" violates foreign key constraint "fk_91e602aa_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e7eec6_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON plotpaddoks FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddoks" violates foreign key constraint "fk_91e7eec6_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e87a4e_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON plotpaddspe FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspe" violates foreign key constraint "fk_91e87a4e_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91eadcd0_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON plotpaddspe FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD) as value FROM plotpaddoks WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspe" violates foreign key constraint "fk_91eadcd0_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91e908ba_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON plotpaddspedt FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM pastures WHERE CROP_COD = NEW.CROPD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspedt" violates foreign key constraint "fk_91e908ba_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_91eb88ce_bce1_11e0_a5d9_58946b4c242c BEFORE UPDATE ON plotpaddspedt FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspedt" violates foreign key constraint "fk_91eb88ce_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3df4cb58_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropman" violates foreign key constraint "fk_3df4cb58_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3df553c0_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropman" violates foreign key constraint "fk_3df553c0_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3df5da52_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmantim" violates foreign key constraint "fk_3df5da52_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3df7044a_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "cropmantim" violates foreign key constraint "fk_3df7044a_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_cropmantim_periods1 BEFORE UPDATE ON cropmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmantim" violates foreign key constraint "fk_cropmantim_periods1"') END; END;
CREATE TRIGGER UPD_fk_3df79fae_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON croplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || NMONTH) as value FROM cropmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "croplabour" violates foreign key constraint "fk_3df79fae_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3df84800_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON croplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "croplabour" violates foreign key constraint "fk_3df84800_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3df8edbe_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || NMONTH) as value FROM cropmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanfert" violates foreign key constraint "fk_3df8edbe_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanfert" violates foreign key constraint "fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "cropmanfert" violates foreign key constraint "fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3dfaff5a_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfert" violates foreign key constraint "fk_3dfaff5a_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3dfbbdd2_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfert" violates foreign key constraint "fk_3dfbbdd2_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_42404990_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheap" violates foreign key constraint "fk_42404990_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || NMONTH) as value FROM cropmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanheap" violates foreign key constraint "fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanheap" violates foreign key constraint "fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c BEFORE UPDATE ON cropmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "cropmanheap" violates foreign key constraint "fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44bdd730_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodman" violates foreign key constraint "fk_44bdd730_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44be5f16_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD || CROP_COD) as value FROM cropprods WHERE PROD_COD = NEW.PROD_COD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodman" violates foreign key constraint "fk_44be5f16_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44bf621c_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "crpprodmantim" violates foreign key constraint "fk_44bf621c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44c1c25a_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmantim" violates foreign key constraint "fk_44c1c25a_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_crpprodmantim_periods BEFORE UPDATE ON crpprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmantim" violates foreign key constraint "fk_crpprodmantim_periods"') END; END;
CREATE TRIGGER UPD_fk_44bff0a6_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodlabour" violates foreign key constraint "fk_44bff0a6_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44c274f2_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD || NMONTH) as value FROM crpprodmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodlabour" violates foreign key constraint "fk_44c274f2_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44c0841c_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansold" violates foreign key constraint "fk_44c0841c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44c1269c_bce3_11e0_a317_58946b4c242c BEFORE UPDATE ON crpprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansold" violates foreign key constraint "fk_44c1269c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_322bba82_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforaman" violates foreign key constraint "fk_322bba82_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_322c6d1a_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD || CROP_COD) as value FROM cropfora WHERE FORA_COD = NEW.FORA_COD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforaman" violates foreign key constraint "fk_322c6d1a_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_322d0f86_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansold" violates foreign key constraint "fk_322d0f86_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_322da694_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansold" violates foreign key constraint "fk_322da694_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_322e3410_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamantim" violates foreign key constraint "fk_322e3410_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_322ed352_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "crpforamantim" violates foreign key constraint "fk_322ed352_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_crpforamantim_periods BEFORE UPDATE ON crpforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamantim" violates foreign key constraint "fk_crpforamantim_periods"') END; END;
CREATE TRIGGER UPD_fk_322f701e_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD || NMONTH) as value FROM crpforamantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforalabour" violates foreign key constraint "fk_322f701e_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_32302482_bce4_11e0_a317_58946b4c242c BEFORE UPDATE ON crpforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforalabour" violates foreign key constraint "fk_32302482_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_52042e10_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD) as value FROM ownusedv WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegman" violates foreign key constraint "fk_52042e10_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_5204c096_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegman" violates foreign key constraint "fk_5204c096_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_5205513c_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmantim" violates foreign key constraint "fk_5205513c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_5205f4de_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegmantim" violates foreign key constraint "fk_5205f4de_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_vegmantim_periods BEFORE UPDATE ON vegmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmantim" violates foreign key constraint "fk_vegmantim_periods"') END; END;
CREATE TRIGGER UPD_fk_520691fa_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON veglabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || NMONTH) as value FROM vegmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "veglabour" violates foreign key constraint "fk_520691fa_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_52073ee8_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON veglabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "veglabour" violates foreign key constraint "fk_52073ee8_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_5207e4e2_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || NMONTH) as value FROM vegmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanfert" violates foreign key constraint "fk_5207e4e2_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_52089d4c_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanfert" violates foreign key constraint "fk_52089d4c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_52094b84_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegmanfert" violates foreign key constraint "fk_52094b84_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_520a0204_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfert" violates foreign key constraint "fk_520a0204_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_520ac89c_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfert" violates foreign key constraint "fk_520ac89c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_520b8c82_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || NMONTH) as value FROM vegmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanheap" violates foreign key constraint "fk_520b8c82_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_520c5e14_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanheap" violates foreign key constraint "fk_520c5e14_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_520d2dbc_bce5_11e0_a317_58946b4c242c BEFORE UPDATE ON vegmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegmanheap" violates foreign key constraint "fk_520d2dbc_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_cce75930_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodman" violates foreign key constraint "fk_cce75930_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_cce7e5bc_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || PROD_COD) as value FROM cropprods WHERE CROP_COD = NEW.VEG_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodman" violates foreign key constraint "fk_cce7e5bc_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_cce86a32_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmantim" violates foreign key constraint "fk_cce86a32_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_cce900be_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegprodmantim" violates foreign key constraint "fk_cce900be_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_vegprodmantim_periods BEFORE UPDATE ON vegprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmantim" violates foreign key constraint "fk_vegprodmantim_periods"') END; END;
CREATE TRIGGER UPD_fk_cce990ec_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD || NMONTH) as value FROM vegprodmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodlabour" violates foreign key constraint "fk_cce990ec_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ccea3402_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodlabour" violates foreign key constraint "fk_ccea3402_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_cceacfc0_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansold" violates foreign key constraint "fk_cceacfc0_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_cceb82b2_bce6_11e0_a317_58946b4c242c BEFORE UPDATE ON vegprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansold" violates foreign key constraint "fk_cceb82b2_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_9ad2a85e_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforaman" violates foreign key constraint "fk_9ad2a85e_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_9ad2dbee_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM cropfora WHERE CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforaman" violates foreign key constraint "fk_9ad2dbee_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_9ad3628a_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamantim" violates foreign key constraint "fk_9ad3628a_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_9ad39b42_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "vegforamantim" violates foreign key constraint "fk_9ad39b42_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_vegforamantim_periods BEFORE UPDATE ON vegforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamantim" violates foreign key constraint "fk_vegforamantim_periods"') END; END;
CREATE TRIGGER UPD_fk_9ad3c702_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD || NMONTH) as value FROM vegforamantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforalabour" violates foreign key constraint "fk_9ad3c702_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_9ad4005a_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforalabour" violates foreign key constraint "fk_9ad4005a_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_9ad30588_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansold" violates foreign key constraint "fk_9ad30588_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_9ad33a1c_bce7_11e0_a317_58946b4c242c BEFORE UPDATE ON vegforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansold" violates foreign key constraint "fk_9ad33a1c_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334977de_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassman" violates foreign key constraint "fk_334977de_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334a053c_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassman" violates foreign key constraint "fk_334a053c_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334a93d0_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmantim" violates foreign key constraint "fk_334a93d0_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334f51d6_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassmantim" violates foreign key constraint "fk_334f51d6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_grassmantim_periods BEFORE UPDATE ON grassmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmantim" violates foreign key constraint "fk_grassmantim_periods"') END; END;
CREATE TRIGGER UPD_fk_334b315a_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grasslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || NMONTH) as value FROM grassmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grasslabour" violates foreign key constraint "fk_334b315a_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334bd74a_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grasslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grasslabour" violates foreign key constraint "fk_334bd74a_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334c80b4_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || NMONTH) as value FROM grassmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanfert" violates foreign key constraint "fk_334c80b4_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334d32b6_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanfert" violates foreign key constraint "fk_334d32b6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_33500fc2_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassmanfert" violates foreign key constraint "fk_33500fc2_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334ddf2c_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfert" violates foreign key constraint "fk_334ddf2c_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_334e9ba6_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfert" violates foreign key constraint "fk_334e9ba6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3350d272_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || NMONTH) as value FROM grassmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanheap" violates foreign key constraint "fk_3350d272_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3351a292_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanheap" violates foreign key constraint "fk_3351a292_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_33527082_bce8_11e0_a317_58946b4c242c BEFORE UPDATE ON grassmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassmanheap" violates foreign key constraint "fk_33527082_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e2e10f26_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodman" violates foreign key constraint "fk_e2e10f26_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e2e1bb1a_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || PROD_COD) as value FROM pastprods WHERE CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodman" violates foreign key constraint "fk_e2e1bb1a_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e2e27c58_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmantim" violates foreign key constraint "fk_e2e27c58_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e2e34ffc_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassprodmantim" violates foreign key constraint "fk_e2e34ffc_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_grassprodmantim_periods BEFORE UPDATE ON grassprodmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmantim" violates foreign key constraint "fk_grassprodmantim_periods"') END; END;
CREATE TRIGGER UPD_fk_e2e41e3c_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD || NMONTH) as value FROM grassprodmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodlabour" violates foreign key constraint "fk_e2e41e3c_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e2e50928_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodlabour" violates foreign key constraint "fk_e2e50928_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e2e5e942_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansold" violates foreign key constraint "fk_e2e5e942_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_e2e6d992_bce9_11e0_a317_58946b4c242c BEFORE UPDATE ON grassprodmansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansold" violates foreign key constraint "fk_e2e6d992_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_6ecf545c_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforaman" violates foreign key constraint "fk_6ecf545c_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_6ecf860c_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforaman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM pastfora WHERE CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforaman" violates foreign key constraint "fk_6ecf860c_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_6ed016c6_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamantim" violates foreign key constraint "fk_6ed016c6_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_6ed04f42_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grassforamantim" violates foreign key constraint "fk_6ed04f42_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_grassforamantim_periods BEFORE UPDATE ON grassforamantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamantim" violates foreign key constraint "fk_grassforamantim_periods"') END; END;
CREATE TRIGGER UPD_fk_6ed07f1c_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD || NMONTH) as value FROM grassforamantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforalabour" violates foreign key constraint "fk_6ed07f1c_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_6ed0bd38_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforalabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforalabour" violates foreign key constraint "fk_6ed0bd38_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_6ecfb2c6_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansold" violates foreign key constraint "fk_6ecfb2c6_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_6ecfeb7e_bcea_11e0_a317_58946b4c242c BEFORE UPDATE ON grassforamansold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansold" violates foreign key constraint "fk_6ecfeb7e_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3994c7c6_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON feedgroups FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "feedgroups" violates foreign key constraint "fk_3994c7c6_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_399baa0a_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON livegroups FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livegroups" violates foreign key constraint "fk_399baa0a_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3995a826_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON liveavailres FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailres" violates foreign key constraint "fk_3995a826_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_3996875a_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON liveavailres FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (RES_COD) as value FROM restypes WHERE RES_COD = NEW.FEED_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailres" violates foreign key constraint "fk_3996875a_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_39977278_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON stallfeeprch FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || FEED_COD) as value FROM liveavailres WHERE SYS_COD = NEW.SYS_COD AND FEED_COD = NEW.FEED_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprch" violates foreign key constraint "fk_39977278_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_39987088_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON stallfeeprch FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprch" violates foreign key constraint "fk_39987088_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_39997924_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON grazingman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingman" violates foreign key constraint "fk_39997924_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_399a8ba2_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON grazingman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingman" violates foreign key constraint "fk_399a8ba2_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_399ccfe8_bceb_11e0_9e78_58946b4c242c BEFORE UPDATE ON grazingman FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.MLIVE_COD IS NOT NULL AND NEW.MPROD_COD IS NOT NULL) AND ((SELECT (LIVE_COD || PROD_COD) as value FROM lvproducts WHERE LIVE_COD = NEW.MLIVE_COD AND PROD_COD = NEW.MPROD_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "grazingman" violates foreign key constraint "fk_399ccfe8_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_11fb077e_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON crpprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeed" violates foreign key constraint "fk_11fb077e_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_11fbb070_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON crpprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeed" violates foreign key constraint "fk_11fbb070_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_11fc8fea_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON crpforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeed" violates foreign key constraint "fk_11fc8fea_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_11fd60d2_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON crpforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeed" violates foreign key constraint "fk_11fd60d2_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_11fe14d2_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON vegprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeed" violates foreign key constraint "fk_11fe14d2_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_11fedb2e_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON vegprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeed" violates foreign key constraint "fk_11fedb2e_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_11ff9578_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON vegforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeed" violates foreign key constraint "fk_11ff9578_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_12006d90_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON vegforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeed" violates foreign key constraint "fk_12006d90_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_120155fc_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON grassprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeed" violates foreign key constraint "fk_120155fc_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_12022c20_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON grassprodmanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeed" violates foreign key constraint "fk_12022c20_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_12030438_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON grassforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeed" violates foreign key constraint "fk_12030438_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_1203ea6a_bcec_11e0_9e78_58946b4c242c BEFORE UPDATE ON grassforamanfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeed" violates foreign key constraint "fk_1203ea6a_bcec_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29cb5696_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON liveman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveman" violates foreign key constraint "fk_29cb5696_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29cbf222_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON liveman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveman" violates foreign key constraint "fk_29cbf222_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29ce0558_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livemantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || ACTY_COD) as value FROM liveman WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemantim" violates foreign key constraint "fk_29ce0558_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_livemantim_periods BEFORE UPDATE ON livemantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livemantim" violates foreign key constraint "fk_livemantim_periods"') END; END;
CREATE TRIGGER UPD_fk_29cc7a26_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livelabour" violates foreign key constraint "fk_29cc7a26_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29ceeee6_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || ACTY_COD || NMONTH) as value FROM livemantim WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livelabour" violates foreign key constraint "fk_29ceeee6_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29cd31a0_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherprod" violates foreign key constraint "fk_29cd31a0_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29d0895e_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livemangrp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrp" violates foreign key constraint "fk_29d0895e_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29d1445c_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livemangrp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrp" violates foreign key constraint "fk_29d1445c_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29d207b6_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livemangrptim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || ACTY_COD) as value FROM livemangrp WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrptim" violates foreign key constraint "fk_29d207b6_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_livemangrptim_periods BEFORE UPDATE ON livemangrptim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrptim" violates foreign key constraint "fk_livemangrptim_periods"') END; END;
CREATE TRIGGER UPD_fk_29d2d448_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livemangrplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || ACTY_COD || NMONTH) as value FROM livemangrptim WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabour" violates foreign key constraint "fk_29d2d448_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_29d3b700_bced_11e0_9e78_58946b4c242c BEFORE UPDATE ON livemangrplabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabour" violates foreign key constraint "fk_29d3b700_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_4436dbf6_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON farmassets FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "farmassets" violates foreign key constraint "fk_4436dbf6_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_4437140e_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherhhcp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhcp" violates foreign key constraint "fk_4437140e_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44374c1c_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherhhexp FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhexp" violates foreign key constraint "fk_44374c1c_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44378808_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherincome FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherincome" violates foreign key constraint "fk_44378808_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44360668_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherman" violates foreign key constraint "fk_44360668_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44363a70_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherman" violates foreign key constraint "fk_44363a70_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_44366db0_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON othermantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || ACTY_COD) as value FROM otherman WHERE SYS_COD = NEW.SYS_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "othermantim" violates foreign key constraint "fk_44366db0_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_othermantim_periods BEFORE UPDATE ON othermantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "othermantim" violates foreign key constraint "fk_othermantim_periods"') END; END;
CREATE TRIGGER UPD_fk_4436a456_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherlabour" violates foreign key constraint "fk_4436a456_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_4437c516_bcf5_11e0_9e78_58946b4c242c BEFORE UPDATE ON otherlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || ACTY_COD || NMONTH) as value FROM othermantim WHERE SYS_COD = NEW.SYS_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "otherlabour" violates foreign key constraint "fk_4437c516_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee3ece80_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvst FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvst" violates foreign key constraint "fk_ee3ece80_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee3f5dd2_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvst FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD || PROD_COD) as value FROM lvproducts WHERE LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvst" violates foreign key constraint "fk_ee3f5dd2_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee3fe626_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvsttim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttim" violates foreign key constraint "fk_ee3fe626_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_livehvsttim_periods BEFORE UPDATE ON livehvsttim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttim" violates foreign key constraint "fk_livehvsttim_periods"') END; END;
CREATE TRIGGER UPD_fk_ee4080b8_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || NMONTH) as value FROM livehvsttim WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstlabour" violates foreign key constraint "fk_ee4080b8_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee4120e0_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstlabour" violates foreign key constraint "fk_ee4120e0_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee41c09a_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsold" violates foreign key constraint "fk_ee41c09a_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee426bb2_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsold" violates foreign key constraint "fk_ee426bb2_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_livehvstcat_livehvst1 BEFORE UPDATE ON livehvstcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstcat" violates foreign key constraint "fk_livehvstcat_livehvst1"') END; END;
CREATE TRIGGER UPD_fk_livehvsttimcat_livehvstcat1 BEFORE UPDATE ON livehvsttimcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD) as value FROM livehvstcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttimcat" violates foreign key constraint "fk_livehvsttimcat_livehvstcat1"') END; END;
CREATE TRIGGER UPD_fk_livehvsttimcat_periods1 BEFORE UPDATE ON livehvsttimcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvsttimcat" violates foreign key constraint "fk_livehvsttimcat_periods1"') END; END;
CREATE TRIGGER UPD_fk_ee43d100_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstsoldcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD) as value FROM livehvstcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcat" violates foreign key constraint "fk_ee43d100_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee4490b8_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstsoldcat FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcat" violates foreign key constraint "fk_ee4490b8_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee454b02_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeed" violates foreign key constraint "fk_ee454b02_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_ee4617da_bcf8_11e0_948f_58946b4c242c BEFORE UPDATE ON livehvstfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.FLIVE_ICOD AND GROUP_COD = NEW.FGROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeed" violates foreign key constraint "fk_ee4617da_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_4240db80_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheaplvprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheaplvprod" violates foreign key constraint "fk_4240db80_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_42417cf2_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheaplvprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheaplvprod" violates foreign key constraint "fk_42417cf2_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_42422850_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapprods" violates foreign key constraint "fk_42422850_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_4242d584_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapaddprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapaddprods" violates foreign key constraint "fk_4242d584_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_42438ace_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapaddprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM mnrheapprods WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapaddprods" violates foreign key constraint "fk_42438ace_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_42444a54_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsold" violates foreign key constraint "fk_42444a54_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_42450cc8_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapsold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsold" violates foreign key constraint "fk_42450cc8_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_4245d9a0_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeed" violates foreign key constraint "fk_4245d9a0_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_4246acfe_bcfa_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapfeed FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeed" violates foreign key constraint "fk_4246acfe_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81de4dee_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapcrpprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpprod" violates foreign key constraint "fk_81de4dee_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81df0784_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapcrpprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpprod" violates foreign key constraint "fk_81df0784_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81dfd6dc_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapcrpfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpfora" violates foreign key constraint "fk_81dfd6dc_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e0a60c_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapcrpfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapcrpfora" violates foreign key constraint "fk_81e0a60c_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e18ba8_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapgrassprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassprod" violates foreign key constraint "fk_81e18ba8_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e26a96_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapgrassprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassprod" violates foreign key constraint "fk_81e26a96_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e35b04_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapgrassfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassfora" violates foreign key constraint "fk_81e35b04_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e44a64_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapgrassfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapgrassfora" violates foreign key constraint "fk_81e44a64_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e549e6_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapvegprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegprod" violates foreign key constraint "fk_81e549e6_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e64d8c_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapvegprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegprod" violates foreign key constraint "fk_81e64d8c_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e7808a_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapvegfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegfora" violates foreign key constraint "fk_81e7808a_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_81e8dec6_bcfb_11e0_b883_58946b4c242c BEFORE UPDATE ON mnrheapvegfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapvegfora" violates foreign key constraint "fk_81e8dec6_bcfb_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER UPD_fk_systemperiod_system1 BEFORE UPDATE ON systemperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "systemperiods" violates foreign key constraint "fk_systemperiod_system1"') END; END;
CREATE TRIGGER UPD_fk_systemperiod_periods1 BEFORE UPDATE ON systemperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "systemperiods" violates foreign key constraint "fk_systemperiod_periods1"') END; END;
CREATE TRIGGER UPD_fk_table1_labforce1 BEFORE UPDATE ON labforceperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "labforceperiods" violates foreign key constraint "fk_table1_labforce1"') END; END;
CREATE TRIGGER UPD_fk_table1_periods1 BEFORE UPDATE ON labforceperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "labforceperiods" violates foreign key constraint "fk_table1_periods1"') END; END;
CREATE TRIGGER UPD_fk_lvstosysperiods_lvstosys1 BEFORE UPDATE ON lvstosysperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosysperiods" violates foreign key constraint "fk_lvstosysperiods_lvstosys1"') END; END;
CREATE TRIGGER UPD_fk_lvstosysperiods_periods1 BEFORE UPDATE ON lvstosysperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosysperiods" violates foreign key constraint "fk_lvstosysperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_plotseasonsperiods_plotseasons1 BEFORE UPDATE ON plotseasonsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON) as value FROM plotseasons WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON) IS NULL) THEN RAISE(ABORT, 'insert on table "plotseasonsperiods" violates foreign key constraint "fk_plotseasonsperiods_plotseasons1"') END; END;
CREATE TRIGGER UPD_fk_plotseasonsperiods_periods1 BEFORE UPDATE ON plotseasonsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "plotseasonsperiods" violates foreign key constraint "fk_plotseasonsperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_owneduseperiods_owneduse1 BEFORE UPDATE ON owneduseperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduseperiods" violates foreign key constraint "fk_owneduseperiods_owneduse1"') END; END;
CREATE TRIGGER UPD_fk_owneduseperiods_periods1 BEFORE UPDATE ON owneduseperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduseperiods" violates foreign key constraint "fk_owneduseperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_ownusedvperiods_ownusedv1 BEFORE UPDATE ON ownusedvperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD) as value FROM ownusedv WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvperiods" violates foreign key constraint "fk_ownusedvperiods_ownusedv1"') END; END;
CREATE TRIGGER UPD_fk_ownusedvperiods_periods1 BEFORE UPDATE ON ownusedvperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvperiods" violates foreign key constraint "fk_ownusedvperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_cropmanperiods_cropman1 BEFORE UPDATE ON cropmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanperiods" violates foreign key constraint "fk_cropmanperiods_cropman1"') END; END;
CREATE TRIGGER UPD_fk_cropmanperiods_periods1 BEFORE UPDATE ON cropmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanperiods" violates foreign key constraint "fk_cropmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_cropmanprchfertperiods_cropmanprchfert1 BEFORE UPDATE ON cropmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FERTYP_COD) as value FROM cropmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfertperiods" violates foreign key constraint "fk_cropmanprchfertperiods_cropmanprchfert1"') END; END;
CREATE TRIGGER UPD_fk_cropmanprchfertperiods_periods1 BEFORE UPDATE ON cropmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanprchfertperiods" violates foreign key constraint "fk_cropmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_crpprodmansoldperiods_crpprodmansold1 BEFORE UPDATE ON crpprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD || MARK_COD) as value FROM crpprodmansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansoldperiods" violates foreign key constraint "fk_crpprodmansoldperiods_crpprodmansold1"') END; END;
CREATE TRIGGER UPD_fk_crpprodmansoldperiods_periods1 BEFORE UPDATE ON crpprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmansoldperiods" violates foreign key constraint "fk_crpprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_crpprodmanperiods_crpprodman1 BEFORE UPDATE ON crpprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD) as value FROM crpprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanperiods" violates foreign key constraint "fk_crpprodmanperiods_crpprodman1"') END; END;
CREATE TRIGGER UPD_fk_crpprodmanperiods_periods1 BEFORE UPDATE ON crpprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanperiods" violates foreign key constraint "fk_crpprodmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_crpforamanperiods_crpforaman1 BEFORE UPDATE ON crpforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD) as value FROM crpforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanperiods" violates foreign key constraint "fk_crpforamanperiods_crpforaman1"') END; END;
CREATE TRIGGER UPD_fk_crpforamanperiods_periods1 BEFORE UPDATE ON crpforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanperiods" violates foreign key constraint "fk_crpforamanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_crpforamansoldperiods_crpforamansold1 BEFORE UPDATE ON crpforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD || MARK_COD) as value FROM crpforamansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansoldperiods" violates foreign key constraint "fk_crpforamansoldperiods_crpforamansold1"') END; END;
CREATE TRIGGER UPD_fk_crpforamansoldperiods_periods1 BEFORE UPDATE ON crpforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamansoldperiods" violates foreign key constraint "fk_crpforamansoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegmanperiods_vegman1 BEFORE UPDATE ON vegmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanperiods" violates foreign key constraint "fk_vegmanperiods_vegman1"') END; END;
CREATE TRIGGER UPD_fk_vegmanperiods_periods1 BEFORE UPDATE ON vegmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanperiods" violates foreign key constraint "fk_vegmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegmanprchfertperiods_vegmanprchfert1 BEFORE UPDATE ON vegmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FERTYP_COD) as value FROM vegmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfertperiods" violates foreign key constraint "fk_vegmanprchfertperiods_vegmanprchfert1"') END; END;
CREATE TRIGGER UPD_fk_vegmanprchfertperiods_periods1 BEFORE UPDATE ON vegmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanprchfertperiods" violates foreign key constraint "fk_vegmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegprodmanperiods_vegprodman1 BEFORE UPDATE ON vegprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD) as value FROM vegprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanperiods" violates foreign key constraint "fk_vegprodmanperiods_vegprodman1"') END; END;
CREATE TRIGGER UPD_fk_vegprodmanperiods_periods1 BEFORE UPDATE ON vegprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanperiods" violates foreign key constraint "fk_vegprodmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegprodmansoldperiods_vegprodmansold1 BEFORE UPDATE ON vegprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD || MARK_COD) as value FROM vegprodmansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansoldperiods" violates foreign key constraint "fk_vegprodmansoldperiods_vegprodmansold1"') END; END;
CREATE TRIGGER UPD_fk_vegprodmansoldperiods_periods1 BEFORE UPDATE ON vegprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmansoldperiods" violates foreign key constraint "fk_vegprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegforamanperiods_vegforaman1 BEFORE UPDATE ON vegforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD) as value FROM vegforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanperiods" violates foreign key constraint "fk_vegforamanperiods_vegforaman1"') END; END;
CREATE TRIGGER UPD_fk_vegforamanperiods_periods1 BEFORE UPDATE ON vegforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanperiods" violates foreign key constraint "fk_vegforamanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegforamansoldperiods_vegforamansold1 BEFORE UPDATE ON vegforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD || MARK_COD) as value FROM vegforamansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansoldperiods" violates foreign key constraint "fk_vegforamansoldperiods_vegforamansold1"') END; END;
CREATE TRIGGER UPD_fk_vegforamansoldperiods_periods1 BEFORE UPDATE ON vegforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamansoldperiods" violates foreign key constraint "fk_vegforamansoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassmanperiods_grassman1 BEFORE UPDATE ON grassmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanperiods" violates foreign key constraint "fk_grassmanperiods_grassman1"') END; END;
CREATE TRIGGER UPD_fk_grassmanperiods_periods1 BEFORE UPDATE ON grassmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanperiods" violates foreign key constraint "fk_grassmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassmanprchfertperiods_grassmanprchfert1 BEFORE UPDATE ON grassmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FERTYP_COD) as value FROM grassmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfertperiods" violates foreign key constraint "fk_grassmanprchfertperiods_grassmanprchfert1"') END; END;
CREATE TRIGGER UPD_fk_grassmanprchfertperiods_periods1 BEFORE UPDATE ON grassmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanprchfertperiods" violates foreign key constraint "fk_grassmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassprodmanperiods_grassprodman1 BEFORE UPDATE ON grassprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD) as value FROM grassprodman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanperiods" violates foreign key constraint "fk_grassprodmanperiods_grassprodman1"') END; END;
CREATE TRIGGER UPD_fk_grassprodmanperiods_periods1 BEFORE UPDATE ON grassprodmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanperiods" violates foreign key constraint "fk_grassprodmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassprodmansoldperiods_grassprodmansold1 BEFORE UPDATE ON grassprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD || MARK_COD) as value FROM grassprodmansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansoldperiods" violates foreign key constraint "fk_grassprodmansoldperiods_grassprodmansold1"') END; END;
CREATE TRIGGER UPD_fk_grassprodmansoldperiods_periods1 BEFORE UPDATE ON grassprodmansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmansoldperiods" violates foreign key constraint "fk_grassprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassforamanperiods_grassforaman1 BEFORE UPDATE ON grassforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD) as value FROM grassforaman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanperiods" violates foreign key constraint "fk_grassforamanperiods_grassforaman1"') END; END;
CREATE TRIGGER UPD_fk_grassforamanperiods_periods1 BEFORE UPDATE ON grassforamanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanperiods" violates foreign key constraint "fk_grassforamanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassforamansoldperiods_grassforamansold1 BEFORE UPDATE ON grassforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD || MARK_COD) as value FROM grassforamansold WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansoldperiods" violates foreign key constraint "fk_grassforamansoldperiods_grassforamansold1"') END; END;
CREATE TRIGGER UPD_fk_grassforamansoldperiods_periods1 BEFORE UPDATE ON grassforamansoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamansoldperiods" violates foreign key constraint "fk_grassforamansoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_liveavailresperiods_liveavailres1 BEFORE UPDATE ON liveavailresperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || FEED_COD) as value FROM liveavailres WHERE SYS_COD = NEW.SYS_COD AND FEED_COD = NEW.FEED_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailresperiods" violates foreign key constraint "fk_liveavailresperiods_liveavailres1"') END; END;
CREATE TRIGGER UPD_fk_liveavailresperiods_periods1 BEFORE UPDATE ON liveavailresperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "liveavailresperiods" violates foreign key constraint "fk_liveavailresperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_stallfeeprchperiods_stallfeeprch1 BEFORE UPDATE ON stallfeeprchperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || FEED_COD || LIVE_ICOD || GROUP_COD) as value FROM stallfeeprch WHERE SYS_COD = NEW.SYS_COD AND FEED_COD = NEW.FEED_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprchperiods" violates foreign key constraint "fk_stallfeeprchperiods_stallfeeprch1"') END; END;
CREATE TRIGGER UPD_fk_stallfeeprchperiods_periods1 BEFORE UPDATE ON stallfeeprchperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "stallfeeprchperiods" violates foreign key constraint "fk_stallfeeprchperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_livegroupsperiods_livegroups1 BEFORE UPDATE ON livegroupsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || HERD_COD) as value FROM livegroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livegroupsperiods" violates foreign key constraint "fk_livegroupsperiods_livegroups1"') END; END;
CREATE TRIGGER UPD_fk_livegroupsperiods_periods1 BEFORE UPDATE ON livegroupsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livegroupsperiods" violates foreign key constraint "fk_livegroupsperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grazingmanperiods_grazingman1 BEFORE UPDATE ON grazingmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || LIVE_ICOD || GROUP_COD) as value FROM grazingman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingmanperiods" violates foreign key constraint "fk_grazingmanperiods_grazingman1"') END; END;
CREATE TRIGGER UPD_fk_grazingmanperiods_periods1 BEFORE UPDATE ON grazingmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grazingmanperiods" violates foreign key constraint "fk_grazingmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_crpprodmanfeedperiods_crpprodmanfeed1 BEFORE UPDATE ON crpprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || PROD_COD || LIVE_ICOD || GROUP_COD) as value FROM crpprodmanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeedperiods" violates foreign key constraint "fk_crpprodmanfeedperiods_crpprodmanfeed1"') END; END;
CREATE TRIGGER UPD_fk_crpprodmanfeedperiods_periods1 BEFORE UPDATE ON crpprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpprodmanfeedperiods" violates foreign key constraint "fk_crpprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_crpforamanfeedperiods_crpforamanfeed1 BEFORE UPDATE ON crpforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD || FORA_COD || LIVE_ICOD || GROUP_COD) as value FROM crpforamanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeedperiods" violates foreign key constraint "fk_crpforamanfeedperiods_crpforamanfeed1"') END; END;
CREATE TRIGGER UPD_fk_crpforamanfeedperiods_periods1 BEFORE UPDATE ON crpforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "crpforamanfeedperiods" violates foreign key constraint "fk_crpforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegprodmanfeedperiods_vegprodmanfeed1 BEFORE UPDATE ON vegprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || PROD_COD || LIVE_ICOD || GROUP_COD) as value FROM vegprodmanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeedperiods" violates foreign key constraint "fk_vegprodmanfeedperiods_vegprodmanfeed1"') END; END;
CREATE TRIGGER UPD_fk_vegprodmanfeedperiods_periods1 BEFORE UPDATE ON vegprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegprodmanfeedperiods" violates foreign key constraint "fk_vegprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_vegforamanfeedperiods_vegforamanfeed1 BEFORE UPDATE ON vegforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD || FORA_COD || LIVE_ICOD || GROUP_COD) as value FROM vegforamanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeedperiods" violates foreign key constraint "fk_vegforamanfeedperiods_vegforamanfeed1"') END; END;
CREATE TRIGGER UPD_fk_vegforamanfeedperiods_periods1 BEFORE UPDATE ON vegforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "vegforamanfeedperiods" violates foreign key constraint "fk_vegforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassprodmanfeedperiods_grassprodmanfeed1 BEFORE UPDATE ON grassprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || PROD_COD || LIVE_ICOD || GROUP_COD) as value FROM grassprodmanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND PROD_COD = NEW.PROD_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeedperiods" violates foreign key constraint "fk_grassprodmanfeedperiods_grassprodmanfeed1"') END; END;
CREATE TRIGGER UPD_fk_grassprodmanfeedperiods_periods1 BEFORE UPDATE ON grassprodmanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassprodmanfeedperiods" violates foreign key constraint "fk_grassprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grassforamanfeedperiods_grassforamanfeed1 BEFORE UPDATE ON grassforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD || FORA_COD || LIVE_ICOD || GROUP_COD) as value FROM grassforamanfeed WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD AND FORA_COD = NEW.FORA_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeedperiods" violates foreign key constraint "fk_grassforamanfeedperiods_grassforamanfeed1"') END; END;
CREATE TRIGGER UPD_fk_grassforamanfeedperiods_periods1 BEFORE UPDATE ON grassforamanfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grassforamanfeedperiods" violates foreign key constraint "fk_grassforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_otherprodperiods_otherprod1 BEFORE UPDATE ON otherprodperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || PROD_COD) as value FROM otherprod WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherprodperiods" violates foreign key constraint "fk_otherprodperiods_otherprod1"') END; END;
CREATE TRIGGER UPD_fk_otherprodperiods_periods1 BEFORE UPDATE ON otherprodperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherprodperiods" violates foreign key constraint "fk_otherprodperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_otherhhcpperiods_otherhhcp1 BEFORE UPDATE ON otherhhcpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM otherhhcp WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhcpperiods" violates foreign key constraint "fk_otherhhcpperiods_otherhhcp1"') END; END;
CREATE TRIGGER UPD_fk_otherhhcpperiods_periods1 BEFORE UPDATE ON otherhhcpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhcpperiods" violates foreign key constraint "fk_otherhhcpperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_otherhhexpperiods_otherhhexp1 BEFORE UPDATE ON otherhhexpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM otherhhexp WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhexpperiods" violates foreign key constraint "fk_otherhhexpperiods_otherhhexp1"') END; END;
CREATE TRIGGER UPD_fk_otherhhexpperiods_periods1 BEFORE UPDATE ON otherhhexpperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherhhexpperiods" violates foreign key constraint "fk_otherhhexpperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_otherincomeperiods_otherincome1 BEFORE UPDATE ON otherincomeperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM otherincome WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "otherincomeperiods" violates foreign key constraint "fk_otherincomeperiods_otherincome1"') END; END;
CREATE TRIGGER UPD_fk_otherincomeperiods_periods1 BEFORE UPDATE ON otherincomeperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "otherincomeperiods" violates foreign key constraint "fk_otherincomeperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_livehvstperiods_livehvst1 BEFORE UPDATE ON livehvstperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD) as value FROM livehvst WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstperiods" violates foreign key constraint "fk_livehvstperiods_livehvst1"') END; END;
CREATE TRIGGER UPD_fk_livehvstperiods_periods1 BEFORE UPDATE ON livehvstperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstperiods" violates foreign key constraint "fk_livehvstperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_livehvstfeedperiods_livehvstfeed1 BEFORE UPDATE ON livehvstfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || FLIVE_ICOD || FGROUP_COD) as value FROM livehvstfeed WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND FLIVE_ICOD = NEW.FLIVE_ICOD AND FGROUP_COD = NEW.FGROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeedperiods" violates foreign key constraint "fk_livehvstfeedperiods_livehvstfeed1"') END; END;
CREATE TRIGGER UPD_fk_livehvstfeedperiods_periods1 BEFORE UPDATE ON livehvstfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstfeedperiods" violates foreign key constraint "fk_livehvstfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_livehvstsoldperiods_livehvstsold1 BEFORE UPDATE ON livehvstsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || MARK_COD) as value FROM livehvstsold WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldperiods" violates foreign key constraint "fk_livehvstsoldperiods_livehvstsold1"') END; END;
CREATE TRIGGER UPD_fk_livehvstsoldperiods_periods1 BEFORE UPDATE ON livehvstsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldperiods" violates foreign key constraint "fk_livehvstsoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_livehvstsoldcatperiods_livehvstsoldcat1 BEFORE UPDATE ON livehvstsoldcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD || MARK_COD) as value FROM livehvstsoldcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcatperiods" violates foreign key constraint "fk_livehvstsoldcatperiods_livehvstsoldcat1"') END; END;
CREATE TRIGGER UPD_fk_livehvstsoldcatperiods_periods1 BEFORE UPDATE ON livehvstsoldcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstsoldcatperiods" violates foreign key constraint "fk_livehvstsoldcatperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_mnrheapfeedperiods_mnrheapfeed1 BEFORE UPDATE ON mnrheapfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD || LIVE_ICOD || GROUP_COD) as value FROM mnrheapfeed WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeedperiods" violates foreign key constraint "fk_mnrheapfeedperiods_mnrheapfeed1"') END; END;
CREATE TRIGGER UPD_fk_mnrheapfeedperiods_periods1 BEFORE UPDATE ON mnrheapfeedperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapfeedperiods" violates foreign key constraint "fk_mnrheapfeedperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_mnrheapprodsperiods_mnrheapprods1 BEFORE UPDATE ON mnrheapprodsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PROD_COD) as value FROM mnrheapprods WHERE SYS_COD = NEW.SYS_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapprodsperiods" violates foreign key constraint "fk_mnrheapprodsperiods_mnrheapprods1"') END; END;
CREATE TRIGGER UPD_fk_mnrheapprodsperiods_periods1 BEFORE UPDATE ON mnrheapprodsperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapprodsperiods" violates foreign key constraint "fk_mnrheapprodsperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_mnrheapsoldperiods_mnrheapsold1 BEFORE UPDATE ON mnrheapsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD || MARK_COD) as value FROM mnrheapsold WHERE SYS_COD = NEW.mnrheapsold_SYS_COD AND HEAP_COD = NEW.mnrheapsold_HEAP_COD AND MARK_COD = NEW.mnrheapsold_MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsoldperiods" violates foreign key constraint "fk_mnrheapsoldperiods_mnrheapsold1"') END; END;
CREATE TRIGGER UPD_fk_mnrheapsoldperiods_periods1 BEFORE UPDATE ON mnrheapsoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "mnrheapsoldperiods" violates foreign key constraint "fk_mnrheapsoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_owneduselabour_owneduse1 BEFORE UPDATE ON owneduselabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD) as value FROM owneduse WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduselabour" violates foreign key constraint "fk_owneduselabour_owneduse1"') END; END;
CREATE TRIGGER UPD_fk_owneduselabour_labforce1 BEFORE UPDATE ON owneduselabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "owneduselabour" violates foreign key constraint "fk_owneduselabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_plotpaddspelabour_plotpaddspe1 BEFORE UPDATE ON plotpaddspelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD) as value FROM plotpaddspe WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspelabour" violates foreign key constraint "fk_plotpaddspelabour_plotpaddspe1"') END; END;
CREATE TRIGGER UPD_fk_plotpaddspelabour_labforce1 BEFORE UPDATE ON plotpaddspelabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotpaddspelabour" violates foreign key constraint "fk_plotpaddspelabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_ownusedvlabour_ownusedv1 BEFORE UPDATE ON ownusedvlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD) as value FROM ownusedv WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvlabour" violates foreign key constraint "fk_ownusedvlabour_ownusedv1"') END; END;
CREATE TRIGGER UPD_fk_ownusedvlabour_labforce1 BEFORE UPDATE ON ownusedvlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "ownusedvlabour" violates foreign key constraint "fk_ownusedvlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_cropmanlabour_cropman1 BEFORE UPDATE ON cropmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || ACTY_COD) as value FROM cropman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanlabour" violates foreign key constraint "fk_cropmanlabour_cropman1"') END; END;
CREATE TRIGGER UPD_fk_cropmanlabour_labforce1 BEFORE UPDATE ON cropmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "cropmanlabour" violates foreign key constraint "fk_cropmanlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_vegmanlabour_vegman1 BEFORE UPDATE ON vegmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMSEASON || CROP_COD || VEG_COD || ACTY_COD) as value FROM vegman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMSEASON = NEW.NUMSEASON AND CROP_COD = NEW.CROP_COD AND VEG_COD = NEW.VEG_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanlabour" violates foreign key constraint "fk_vegmanlabour_vegman1"') END; END;
CREATE TRIGGER UPD_fk_vegmanlabour_labforce1 BEFORE UPDATE ON vegmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "vegmanlabour" violates foreign key constraint "fk_vegmanlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_grassmanlabour_grassman1 BEFORE UPDATE ON grassmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || NUMPADD || CROP_COD || ACTY_COD) as value FROM grassman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND NUMPADD = NEW.NUMPADD AND CROP_COD = NEW.CROP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanlabour" violates foreign key constraint "fk_grassmanlabour_grassman1"') END; END;
CREATE TRIGGER UPD_fk_grassmanlabour_labforce1 BEFORE UPDATE ON grassmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grassmanlabour" violates foreign key constraint "fk_grassmanlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_lvstosyslabour_lvstosys1 BEFORE UPDATE ON lvstosyslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosyslabour" violates foreign key constraint "fk_lvstosyslabour_lvstosys1"') END; END;
CREATE TRIGGER UPD_fk_lvstosyslabour_labforce1 BEFORE UPDATE ON lvstosyslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosyslabour" violates foreign key constraint "fk_lvstosyslabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_feedgroupslabour_feedgroups1 BEFORE UPDATE ON feedgroupslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD) as value FROM feedgroups WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "feedgroupslabour" violates foreign key constraint "fk_feedgroupslabour_feedgroups1"') END; END;
CREATE TRIGGER UPD_fk_feedgroupslabour_labforce1 BEFORE UPDATE ON feedgroupslabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "feedgroupslabour" violates foreign key constraint "fk_feedgroupslabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_lvstosysherdstr_lvstosys1 BEFORE UPDATE ON lvstosysherdstr FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD) as value FROM lvstosys WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD) IS NULL) THEN RAISE(ABORT, 'insert on table "lvstosysherdstr" violates foreign key constraint "fk_lvstosysherdstr_lvstosys1"') END; END;
CREATE TRIGGER UPD_fk_livemanlabour_liveman1 BEFORE UPDATE ON livemanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || ACTY_COD) as value FROM liveman WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemanlabour" violates foreign key constraint "fk_livemanlabour_liveman1"') END; END;
CREATE TRIGGER UPD_fk_livemanlabour_labforce1 BEFORE UPDATE ON livemanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemanlabour" violates foreign key constraint "fk_livemanlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_table1_livemangrp1 BEFORE UPDATE ON livemangrplabourB FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || ACTY_COD) as value FROM livemangrp WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabourB" violates foreign key constraint "fk_table1_livemangrp1"') END; END;
CREATE TRIGGER UPD_fk_livemangrplabourB_labforce1 BEFORE UPDATE ON livemangrplabourB FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livemangrplabourB" violates foreign key constraint "fk_livemangrplabourB_labforce1"') END; END;
CREATE TRIGGER UPD_fk_othermanlabour_otherman1 BEFORE UPDATE ON othermanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || ACTY_COD) as value FROM otherman WHERE SYS_COD = NEW.SYS_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "othermanlabour" violates foreign key constraint "fk_othermanlabour_otherman1"') END; END;
CREATE TRIGGER UPD_fk_othermanlabour_labforce1 BEFORE UPDATE ON othermanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "othermanlabour" violates foreign key constraint "fk_othermanlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_moduletree_moduletree1 BEFORE UPDATE ON moduletree FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.parent_module IS NOT NULL) AND ((SELECT (module_id) as value FROM moduletree WHERE module_id = NEW.parent_module) IS NULL)) THEN RAISE(ABORT, 'insert on table "moduletree" violates foreign key constraint "fk_moduletree_moduletree1"') END; END;
CREATE TRIGGER UPD_fk_sysmodulenotes_system1 BEFORE UPDATE ON sysmodulenotes FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "sysmodulenotes" violates foreign key constraint "fk_sysmodulenotes_system1"') END; END;
CREATE TRIGGER UPD_fk_livehvstcatperiods_livehvstcat1 BEFORE UPDATE ON livehvstcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || LIVE_ICOD || GROUP_COD || LIVE_COD || PROD_COD || HERD_COD) as value FROM livehvstcat WHERE SYS_COD = NEW.SYS_COD AND LIVE_ICOD = NEW.LIVE_ICOD AND GROUP_COD = NEW.GROUP_COD AND LIVE_COD = NEW.LIVE_COD AND PROD_COD = NEW.PROD_COD AND HERD_COD = NEW.HERD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstcatperiods" violates foreign key constraint "fk_livehvstcatperiods_livehvstcat1"') END; END;
CREATE TRIGGER UPD_fk_livehvstcatperiods_periods1 BEFORE UPDATE ON livehvstcatperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "livehvstcatperiods" violates foreign key constraint "fk_livehvstcatperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_plotman_spadstown1 BEFORE UPDATE ON plotman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD) as value FROM spadstown WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotman" violates foreign key constraint "fk_plotman_spadstown1"') END; END;
CREATE TRIGGER UPD_fk_plotman_activity1 BEFORE UPDATE ON plotman FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM activity WHERE ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotman" violates foreign key constraint "fk_plotman_activity1"') END; END;
CREATE TRIGGER UPD_fk_plotmanperiods_plotman1 BEFORE UPDATE ON plotmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanperiods" violates foreign key constraint "fk_plotmanperiods_plotman1"') END; END;
CREATE TRIGGER UPD_fk_plotmanperiods_periods1 BEFORE UPDATE ON plotmanperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanperiods" violates foreign key constraint "fk_plotmanperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_3df7044a_bce2_11e0_a5d9_58946b4c242c0 BEFORE UPDATE ON plotmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "plotmantim" violates foreign key constraint "fk_3df7044a_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER UPD_fk_plotmantim_periods10 BEFORE UPDATE ON plotmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmantim" violates foreign key constraint "fk_plotmantim_periods10"') END; END;
CREATE TRIGGER UPD_fk_plotman_plotmantim BEFORE UPDATE ON plotmantim FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmantim" violates foreign key constraint "fk_plotman_plotmantim"') END; END;
CREATE TRIGGER UPD_fk_plotlabour_plotmantim1 BEFORE UPDATE ON plotlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || NMONTH) as value FROM plotmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotlabour" violates foreign key constraint "fk_plotlabour_plotmantim1"') END; END;
CREATE TRIGGER UPD_fk_plotlabour_labforce1 BEFORE UPDATE ON plotlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotlabour" violates foreign key constraint "fk_plotlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c0 BEFORE UPDATE ON plotmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanfert" violates foreign key constraint "fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER UPD_fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c0 BEFORE UPDATE ON plotmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "plotmanfert" violates foreign key constraint "fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER UPD_fk_plotmanfert_plotmantim1 BEFORE UPDATE ON plotmanfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || NMONTH) as value FROM plotmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanfert" violates foreign key constraint "fk_plotmanfert_plotmantim1"') END; END;
CREATE TRIGGER UPD_fk_plotmanprchfert_plotman1 BEFORE UPDATE ON plotmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfert" violates foreign key constraint "fk_plotmanprchfert_plotman1"') END; END;
CREATE TRIGGER UPD_fk_plotmanprchfert_ferttype1 BEFORE UPDATE ON plotmanprchfert FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM ferttype WHERE FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfert" violates foreign key constraint "fk_plotmanprchfert_ferttype1"') END; END;
CREATE TRIGGER UPD_fk_plotmanprchfertperiods_plotmanprchfert1 BEFORE UPDATE ON plotmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || FERTYP_COD) as value FROM plotmanprchfert WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND FERTYP_COD = NEW.FERTYP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfertperiods" violates foreign key constraint "fk_plotmanprchfertperiods_plotmanprchfert1"') END; END;
CREATE TRIGGER UPD_fk_plotmanprchfertperiods_periods1 BEFORE UPDATE ON plotmanprchfertperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanprchfertperiods" violates foreign key constraint "fk_plotmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_plotmanlabour_plotman1 BEFORE UPDATE ON plotmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD) as value FROM plotman WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanlabour" violates foreign key constraint "fk_plotmanlabour_plotman1"') END; END;
CREATE TRIGGER UPD_fk_plotmanlabour_labforce1 BEFORE UPDATE ON plotmanlabour FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PERS_COD) as value FROM labforce WHERE SYS_COD = NEW.SYS_COD AND PERS_COD = NEW.PERS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanlabour" violates foreign key constraint "fk_plotmanlabour_labforce1"') END; END;
CREATE TRIGGER UPD_fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c0 BEFORE UPDATE ON plotmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || PLOT_COD || ACTY_COD || NMONTH) as value FROM plotmantim WHERE SYS_COD = NEW.SYS_COD AND PLOT_COD = NEW.PLOT_COD AND ACTY_COD = NEW.ACTY_COD AND NMONTH = NEW.NMONTH) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanheap" violates foreign key constraint "fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER UPD_fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c0 BEFORE UPDATE ON plotmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || HEAP_COD) as value FROM mnrheap WHERE SYS_COD = NEW.SYS_COD AND HEAP_COD = NEW.HEAP_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "plotmanheap" violates foreign key constraint "fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER UPD_fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c0 BEFORE UPDATE ON plotmanheap FOR EACH ROW BEGIN SELECT CASE WHEN ((NEW.ACTYM_COD IS NOT NULL AND NEW.MET_COD IS NOT NULL) AND ((SELECT (ACTY_COD || MET_COD) as value FROM actymethods WHERE ACTY_COD = NEW.ACTYM_COD AND MET_COD = NEW.MET_COD) IS NULL)) THEN RAISE(ABORT, 'insert on table "plotmanheap" violates foreign key constraint "fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodsprod_system1 BEFORE UPDATE ON grpcrpprodsprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodsprod" violates foreign key constraint "fk_grpcrpprodsprod_system1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodsprod_cropprods1 BEFORE UPDATE ON grpcrpprodsprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || PROD_COD) as value FROM cropprods WHERE CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodsprod" violates foreign key constraint "fk_grpcrpprodsprod_cropprods1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforaprod_system1 BEFORE UPDATE ON grpcrpforaprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD) as value FROM system WHERE SYS_COD = NEW.SYS_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforaprod" violates foreign key constraint "fk_grpcrpforaprod_system1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforaprod_cropfora1 BEFORE UPDATE ON grpcrpforaprod FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM cropfora WHERE CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforaprod" violates foreign key constraint "fk_grpcrpforaprod_cropfora1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodssold_grpcrpprodsprod1 BEFORE UPDATE ON grpcrpprodssold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || PROD_COD) as value FROM grpcrpprodsprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssold" violates foreign key constraint "fk_grpcrpprodssold_grpcrpprodsprod1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodssold_markoutlet1 BEFORE UPDATE ON grpcrpprodssold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssold" violates foreign key constraint "fk_grpcrpprodssold_markoutlet1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodssoldperiods_grpcrpprodssold1 BEFORE UPDATE ON grpcrpprodssoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || PROD_COD || MARK_COD) as value FROM grpcrpprodssold WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssoldperiods" violates foreign key constraint "fk_grpcrpprodssoldperiods_grpcrpprodssold1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodssoldperiods_periods1 BEFORE UPDATE ON grpcrpprodssoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodssoldperiods" violates foreign key constraint "fk_grpcrpprodssoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforasold_grpcrpforaprod1 BEFORE UPDATE ON grpcrpforasold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || FORA_COD) as value FROM grpcrpforaprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasold" violates foreign key constraint "fk_grpcrpforasold_grpcrpforaprod1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforasold_markoutlet1 BEFORE UPDATE ON grpcrpforasold FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM markoutlet WHERE MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasold" violates foreign key constraint "fk_grpcrpforasold_markoutlet1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforasoldperiods_grpcrpforasold1 BEFORE UPDATE ON grpcrpforasoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || FORA_COD || MARK_COD) as value FROM grpcrpforasold WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD AND MARK_COD = NEW.MARK_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasoldperiods" violates foreign key constraint "fk_grpcrpforasoldperiods_grpcrpforasold1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforasoldperiods_periods1 BEFORE UPDATE ON grpcrpforasoldperiods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforasoldperiods" violates foreign key constraint "fk_grpcrpforasoldperiods_periods1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodscons_grpcrpprodsprod1 BEFORE UPDATE ON grpcrpprodscons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || PROD_COD) as value FROM grpcrpprodsprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND PROD_COD = NEW.PROD_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodscons" violates foreign key constraint "fk_grpcrpprodscons_grpcrpprodsprod1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpprodscons_periods1 BEFORE UPDATE ON grpcrpprodscons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpprodscons" violates foreign key constraint "fk_grpcrpprodscons_periods1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforacons_grpcrpforaprod1 BEFORE UPDATE ON grpcrpforacons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYS_COD || CROP_COD || FORA_COD) as value FROM grpcrpforaprod WHERE SYS_COD = NEW.SYS_COD AND CROP_COD = NEW.CROP_COD AND FORA_COD = NEW.FORA_COD) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforacons" violates foreign key constraint "fk_grpcrpforacons_grpcrpforaprod1"') END; END;
CREATE TRIGGER UPD_fk_grpcrpforacons_periods1 BEFORE UPDATE ON grpcrpforacons FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM periods WHERE period_id = NEW.period_id) IS NULL) THEN RAISE(ABORT, 'insert on table "grpcrpforacons" violates foreign key constraint "fk_grpcrpforacons_periods1"') END; END;
-- DELETE triggers
CREATE TRIGGER DLT_fk_e688edd2_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON actyunits FOR EACH ROW BEGIN DELETE FROM activity WHERE UNIT_COD = OLD.UNIT_COD; END;
CREATE TRIGGER DLT_fk_e67e4fee_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON activity FOR EACH ROW BEGIN DELETE FROM actymethods WHERE ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_e680c62a_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON crop FOR EACH ROW BEGIN DELETE FROM cropfora WHERE CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_e6818d8a_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON forages FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD) as value FROM cropfora WHERE FORA_COD = OLD.FORA_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropfora" violates foreign key constraint "fk_e6818d8a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e67f0178_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON crop FOR EACH ROW BEGIN DELETE FROM cropprods WHERE CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_e67fbf1e_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON cpprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM cropprods WHERE PROD_COD = OLD.PROD_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropprods" violates foreign key constraint "fk_e67fbf1e_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e6857184_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON livestoc FOR EACH ROW BEGIN DELETE FROM lvproducts WHERE LIVE_COD = OLD.LIVE_COD; END;
CREATE TRIGGER DLT_fk_e68642f8_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON products FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM lvproducts WHERE PROD_COD = OLD.PROD_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "lvproducts" violates foreign key constraint "fk_e68642f8_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e683dda6_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON pastures FOR EACH ROW BEGIN DELETE FROM pastfora WHERE CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_e684a4ca_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON forages FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD) as value FROM pastfora WHERE FORA_COD = OLD.FORA_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "pastfora" violates foreign key constraint "fk_e684a4ca_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e6871a7a_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON livestoc FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM systype WHERE LIVE_COD = OLD.LIVE_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "systype" violates foreign key constraint "fk_e6871a7a_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e687f8dc_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON crop FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM systype WHERE CROP_COD = OLD.CROP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "systype" violates foreign key constraint "fk_e687f8dc_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e6825a62_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON pastures FOR EACH ROW BEGIN DELETE FROM pastprods WHERE CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_e6831844_bce0_11e0_a5d9_58946b4c242c BEFORE DELETE ON cpprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD) as value FROM pastprods WHERE PROD_COD = OLD.PROD_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "pastprods" violates foreign key constraint "fk_e6831844_bce0_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_04d77330_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON systype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SYST_COD) as value FROM system WHERE SYST_COD = OLD.SYST_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "system" violates foreign key constraint "fk_04d77330_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_04d7e1e4_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON country FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CNTY_COD) as value FROM system WHERE CNTY_COD = OLD.CNTY_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "system" violates foreign key constraint "fk_04d7e1e4_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_04d85584_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM labforce WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_04d8cf32_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM spadstown WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_04d94dfe_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON drainage FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (DRAIN_COD) as value FROM spadstown WHERE DRAIN_COD = OLD.DRAIN_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "spadstown" violates foreign key constraint "fk_04d94dfe_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_04d9d1f2_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON soil FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (SOIL_COD) as value FROM spadstown WHERE SOIL_COD = OLD.SOIL_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "spadstown" violates foreign key constraint "fk_04d9d1f2_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_04da5a28_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM lvstosys WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_04dae7f4_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON livestoc FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD) as value FROM lvstosys WHERE LIVE_COD = OLD.LIVE_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "lvstosys" violates foreign key constraint "fk_04dae7f4_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_04db798a_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM wellbeing WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_91e67546_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON spadstown FOR EACH ROW BEGIN DELETE FROM plotseasons WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD; END;
CREATE TRIGGER DLT_fk_91e6ee40_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON crop FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM owneduse WHERE CROP_COD = OLD.CROP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "owneduse" violates foreign key constraint "fk_91e6ee40_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_91e99cf8_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON plotseasons FOR EACH ROW BEGIN DELETE FROM owneduse WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON; END;
CREATE TRIGGER DLT_fk_91e76a8c_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON crop FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (VEG_COD) as value FROM ownusedv WHERE VEG_COD = OLD.CROP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "ownusedv" violates foreign key constraint "fk_91e76a8c_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_91ea399c_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON owneduse FOR EACH ROW BEGIN DELETE FROM ownusedv WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_91e602aa_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON spadstown FOR EACH ROW BEGIN DELETE FROM plotgpspos WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD; END;
CREATE TRIGGER DLT_fk_91e7eec6_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON spadstown FOR EACH ROW BEGIN DELETE FROM plotpaddoks WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD; END;
CREATE TRIGGER DLT_fk_91e87a4e_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON pastures FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD) as value FROM plotpaddspe WHERE CROP_COD = OLD.CROP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotpaddspe" violates foreign key constraint "fk_91e87a4e_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_91eadcd0_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON plotpaddoks FOR EACH ROW BEGIN DELETE FROM plotpaddspe WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD; END;
CREATE TRIGGER DLT_fk_91e908ba_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON pastures FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROPD_COD) as value FROM plotpaddspedt WHERE CROPD_COD = OLD.CROP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotpaddspedt" violates foreign key constraint "fk_91e908ba_bce1_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_91eb88ce_bce1_11e0_a5d9_58946b4c242c BEFORE DELETE ON plotpaddspe FOR EACH ROW BEGIN DELETE FROM plotpaddspedt WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_3df4cb58_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON owneduse FOR EACH ROW BEGIN DELETE FROM cropman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_3df553c0_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM cropman WHERE ACTY_COD = OLD.ACTY_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropman" violates foreign key constraint "fk_3df553c0_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_3df5da52_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON cropman FOR EACH ROW BEGIN DELETE FROM cropmantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_3df7044a_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM cropmantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmantim" violates foreign key constraint "fk_3df7044a_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_cropmantim_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM cropmantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmantim" violates foreign key constraint "fk_cropmantim_periods1"') END; END;
CREATE TRIGGER DLT_fk_3df79fae_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON cropmantim FOR EACH ROW BEGIN DELETE FROM croplabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_3df84800_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM croplabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_3df8edbe_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON cropmantim FOR EACH ROW BEGIN DELETE FROM cropmanfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON ferttype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM cropmanfert WHERE FERTYP_COD = OLD.FERTYP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmanfert" violates foreign key constraint "fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM cropmanfert WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmanfert" violates foreign key constraint "fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_3dfaff5a_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON cropman FOR EACH ROW BEGIN DELETE FROM cropmanprchfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_3dfbbdd2_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON ferttype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM cropmanprchfert WHERE FERTYP_COD = OLD.FERTYP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmanprchfert" violates foreign key constraint "fk_3dfbbdd2_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_42404990_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM mnrheap WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON cropmantim FOR EACH ROW BEGIN DELETE FROM cropmanheap WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM cropmanheap WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM cropmanheap WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmanheap" violates foreign key constraint "fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_44bdd730_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON cropman FOR EACH ROW BEGIN DELETE FROM crpprodman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_44be5f16_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON cropprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (PROD_COD || CROP_COD) as value FROM crpprodman WHERE PROD_COD = OLD.PROD_COD AND CROP_COD = OLD.CROP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpprodman" violates foreign key constraint "fk_44be5f16_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_44bf621c_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM crpprodmantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpprodmantim" violates foreign key constraint "fk_44bf621c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_44c1c25a_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON crpprodman FOR EACH ROW BEGIN DELETE FROM crpprodmantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_crpprodmantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM crpprodmantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpprodmantim" violates foreign key constraint "fk_crpprodmantim_periods"') END; END;
CREATE TRIGGER DLT_fk_44bff0a6_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM crpprodlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_44c274f2_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON crpprodmantim FOR EACH ROW BEGIN DELETE FROM crpprodlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_44c0841c_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON crpprodman FOR EACH ROW BEGIN DELETE FROM crpprodmansold WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_44c1269c_bce3_11e0_a317_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM crpprodmansold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpprodmansold" violates foreign key constraint "fk_44c1269c_bce3_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_322bba82_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON cropman FOR EACH ROW BEGIN DELETE FROM crpforaman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_322c6d1a_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON cropfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FORA_COD || CROP_COD) as value FROM crpforaman WHERE FORA_COD = OLD.FORA_COD AND CROP_COD = OLD.CROP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpforaman" violates foreign key constraint "fk_322c6d1a_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_322d0f86_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON crpforaman FOR EACH ROW BEGIN DELETE FROM crpforamansold WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_322da694_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM crpforamansold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpforamansold" violates foreign key constraint "fk_322da694_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_322e3410_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON crpforaman FOR EACH ROW BEGIN DELETE FROM crpforamantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_322ed352_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM crpforamantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpforamantim" violates foreign key constraint "fk_322ed352_bce4_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_crpforamantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM crpforamantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpforamantim" violates foreign key constraint "fk_crpforamantim_periods"') END; END;
CREATE TRIGGER DLT_fk_322f701e_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON crpforamantim FOR EACH ROW BEGIN DELETE FROM crpforalabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_32302482_bce4_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM crpforalabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_52042e10_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON ownusedv FOR EACH ROW BEGIN DELETE FROM vegman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD; END;
CREATE TRIGGER DLT_fk_5204c096_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM vegman WHERE ACTY_COD = OLD.ACTY_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegman" violates foreign key constraint "fk_5204c096_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_5205513c_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON vegman FOR EACH ROW BEGIN DELETE FROM vegmantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_5205f4de_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM vegmantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmantim" violates foreign key constraint "fk_5205f4de_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_vegmantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM vegmantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmantim" violates foreign key constraint "fk_vegmantim_periods"') END; END;
CREATE TRIGGER DLT_fk_520691fa_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON vegmantim FOR EACH ROW BEGIN DELETE FROM veglabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_52073ee8_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM veglabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_5207e4e2_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON vegmantim FOR EACH ROW BEGIN DELETE FROM vegmanfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_52089d4c_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON ferttype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM vegmanfert WHERE FERTYP_COD = OLD.FERTYP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmanfert" violates foreign key constraint "fk_52089d4c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_52094b84_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM vegmanfert WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmanfert" violates foreign key constraint "fk_52094b84_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_520a0204_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON vegman FOR EACH ROW BEGIN DELETE FROM vegmanprchfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_520ac89c_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON ferttype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM vegmanprchfert WHERE FERTYP_COD = OLD.FERTYP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmanprchfert" violates foreign key constraint "fk_520ac89c_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_520b8c82_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON vegmantim FOR EACH ROW BEGIN DELETE FROM vegmanheap WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_520c5e14_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM vegmanheap WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_520d2dbc_bce5_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM vegmanheap WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmanheap" violates foreign key constraint "fk_520d2dbc_bce5_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_cce75930_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON vegman FOR EACH ROW BEGIN DELETE FROM vegprodman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_cce7e5bc_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON cropprods FOR EACH ROW BEGIN DELETE FROM vegprodman WHERE VEG_COD = OLD.CROP_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_cce86a32_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON vegprodman FOR EACH ROW BEGIN DELETE FROM vegprodmantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_cce900be_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM vegprodmantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegprodmantim" violates foreign key constraint "fk_cce900be_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_vegprodmantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM vegprodmantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegprodmantim" violates foreign key constraint "fk_vegprodmantim_periods"') END; END;
CREATE TRIGGER DLT_fk_cce990ec_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON vegprodmantim FOR EACH ROW BEGIN DELETE FROM vegprodlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_ccea3402_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM vegprodlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_cceacfc0_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON vegprodman FOR EACH ROW BEGIN DELETE FROM vegprodmansold WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_cceb82b2_bce6_11e0_a317_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM vegprodmansold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegprodmansold" violates foreign key constraint "fk_cceb82b2_bce6_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_9ad2a85e_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON vegman FOR EACH ROW BEGIN DELETE FROM vegforaman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_9ad2dbee_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON cropfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM vegforaman WHERE CROP_COD = OLD.CROP_COD AND FORA_COD = OLD.FORA_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegforaman" violates foreign key constraint "fk_9ad2dbee_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_9ad3628a_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON vegforaman FOR EACH ROW BEGIN DELETE FROM vegforamantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_9ad39b42_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM vegforamantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegforamantim" violates foreign key constraint "fk_9ad39b42_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_vegforamantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM vegforamantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegforamantim" violates foreign key constraint "fk_vegforamantim_periods"') END; END;
CREATE TRIGGER DLT_fk_9ad3c702_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON vegforamantim FOR EACH ROW BEGIN DELETE FROM vegforalabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_9ad4005a_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM vegforalabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_9ad30588_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON vegforaman FOR EACH ROW BEGIN DELETE FROM vegforamansold WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_9ad33a1c_bce7_11e0_a317_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM vegforamansold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegforamansold" violates foreign key constraint "fk_9ad33a1c_bce7_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_334977de_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON plotpaddspe FOR EACH ROW BEGIN DELETE FROM grassman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_334a053c_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM grassman WHERE ACTY_COD = OLD.ACTY_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassman" violates foreign key constraint "fk_334a053c_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_334a93d0_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON grassman FOR EACH ROW BEGIN DELETE FROM grassmantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_334f51d6_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM grassmantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmantim" violates foreign key constraint "fk_334f51d6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_grassmantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM grassmantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmantim" violates foreign key constraint "fk_grassmantim_periods"') END; END;
CREATE TRIGGER DLT_fk_334b315a_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON grassmantim FOR EACH ROW BEGIN DELETE FROM grasslabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_334bd74a_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM grasslabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_334c80b4_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON grassmantim FOR EACH ROW BEGIN DELETE FROM grassmanfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_334d32b6_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON ferttype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM grassmanfert WHERE FERTYP_COD = OLD.FERTYP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmanfert" violates foreign key constraint "fk_334d32b6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_33500fc2_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM grassmanfert WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmanfert" violates foreign key constraint "fk_33500fc2_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_334ddf2c_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON grassman FOR EACH ROW BEGIN DELETE FROM grassmanprchfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_334e9ba6_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON ferttype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM grassmanprchfert WHERE FERTYP_COD = OLD.FERTYP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmanprchfert" violates foreign key constraint "fk_334e9ba6_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_3350d272_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON grassmantim FOR EACH ROW BEGIN DELETE FROM grassmanheap WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_3351a292_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM grassmanheap WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_33527082_bce8_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM grassmanheap WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmanheap" violates foreign key constraint "fk_33527082_bce8_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e2e10f26_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON grassman FOR EACH ROW BEGIN DELETE FROM grassprodman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_e2e1bb1a_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON pastprods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || PROD_COD) as value FROM grassprodman WHERE CROP_COD = OLD.CROP_COD AND PROD_COD = OLD.PROD_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassprodman" violates foreign key constraint "fk_e2e1bb1a_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_e2e27c58_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON grassprodman FOR EACH ROW BEGIN DELETE FROM grassprodmantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_e2e34ffc_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM grassprodmantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassprodmantim" violates foreign key constraint "fk_e2e34ffc_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_grassprodmantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM grassprodmantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassprodmantim" violates foreign key constraint "fk_grassprodmantim_periods"') END; END;
CREATE TRIGGER DLT_fk_e2e41e3c_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON grassprodmantim FOR EACH ROW BEGIN DELETE FROM grassprodlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_e2e50928_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM grassprodlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_e2e5e942_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON grassprodman FOR EACH ROW BEGIN DELETE FROM grassprodmansold WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_e2e6d992_bce9_11e0_a317_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM grassprodmansold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassprodmansold" violates foreign key constraint "fk_e2e6d992_bce9_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_6ecf545c_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON grassman FOR EACH ROW BEGIN DELETE FROM grassforaman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_6ecf860c_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON pastfora FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (CROP_COD || FORA_COD) as value FROM grassforaman WHERE CROP_COD = OLD.CROP_COD AND FORA_COD = OLD.FORA_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassforaman" violates foreign key constraint "fk_6ecf860c_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_6ed016c6_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON grassforaman FOR EACH ROW BEGIN DELETE FROM grassforamantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_6ed04f42_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM grassforamantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassforamantim" violates foreign key constraint "fk_6ed04f42_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_grassforamantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM grassforamantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassforamantim" violates foreign key constraint "fk_grassforamantim_periods"') END; END;
CREATE TRIGGER DLT_fk_6ed07f1c_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON grassforamantim FOR EACH ROW BEGIN DELETE FROM grassforalabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_6ed0bd38_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM grassforalabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_6ecfb2c6_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON grassforaman FOR EACH ROW BEGIN DELETE FROM grassforamansold WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_6ecfeb7e_bcea_11e0_a317_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM grassforamansold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassforamansold" violates foreign key constraint "fk_6ecfeb7e_bcea_11e0_a317_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_3994c7c6_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON lvstosys FOR EACH ROW BEGIN DELETE FROM feedgroups WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD; END;
CREATE TRIGGER DLT_fk_399baa0a_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM livegroups WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_3995a826_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM liveavailres WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_3996875a_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON restypes FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FEED_COD) as value FROM liveavailres WHERE FEED_COD = OLD.RES_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "liveavailres" violates foreign key constraint "fk_3996875a_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_39977278_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON liveavailres FOR EACH ROW BEGIN DELETE FROM stallfeeprch WHERE SYS_COD = OLD.SYS_COD AND FEED_COD = OLD.FEED_COD; END;
CREATE TRIGGER DLT_fk_39987088_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM stallfeeprch WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_39997924_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON plotpaddspe FOR EACH ROW BEGIN DELETE FROM grazingman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_399a8ba2_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM grazingman WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_399ccfe8_bceb_11e0_9e78_58946b4c242c BEFORE DELETE ON lvproducts FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MLIVE_COD || MPROD_COD) as value FROM grazingman WHERE MLIVE_COD = OLD.LIVE_COD AND MPROD_COD = OLD.PROD_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grazingman" violates foreign key constraint "fk_399ccfe8_bceb_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_11fb077e_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON crpprodman FOR EACH ROW BEGIN DELETE FROM crpprodmanfeed WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_11fbb070_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM crpprodmanfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_11fc8fea_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON crpforaman FOR EACH ROW BEGIN DELETE FROM crpforamanfeed WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_11fd60d2_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM crpforamanfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_11fe14d2_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON vegprodman FOR EACH ROW BEGIN DELETE FROM vegprodmanfeed WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_11fedb2e_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM vegprodmanfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_11ff9578_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON vegforaman FOR EACH ROW BEGIN DELETE FROM vegforamanfeed WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_12006d90_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM vegforamanfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_120155fc_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON grassprodman FOR EACH ROW BEGIN DELETE FROM grassprodmanfeed WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_12022c20_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM grassprodmanfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_12030438_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON grassforaman FOR EACH ROW BEGIN DELETE FROM grassforamanfeed WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_1203ea6a_bcec_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM grassforamanfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_29cb5696_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON lvstosys FOR EACH ROW BEGIN DELETE FROM liveman WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD; END;
CREATE TRIGGER DLT_fk_29cbf222_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM liveman WHERE ACTY_COD = OLD.ACTY_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "liveman" violates foreign key constraint "fk_29cbf222_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_29ce0558_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON liveman FOR EACH ROW BEGIN DELETE FROM livemantim WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_livemantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM livemantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livemantim" violates foreign key constraint "fk_livemantim_periods"') END; END;
CREATE TRIGGER DLT_fk_29cc7a26_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM livelabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_29ceeee6_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON livemantim FOR EACH ROW BEGIN DELETE FROM livelabour WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_29cd31a0_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON lvstosys FOR EACH ROW BEGIN DELETE FROM otherprod WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD; END;
CREATE TRIGGER DLT_fk_29d0895e_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM livemangrp WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_29d1445c_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM livemangrp WHERE ACTY_COD = OLD.ACTY_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livemangrp" violates foreign key constraint "fk_29d1445c_bced_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_29d207b6_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON livemangrp FOR EACH ROW BEGIN DELETE FROM livemangrptim WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_livemangrptim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM livemangrptim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livemangrptim" violates foreign key constraint "fk_livemangrptim_periods"') END; END;
CREATE TRIGGER DLT_fk_29d2d448_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON livemangrptim FOR EACH ROW BEGIN DELETE FROM livemangrplabour WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_29d3b700_bced_11e0_9e78_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM livemangrplabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_4436dbf6_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM farmassets WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_4437140e_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM otherhhcp WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_44374c1c_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM otherhhexp WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_44378808_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM otherincome WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_44360668_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM otherman WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_44363a70_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON activity FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTY_COD) as value FROM otherman WHERE ACTY_COD = OLD.ACTY_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "otherman" violates foreign key constraint "fk_44363a70_bcf5_11e0_9e78_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_44366db0_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON otherman FOR EACH ROW BEGIN DELETE FROM othermantim WHERE SYS_COD = OLD.SYS_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_othermantim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM othermantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "othermantim" violates foreign key constraint "fk_othermantim_periods"') END; END;
CREATE TRIGGER DLT_fk_4436a456_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM otherlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_4437c516_bcf5_11e0_9e78_58946b4c242c BEFORE DELETE ON othermantim FOR EACH ROW BEGIN DELETE FROM otherlabour WHERE SYS_COD = OLD.SYS_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_ee3ece80_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM livehvst WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_ee3f5dd2_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON lvproducts FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (LIVE_COD || PROD_COD) as value FROM livehvst WHERE LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvst" violates foreign key constraint "fk_ee3f5dd2_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_ee3fe626_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON livehvst FOR EACH ROW BEGIN DELETE FROM livehvsttim WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_livehvsttim_periods BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM livehvsttim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvsttim" violates foreign key constraint "fk_livehvsttim_periods"') END; END;
CREATE TRIGGER DLT_fk_ee4080b8_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON livehvsttim FOR EACH ROW BEGIN DELETE FROM livehvstlabour WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_ee4120e0_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM livehvstlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_ee41c09a_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON livehvst FOR EACH ROW BEGIN DELETE FROM livehvstsold WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_ee426bb2_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM livehvstsold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvstsold" violates foreign key constraint "fk_ee426bb2_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_livehvstcat_livehvst1 BEFORE DELETE ON livehvst FOR EACH ROW BEGIN DELETE FROM livehvstcat WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_livehvsttimcat_livehvstcat1 BEFORE DELETE ON livehvstcat FOR EACH ROW BEGIN DELETE FROM livehvsttimcat WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD AND HERD_COD = OLD.HERD_COD; END;
CREATE TRIGGER DLT_fk_livehvsttimcat_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM livehvsttimcat WHERE NMONTH = OLD.period_id; END;
CREATE TRIGGER DLT_fk_ee43d100_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON livehvstcat FOR EACH ROW BEGIN DELETE FROM livehvstsoldcat WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD AND HERD_COD = OLD.HERD_COD; END;
CREATE TRIGGER DLT_fk_ee4490b8_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM livehvstsoldcat WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvstsoldcat" violates foreign key constraint "fk_ee4490b8_bcf8_11e0_948f_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_ee454b02_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON livehvst FOR EACH ROW BEGIN DELETE FROM livehvstfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_ee4617da_bcf8_11e0_948f_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM livehvstfeed WHERE SYS_COD = OLD.SYS_COD AND FLIVE_ICOD = OLD.LIVE_ICOD AND FGROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_4240db80_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheaplvprod WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_42417cf2_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON livehvst FOR EACH ROW BEGIN DELETE FROM mnrheaplvprod WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_42422850_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM mnrheapprods WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_4242d584_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapaddprods WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_42438ace_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheapprods FOR EACH ROW BEGIN DELETE FROM mnrheapaddprods WHERE SYS_COD = OLD.SYS_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_42444a54_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapsold WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_42450cc8_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (MARK_COD) as value FROM mnrheapsold WHERE MARK_COD = OLD.MARK_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "mnrheapsold" violates foreign key constraint "fk_42450cc8_bcfa_11e0_b883_58946b4c242c"') END; END;
CREATE TRIGGER DLT_fk_4245d9a0_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapfeed WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_4246acfe_bcfa_11e0_b883_58946b4c242c BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM mnrheapfeed WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_81de4dee_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapcrpprod WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_81df0784_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON crpprodman FOR EACH ROW BEGIN DELETE FROM mnrheapcrpprod WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_81dfd6dc_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapcrpfora WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_81e0a60c_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON crpforaman FOR EACH ROW BEGIN DELETE FROM mnrheapcrpfora WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_81e18ba8_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapgrassprod WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_81e26a96_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON grassprodman FOR EACH ROW BEGIN DELETE FROM mnrheapgrassprod WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_81e35b04_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapgrassfora WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_81e44a64_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON grassforaman FOR EACH ROW BEGIN DELETE FROM mnrheapgrassfora WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_81e549e6_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapvegprod WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_81e64d8c_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON vegprodman FOR EACH ROW BEGIN DELETE FROM mnrheapvegprod WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_81e7808a_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM mnrheapvegfora WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_81e8dec6_bcfb_11e0_b883_58946b4c242c BEFORE DELETE ON vegforaman FOR EACH ROW BEGIN DELETE FROM mnrheapvegfora WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_systemperiod_system1 BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM systemperiods WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_systemperiod_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM systemperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "systemperiods" violates foreign key constraint "fk_systemperiod_periods1"') END; END;
CREATE TRIGGER DLT_fk_table1_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM labforceperiods WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_table1_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM labforceperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "labforceperiods" violates foreign key constraint "fk_table1_periods1"') END; END;
CREATE TRIGGER DLT_fk_lvstosysperiods_lvstosys1 BEFORE DELETE ON lvstosys FOR EACH ROW BEGIN DELETE FROM lvstosysperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD; END;
CREATE TRIGGER DLT_fk_lvstosysperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM lvstosysperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "lvstosysperiods" violates foreign key constraint "fk_lvstosysperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_plotseasonsperiods_plotseasons1 BEFORE DELETE ON plotseasons FOR EACH ROW BEGIN DELETE FROM plotseasonsperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON; END;
CREATE TRIGGER DLT_fk_plotseasonsperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM plotseasonsperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotseasonsperiods" violates foreign key constraint "fk_plotseasonsperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_owneduseperiods_owneduse1 BEFORE DELETE ON owneduse FOR EACH ROW BEGIN DELETE FROM owneduseperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_owneduseperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM owneduseperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "owneduseperiods" violates foreign key constraint "fk_owneduseperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_ownusedvperiods_ownusedv1 BEFORE DELETE ON ownusedv FOR EACH ROW BEGIN DELETE FROM ownusedvperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD; END;
CREATE TRIGGER DLT_fk_ownusedvperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM ownusedvperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "ownusedvperiods" violates foreign key constraint "fk_ownusedvperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_cropmanperiods_cropman1 BEFORE DELETE ON cropman FOR EACH ROW BEGIN DELETE FROM cropmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_cropmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM cropmanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmanperiods" violates foreign key constraint "fk_cropmanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_cropmanprchfertperiods_cropmanprchfert1 BEFORE DELETE ON cropmanprchfert FOR EACH ROW BEGIN DELETE FROM cropmanprchfertperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FERTYP_COD = OLD.FERTYP_COD; END;
CREATE TRIGGER DLT_fk_cropmanprchfertperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM cropmanprchfertperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "cropmanprchfertperiods" violates foreign key constraint "fk_cropmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_crpprodmansoldperiods_crpprodmansold1 BEFORE DELETE ON crpprodmansold FOR EACH ROW BEGIN DELETE FROM crpprodmansoldperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_crpprodmansoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM crpprodmansoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpprodmansoldperiods" violates foreign key constraint "fk_crpprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_crpprodmanperiods_crpprodman1 BEFORE DELETE ON crpprodman FOR EACH ROW BEGIN DELETE FROM crpprodmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_crpprodmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM crpprodmanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpprodmanperiods" violates foreign key constraint "fk_crpprodmanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_crpforamanperiods_crpforaman1 BEFORE DELETE ON crpforaman FOR EACH ROW BEGIN DELETE FROM crpforamanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_crpforamanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM crpforamanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpforamanperiods" violates foreign key constraint "fk_crpforamanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_crpforamansoldperiods_crpforamansold1 BEFORE DELETE ON crpforamansold FOR EACH ROW BEGIN DELETE FROM crpforamansoldperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_crpforamansoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM crpforamansoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpforamansoldperiods" violates foreign key constraint "fk_crpforamansoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegmanperiods_vegman1 BEFORE DELETE ON vegman FOR EACH ROW BEGIN DELETE FROM vegmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_vegmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegmanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmanperiods" violates foreign key constraint "fk_vegmanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegmanprchfertperiods_vegmanprchfert1 BEFORE DELETE ON vegmanprchfert FOR EACH ROW BEGIN DELETE FROM vegmanprchfertperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FERTYP_COD = OLD.FERTYP_COD; END;
CREATE TRIGGER DLT_fk_vegmanprchfertperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegmanprchfertperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegmanprchfertperiods" violates foreign key constraint "fk_vegmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegprodmanperiods_vegprodman1 BEFORE DELETE ON vegprodman FOR EACH ROW BEGIN DELETE FROM vegprodmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_vegprodmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegprodmanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegprodmanperiods" violates foreign key constraint "fk_vegprodmanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegprodmansoldperiods_vegprodmansold1 BEFORE DELETE ON vegprodmansold FOR EACH ROW BEGIN DELETE FROM vegprodmansoldperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_vegprodmansoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegprodmansoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegprodmansoldperiods" violates foreign key constraint "fk_vegprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegforamanperiods_vegforaman1 BEFORE DELETE ON vegforaman FOR EACH ROW BEGIN DELETE FROM vegforamanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_vegforamanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegforamanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegforamanperiods" violates foreign key constraint "fk_vegforamanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegforamansoldperiods_vegforamansold1 BEFORE DELETE ON vegforamansold FOR EACH ROW BEGIN DELETE FROM vegforamansoldperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_vegforamansoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegforamansoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegforamansoldperiods" violates foreign key constraint "fk_vegforamansoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassmanperiods_grassman1 BEFORE DELETE ON grassman FOR EACH ROW BEGIN DELETE FROM grassmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_grassmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassmanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmanperiods" violates foreign key constraint "fk_grassmanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassmanprchfertperiods_grassmanprchfert1 BEFORE DELETE ON grassmanprchfert FOR EACH ROW BEGIN DELETE FROM grassmanprchfertperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FERTYP_COD = OLD.FERTYP_COD; END;
CREATE TRIGGER DLT_fk_grassmanprchfertperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassmanprchfertperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassmanprchfertperiods" violates foreign key constraint "fk_grassmanprchfertperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassprodmanperiods_grassprodman1 BEFORE DELETE ON grassprodman FOR EACH ROW BEGIN DELETE FROM grassprodmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_grassprodmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassprodmanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassprodmanperiods" violates foreign key constraint "fk_grassprodmanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassprodmansoldperiods_grassprodmansold1 BEFORE DELETE ON grassprodmansold FOR EACH ROW BEGIN DELETE FROM grassprodmansoldperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_grassprodmansoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassprodmansoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassprodmansoldperiods" violates foreign key constraint "fk_grassprodmansoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassforamanperiods_grassforaman1 BEFORE DELETE ON grassforaman FOR EACH ROW BEGIN DELETE FROM grassforamanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_grassforamanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassforamanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassforamanperiods" violates foreign key constraint "fk_grassforamanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassforamansoldperiods_grassforamansold1 BEFORE DELETE ON grassforamansold FOR EACH ROW BEGIN DELETE FROM grassforamansoldperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_grassforamansoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassforamansoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassforamansoldperiods" violates foreign key constraint "fk_grassforamansoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_liveavailresperiods_liveavailres1 BEFORE DELETE ON liveavailres FOR EACH ROW BEGIN DELETE FROM liveavailresperiods WHERE SYS_COD = OLD.SYS_COD AND FEED_COD = OLD.FEED_COD; END;
CREATE TRIGGER DLT_fk_liveavailresperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM liveavailresperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "liveavailresperiods" violates foreign key constraint "fk_liveavailresperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_stallfeeprchperiods_stallfeeprch1 BEFORE DELETE ON stallfeeprch FOR EACH ROW BEGIN DELETE FROM stallfeeprchperiods WHERE SYS_COD = OLD.SYS_COD AND FEED_COD = OLD.FEED_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_stallfeeprchperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM stallfeeprchperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "stallfeeprchperiods" violates foreign key constraint "fk_stallfeeprchperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_livegroupsperiods_livegroups1 BEFORE DELETE ON livegroups FOR EACH ROW BEGIN DELETE FROM livegroupsperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND HERD_COD = OLD.HERD_COD; END;
CREATE TRIGGER DLT_fk_livegroupsperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM livegroupsperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livegroupsperiods" violates foreign key constraint "fk_livegroupsperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grazingmanperiods_grazingman1 BEFORE DELETE ON grazingman FOR EACH ROW BEGIN DELETE FROM grazingmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_grazingmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grazingmanperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grazingmanperiods" violates foreign key constraint "fk_grazingmanperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_crpprodmanfeedperiods_crpprodmanfeed1 BEFORE DELETE ON crpprodmanfeed FOR EACH ROW BEGIN DELETE FROM crpprodmanfeedperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_crpprodmanfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM crpprodmanfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpprodmanfeedperiods" violates foreign key constraint "fk_crpprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_crpforamanfeedperiods_crpforamanfeed1 BEFORE DELETE ON crpforamanfeed FOR EACH ROW BEGIN DELETE FROM crpforamanfeedperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_crpforamanfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM crpforamanfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "crpforamanfeedperiods" violates foreign key constraint "fk_crpforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegprodmanfeedperiods_vegprodmanfeed1 BEFORE DELETE ON vegprodmanfeed FOR EACH ROW BEGIN DELETE FROM vegprodmanfeedperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_vegprodmanfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegprodmanfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegprodmanfeedperiods" violates foreign key constraint "fk_vegprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_vegforamanfeedperiods_vegforamanfeed1 BEFORE DELETE ON vegforamanfeed FOR EACH ROW BEGIN DELETE FROM vegforamanfeedperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_vegforamanfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM vegforamanfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "vegforamanfeedperiods" violates foreign key constraint "fk_vegforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassprodmanfeedperiods_grassprodmanfeed1 BEFORE DELETE ON grassprodmanfeed FOR EACH ROW BEGIN DELETE FROM grassprodmanfeedperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND PROD_COD = OLD.PROD_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_grassprodmanfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassprodmanfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassprodmanfeedperiods" violates foreign key constraint "fk_grassprodmanfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_grassforamanfeedperiods_grassforamanfeed1 BEFORE DELETE ON grassforamanfeed FOR EACH ROW BEGIN DELETE FROM grassforamanfeedperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD AND FORA_COD = OLD.FORA_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_grassforamanfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM grassforamanfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "grassforamanfeedperiods" violates foreign key constraint "fk_grassforamanfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_otherprodperiods_otherprod1 BEFORE DELETE ON otherprod FOR EACH ROW BEGIN DELETE FROM otherprodperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_otherprodperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM otherprodperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "otherprodperiods" violates foreign key constraint "fk_otherprodperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_otherhhcpperiods_otherhhcp1 BEFORE DELETE ON otherhhcp FOR EACH ROW BEGIN DELETE FROM otherhhcpperiods WHERE SYS_COD = OLD.SYS_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_otherhhcpperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM otherhhcpperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "otherhhcpperiods" violates foreign key constraint "fk_otherhhcpperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_otherhhexpperiods_otherhhexp1 BEFORE DELETE ON otherhhexp FOR EACH ROW BEGIN DELETE FROM otherhhexpperiods WHERE SYS_COD = OLD.SYS_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_otherhhexpperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM otherhhexpperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "otherhhexpperiods" violates foreign key constraint "fk_otherhhexpperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_otherincomeperiods_otherincome1 BEFORE DELETE ON otherincome FOR EACH ROW BEGIN DELETE FROM otherincomeperiods WHERE SYS_COD = OLD.SYS_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_otherincomeperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM otherincomeperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "otherincomeperiods" violates foreign key constraint "fk_otherincomeperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_livehvstperiods_livehvst1 BEFORE DELETE ON livehvst FOR EACH ROW BEGIN DELETE FROM livehvstperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_livehvstperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM livehvstperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvstperiods" violates foreign key constraint "fk_livehvstperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_livehvstfeedperiods_livehvstfeed1 BEFORE DELETE ON livehvstfeed FOR EACH ROW BEGIN DELETE FROM livehvstfeedperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD AND FLIVE_ICOD = OLD.FLIVE_ICOD AND FGROUP_COD = OLD.FGROUP_COD; END;
CREATE TRIGGER DLT_fk_livehvstfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM livehvstfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvstfeedperiods" violates foreign key constraint "fk_livehvstfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_livehvstsoldperiods_livehvstsold1 BEFORE DELETE ON livehvstsold FOR EACH ROW BEGIN DELETE FROM livehvstsoldperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_livehvstsoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM livehvstsoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvstsoldperiods" violates foreign key constraint "fk_livehvstsoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_livehvstsoldcatperiods_livehvstsoldcat1 BEFORE DELETE ON livehvstsoldcat FOR EACH ROW BEGIN DELETE FROM livehvstsoldcatperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD AND HERD_COD = OLD.HERD_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_livehvstsoldcatperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM livehvstsoldcatperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "livehvstsoldcatperiods" violates foreign key constraint "fk_livehvstsoldcatperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_mnrheapfeedperiods_mnrheapfeed1 BEFORE DELETE ON mnrheapfeed FOR EACH ROW BEGIN DELETE FROM mnrheapfeedperiods WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_mnrheapfeedperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM mnrheapfeedperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "mnrheapfeedperiods" violates foreign key constraint "fk_mnrheapfeedperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_mnrheapprodsperiods_mnrheapprods1 BEFORE DELETE ON mnrheapprods FOR EACH ROW BEGIN DELETE FROM mnrheapprodsperiods WHERE SYS_COD = OLD.SYS_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_mnrheapprodsperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM mnrheapprodsperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "mnrheapprodsperiods" violates foreign key constraint "fk_mnrheapprodsperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_mnrheapsoldperiods_mnrheapsold1 BEFORE DELETE ON mnrheapsold FOR EACH ROW BEGIN DELETE FROM mnrheapsoldperiods WHERE mnrheapsold_SYS_COD = OLD.SYS_COD AND mnrheapsold_HEAP_COD = OLD.HEAP_COD AND mnrheapsold_MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_mnrheapsoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (period_id) as value FROM mnrheapsoldperiods WHERE period_id = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "mnrheapsoldperiods" violates foreign key constraint "fk_mnrheapsoldperiods_periods1"') END; END;
CREATE TRIGGER DLT_fk_owneduselabour_owneduse1 BEFORE DELETE ON owneduse FOR EACH ROW BEGIN DELETE FROM owneduselabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_owneduselabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM owneduselabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_plotpaddspelabour_plotpaddspe1 BEFORE DELETE ON plotpaddspe FOR EACH ROW BEGIN DELETE FROM plotpaddspelabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD; END;
CREATE TRIGGER DLT_fk_plotpaddspelabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM plotpaddspelabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_ownusedvlabour_ownusedv1 BEFORE DELETE ON ownusedv FOR EACH ROW BEGIN DELETE FROM ownusedvlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD; END;
CREATE TRIGGER DLT_fk_ownusedvlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM ownusedvlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_cropmanlabour_cropman1 BEFORE DELETE ON cropman FOR EACH ROW BEGIN DELETE FROM cropmanlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_cropmanlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM cropmanlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_vegmanlabour_vegman1 BEFORE DELETE ON vegman FOR EACH ROW BEGIN DELETE FROM vegmanlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMSEASON = OLD.NUMSEASON AND CROP_COD = OLD.CROP_COD AND VEG_COD = OLD.VEG_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_vegmanlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM vegmanlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_grassmanlabour_grassman1 BEFORE DELETE ON grassman FOR EACH ROW BEGIN DELETE FROM grassmanlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND NUMPADD = OLD.NUMPADD AND CROP_COD = OLD.CROP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_grassmanlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM grassmanlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_lvstosyslabour_lvstosys1 BEFORE DELETE ON lvstosys FOR EACH ROW BEGIN DELETE FROM lvstosyslabour WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD; END;
CREATE TRIGGER DLT_fk_lvstosyslabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM lvstosyslabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_feedgroupslabour_feedgroups1 BEFORE DELETE ON feedgroups FOR EACH ROW BEGIN DELETE FROM feedgroupslabour WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD; END;
CREATE TRIGGER DLT_fk_feedgroupslabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM feedgroupslabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_lvstosysherdstr_lvstosys1 BEFORE DELETE ON lvstosys FOR EACH ROW BEGIN DELETE FROM lvstosysherdstr WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD; END;
CREATE TRIGGER DLT_fk_livemanlabour_liveman1 BEFORE DELETE ON liveman FOR EACH ROW BEGIN DELETE FROM livemanlabour WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_livemanlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM livemanlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_table1_livemangrp1 BEFORE DELETE ON livemangrp FOR EACH ROW BEGIN DELETE FROM livemangrplabourB WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_livemangrplabourB_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM livemangrplabourB WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_othermanlabour_otherman1 BEFORE DELETE ON otherman FOR EACH ROW BEGIN DELETE FROM othermanlabour WHERE SYS_COD = OLD.SYS_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_othermanlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM othermanlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_moduletree_moduletree1 BEFORE DELETE ON moduletree FOR EACH ROW BEGIN DELETE FROM moduletree WHERE parent_module = OLD.module_id; END;
CREATE TRIGGER DLT_fk_sysmodulenotes_system1 BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM sysmodulenotes WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_livehvstcatperiods_livehvstcat1 BEFORE DELETE ON livehvstcat FOR EACH ROW BEGIN DELETE FROM livehvstcatperiods WHERE SYS_COD = OLD.SYS_COD AND LIVE_ICOD = OLD.LIVE_ICOD AND GROUP_COD = OLD.GROUP_COD AND LIVE_COD = OLD.LIVE_COD AND PROD_COD = OLD.PROD_COD AND HERD_COD = OLD.HERD_COD; END;
CREATE TRIGGER DLT_fk_livehvstcatperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM livehvstcatperiods WHERE period_id = OLD.period_id; END;
CREATE TRIGGER DLT_fk_plotman_spadstown1 BEFORE DELETE ON spadstown FOR EACH ROW BEGIN DELETE FROM plotman WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD; END;
CREATE TRIGGER DLT_fk_plotman_activity1 BEFORE DELETE ON activity FOR EACH ROW BEGIN DELETE FROM plotman WHERE ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_plotmanperiods_plotman1 BEFORE DELETE ON plotman FOR EACH ROW BEGIN DELETE FROM plotmanperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_plotmanperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM plotmanperiods WHERE period_id = OLD.period_id; END;
CREATE TRIGGER DLT_fk_3df7044a_bce2_11e0_a5d9_58946b4c242c0 BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM plotmantim WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotmantim" violates foreign key constraint "fk_3df7044a_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER DLT_fk_plotmantim_periods10 BEFORE DELETE ON periods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (NMONTH) as value FROM plotmantim WHERE NMONTH = OLD.period_id) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotmantim" violates foreign key constraint "fk_plotmantim_periods10"') END; END;
CREATE TRIGGER DLT_fk_plotman_plotmantim BEFORE DELETE ON plotman FOR EACH ROW BEGIN DELETE FROM plotmantim WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_plotlabour_plotmantim1 BEFORE DELETE ON plotmantim FOR EACH ROW BEGIN DELETE FROM plotlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_plotlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM plotlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c0 BEFORE DELETE ON ferttype FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (FERTYP_COD) as value FROM plotmanfert WHERE FERTYP_COD = OLD.FERTYP_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotmanfert" violates foreign key constraint "fk_3df9a02e_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER DLT_fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c0 BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM plotmanfert WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotmanfert" violates foreign key constraint "fk_3dfa4a06_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER DLT_fk_plotmanfert_plotmantim1 BEFORE DELETE ON plotmantim FOR EACH ROW BEGIN DELETE FROM plotmanfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_plotmanprchfert_plotman1 BEFORE DELETE ON plotman FOR EACH ROW BEGIN DELETE FROM plotmanprchfert WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_plotmanprchfert_ferttype1 BEFORE DELETE ON ferttype FOR EACH ROW BEGIN DELETE FROM plotmanprchfert WHERE FERTYP_COD = OLD.FERTYP_COD; END;
CREATE TRIGGER DLT_fk_plotmanprchfertperiods_plotmanprchfert1 BEFORE DELETE ON plotmanprchfert FOR EACH ROW BEGIN DELETE FROM plotmanprchfertperiods WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD AND FERTYP_COD = OLD.FERTYP_COD; END;
CREATE TRIGGER DLT_fk_plotmanprchfertperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM plotmanprchfertperiods WHERE period_id = OLD.period_id; END;
CREATE TRIGGER DLT_fk_plotmanlabour_plotman1 BEFORE DELETE ON plotman FOR EACH ROW BEGIN DELETE FROM plotmanlabour WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD; END;
CREATE TRIGGER DLT_fk_plotmanlabour_labforce1 BEFORE DELETE ON labforce FOR EACH ROW BEGIN DELETE FROM plotmanlabour WHERE SYS_COD = OLD.SYS_COD AND PERS_COD = OLD.PERS_COD; END;
CREATE TRIGGER DLT_fk_3dfc790c_bce2_11e0_a5d9_58946b4c242c0 BEFORE DELETE ON plotmantim FOR EACH ROW BEGIN DELETE FROM plotmanheap WHERE SYS_COD = OLD.SYS_COD AND PLOT_COD = OLD.PLOT_COD AND ACTY_COD = OLD.ACTY_COD AND NMONTH = OLD.NMONTH; END;
CREATE TRIGGER DLT_fk_3dfd4490_bce2_11e0_a5d9_58946b4c242c0 BEFORE DELETE ON mnrheap FOR EACH ROW BEGIN DELETE FROM plotmanheap WHERE SYS_COD = OLD.SYS_COD AND HEAP_COD = OLD.HEAP_COD; END;
CREATE TRIGGER DLT_fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c0 BEFORE DELETE ON actymethods FOR EACH ROW BEGIN SELECT CASE WHEN ((SELECT (ACTYM_COD || MET_COD) as value FROM plotmanheap WHERE ACTYM_COD = OLD.ACTY_COD AND MET_COD = OLD.MET_COD) IS NOT NULL) THEN RAISE(ABORT, 'delete on table "plotmanheap" violates foreign key constraint "fk_3dfe0a56_bce2_11e0_a5d9_58946b4c242c0"') END; END;
CREATE TRIGGER DLT_fk_grpcrpprodsprod_system1 BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM grpcrpprodsprod WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_grpcrpprodsprod_cropprods1 BEFORE DELETE ON cropprods FOR EACH ROW BEGIN DELETE FROM grpcrpprodsprod WHERE CROP_COD = OLD.CROP_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_grpcrpforaprod_system1 BEFORE DELETE ON system FOR EACH ROW BEGIN DELETE FROM grpcrpforaprod WHERE SYS_COD = OLD.SYS_COD; END;
CREATE TRIGGER DLT_fk_grpcrpforaprod_cropfora1 BEFORE DELETE ON cropfora FOR EACH ROW BEGIN DELETE FROM grpcrpforaprod WHERE CROP_COD = OLD.CROP_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_grpcrpprodssold_grpcrpprodsprod1 BEFORE DELETE ON grpcrpprodsprod FOR EACH ROW BEGIN DELETE FROM grpcrpprodssold WHERE SYS_COD = OLD.SYS_COD AND CROP_COD = OLD.CROP_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_grpcrpprodssold_markoutlet1 BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN DELETE FROM grpcrpprodssold WHERE MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_grpcrpprodssoldperiods_grpcrpprodssold1 BEFORE DELETE ON grpcrpprodssold FOR EACH ROW BEGIN DELETE FROM grpcrpprodssoldperiods WHERE SYS_COD = OLD.SYS_COD AND CROP_COD = OLD.CROP_COD AND PROD_COD = OLD.PROD_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_grpcrpprodssoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM grpcrpprodssoldperiods WHERE period_id = OLD.period_id; END;
CREATE TRIGGER DLT_fk_grpcrpforasold_grpcrpforaprod1 BEFORE DELETE ON grpcrpforaprod FOR EACH ROW BEGIN DELETE FROM grpcrpforasold WHERE SYS_COD = OLD.SYS_COD AND CROP_COD = OLD.CROP_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_grpcrpforasold_markoutlet1 BEFORE DELETE ON markoutlet FOR EACH ROW BEGIN DELETE FROM grpcrpforasold WHERE MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_grpcrpforasoldperiods_grpcrpforasold1 BEFORE DELETE ON grpcrpforasold FOR EACH ROW BEGIN DELETE FROM grpcrpforasoldperiods WHERE SYS_COD = OLD.SYS_COD AND CROP_COD = OLD.CROP_COD AND FORA_COD = OLD.FORA_COD AND MARK_COD = OLD.MARK_COD; END;
CREATE TRIGGER DLT_fk_grpcrpforasoldperiods_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM grpcrpforasoldperiods WHERE period_id = OLD.period_id; END;
CREATE TRIGGER DLT_fk_grpcrpprodscons_grpcrpprodsprod1 BEFORE DELETE ON grpcrpprodsprod FOR EACH ROW BEGIN DELETE FROM grpcrpprodscons WHERE SYS_COD = OLD.SYS_COD AND CROP_COD = OLD.CROP_COD AND PROD_COD = OLD.PROD_COD; END;
CREATE TRIGGER DLT_fk_grpcrpprodscons_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM grpcrpprodscons WHERE period_id = OLD.period_id; END;
CREATE TRIGGER DLT_fk_grpcrpforacons_grpcrpforaprod1 BEFORE DELETE ON grpcrpforaprod FOR EACH ROW BEGIN DELETE FROM grpcrpforacons WHERE SYS_COD = OLD.SYS_COD AND CROP_COD = OLD.CROP_COD AND FORA_COD = OLD.FORA_COD; END;
CREATE TRIGGER DLT_fk_grpcrpforacons_periods1 BEFORE DELETE ON periods FOR EACH ROW BEGIN DELETE FROM grpcrpforacons WHERE period_id = OLD.period_id; END;
